''
''  Codetips definition file for WinAPI
''
''  Format:
''  1st character:  F=FUNCTION, T=TYPE, S=STANDARD_DATATYPE
''  2nd character:  colon.
''  TYPE elements are separated by | pipe symbol. Each element name/datatype is separated by comma.
''  STANDARD datatypes are separated by | pipe symobol (datatype followed by description of the datatype.

S:HWnd|Windows handle
S:HDC|Handle device context
S:HANDLE|Unique object identifier
S:COLORREF|RGB color in format 0x00bbggrr
S:HCURSOR|Handle cursor
S:HINSTANCE|Handle object instance
S:HBRUSH|Handle logical brush
S:HMENU|Handle menu handle
S:HBITMAP|Handle bitmap object
S:HICON|Handle icon object

T:Rect|Left,Long|top,Long|Right,Long|bottom,Long
T:Point|x,Long|y,Long
F:InitCommonControlsEx(ByVal As Const InitCommonControlsEx Ptr) As WINBOOL
T:COLORSCHEME|dwSize,DWORD|clrBtnHighlight,COLORREF|clrBtnShadow,COLORREF
F:HANDLE_WM_NOTIFY(hwnd, wParam, lParam, fn)
F:FORWARD_WM_NOTIFY(hwnd, idFrom, pnmhdr, fn)
T:NMTOOLTIPSCREATED|hdr,NMHDR|hwndToolTips,HWnd
T:NMCLICK|hdr,NMHDR|dwItemSpec,DWORD_PTR|dwItemData,DWORD_PTR|pt,Point|dwHitInfo,LPARAM
T:NMOBJECTNOTIFY|hdr,NMHDR|iItem,Long|piid,Const IID Ptr|pObject,Any Ptr|hResult, HRESULT|dwFlags,DWORD
T:NMKEY|hdr,NMHDR|nVKey,UINT|uFlags,UINT
T:NMCHAR|hdr,NMHDR|ch,UINT|dwItemPrev,DWORD|dwItemNext,DWORD
T:NMCUSTOMTEXT|hdr,NMHDR|hDC,HDC|lpString,LPCWSTR|nCount,Long|lpRect,LPRECT|uFormat,UINT|fLink,WINBOOL
T:NMCUSTOMDRAW|hdr,NMHDR|dwDrawStage,DWORD|hdc,HDC|rc,Rect|dwItemSpec,DWORD_PTR|uItemState,UINT|lItemlParam,LPARAM
T:NMTTCUSTOMDRAW|nmcd,NMCUSTOMDRAW|uDrawFlags,UINT
T:NMCUSTOMSPLITRECTINFO|hdr,NMHDR|rcClient,Rect|rcButton,Rect|rcSplit,Rect
T:IMAGELISTDRAWPARAMS|cbSize,DWORD|himl,HIMAGELIST|i,Long|hdcDst,HDC|x,Long|y,Long|cx,Long|cy,Long|xBitmap,Long|yBitmap,Long|rgbBk,COLORREF|rgbFg,COLORREF|fStyle,UINT|dwRop,DWORD|fState,DWORD|Frame,DWORD|crEffect,COLORREF
F:ImageList_Create(byval cx as long, byval cy as long, byval flags as UINT, byval cInitial as long, byval cGrow as long) as HIMAGELIST
F:ImageList_Destroy(byval himl as HIMAGELIST) as WINBOOL
F:ImageList_GetImageCount(byval himl as HIMAGELIST) as long
F:ImageList_SetImageCount(byval himl as HIMAGELIST, byval uNewCount as UINT) as WINBOOL
F:ImageList_Add(byval himl as HIMAGELIST, byval hbmImage as HBITMAP, byval hbmMask as HBITMAP) as long
F:ImageList_ReplaceIcon(byval himl as HIMAGELIST, byval i as long, byval hicon as HICON) as long
F:ImageList_SetBkColor(byval himl as HIMAGELIST, byval clrBk as COLORREF) as COLORREF
F:ImageList_GetBkColor(byval himl as HIMAGELIST) as COLORREF
F:ImageList_SetOverlayImage(byval himl as HIMAGELIST, byval iImage as long, byval iOverlay as long) as WINBOOL
F:ImageList_AddIcon(himl, hicon) 
F:ImageList_ReplaceIcon(himl, -1, hicon)
F:ImageList_Draw(byval himl as HIMAGELIST, byval i as long, byval hdcDst as HDC, byval x as long, byval y as long, byval fStyle as UINT) as WINBOOL
F:ImageList_Replace(byval himl as HIMAGELIST, byval i as long, byval hbmImage as HBITMAP, byval hbmMask as HBITMAP) as WINBOOL
F:ImageList_AddMasked(byval himl as HIMAGELIST, byval hbmImage as HBITMAP, byval crMask as COLORREF) as long
F:ImageList_DrawEx(byval himl as HIMAGELIST, byval i as long, byval hdcDst as HDC, byval x as long, byval y as long, byval dx as long, byval dy as long, byval rgbBk as COLORREF, byval rgbFg as COLORREF, byval fStyle as UINT) as WINBOOL
F:ImageList_DrawIndirect(byval pimldp as IMAGELISTDRAWPARAMS ptr) as WINBOOL
F:ImageList_Remove(byval himl as HIMAGELIST, byval i as long) as WINBOOL
F:ImageList_GetIcon(byval himl as HIMAGELIST, byval i as long, byval flags as UINT) as HICON
F:ImageList_LoadImage(byval hi as HINSTANCE, byval lpbmp as LPCWSTR, byval cx as long, byval cGrow as long, byval crMask as COLORREF, byval uType as UINT, byval uFlags as UINT) as HIMAGELIST
F:ImageList_Copy(byval himlDst as HIMAGELIST, byval iDst as long, byval himlSrc as HIMAGELIST, byval iSrc as long, byval uFlags as UINT) as WINBOOL
F:ImageList_BeginDrag(byval himlTrack as HIMAGELIST, byval iTrack as long, byval dxHotspot as long, byval dyHotspot as long) as WINBOOL
F:ImageList_DragEnter(byval hwndLock as HWND, byval x as long, byval y as long) as WINBOOL
F:ImageList_DragLeave(byval hwndLock as HWND) as WINBOOL
F:ImageList_DragMove(byval x as long, byval y as long) as WINBOOL
F:ImageList_SetDragCursorImage(byval himlDrag as HIMAGELIST, byval iDrag as long, byval dxHotspot as long, byval dyHotspot as long) as WINBOOL
F:ImageList_DragShowNolock(byval fShow as WINBOOL) as WINBOOL
F:ImageList_GetDragImage(byval ppt as POINT ptr, byval pptHotspot as POINT ptr) as HIMAGELIST
F:ImageList_RemoveAll(himl)
F:ImageList_Remove(himl, -1)
F:ImageList_ExtractIcon(hi, himl, i)
F:ImageList_GetIcon(himl, i, 0)
F:ImageList_LoadBitmap(hi, lpbmp, cx, cGrow, crMask)
F:ImageList_LoadImage(hi, lpbmp, cx, cGrow, crMask, IMAGE_BITMAP, 0)
F:ImageList_Read(byval pstm as LPSTREAM) as HIMAGELIST
F:ImageList_Write(byval himl as HIMAGELIST, byval pstm as LPSTREAM) as WINBOOL
F:ImageList_ReadEx(byval dwFlags as DWORD, byval pstm as LPSTREAM, byval riid as const IID const ptr, byval ppv as PVOID ptr) as HRESULT
F:ImageList_WriteEx(byval himl as HIMAGELIST, byval dwFlags as DWORD, byval pstm as LPSTREAM) as HRESULT
T:IMAGEINFO|hbmImage,HBITMAP|hbmMask,HBITMAP|Unused1,Long|Unused2,Long|rcImage,Rect
F:ImageList_GetIconSize(ByVal himl as HIMAGELIST, ByVal cx as Long Ptr, ByVal cy as Long Ptr) As WINBOOL
F:ImageList_SetIconSize(ByVal himl as HIMAGELIST, ByVal cx As Long, ByVal cy As Long) As WINBOOL
F:ImageList_GetImageInfo(ByVal himl as HIMAGELIST, ByVal i As Long, ByVal pImageInfo As IMAGEINFO Ptr) As WINBOOL
F:ImageList_Merge(byval himl1 as HIMAGELIST, byval i1 as long, byval himl2 as HIMAGELIST, byval i2 as long, byval dx as long, byval dy as long) as HIMAGELIST
F:ImageList_Duplicate(byval himl as HIMAGELIST) as HIMAGELIST
F:HIMAGELIST_QueryInterface(byval himl as HIMAGELIST, byval riid as const IID const ptr, byval ppv as any ptr ptr) as HRESULT
F:DrawStatusText(ByVal hDC As HDC, ByVal lprc As LPCRECT, ByVal pszText As LPCWSTR, ByVal uFlags As UINT)
F:CreateStatusWindowW(ByVal Style As Long, ByVal lpszText As LPCWSTR, ByVal hwndParent As HWnd, ByVal wID As UINT) As HWnd
T:LVITEM|mask,UINT|iItem,Long|iSubItem,Long|state,UINT|stateMask,UINT|pszText,LPWSTR|cchTextMax,Long|iImage,Long|lParam,LPARAM|iIndent,Long|iGroupId,Long|cColumns,UINT|puColumns,PUINT|piColFmt,Long Ptr|iGroup,Long
T:LVFINDINFO|flags,UINT|psz,LPCWSTR|lParam,LPARAM|pt,Point|vkDirection, UINT
T:LVHITTESTINFO|pt,Point|flags,UINT|iItem,Long|iSubItem,Long|iGroup,Long
T:tagLVCOLUMNW|mask,UINT|fmt,Long|cx,Long|pszText,LPWSTR|cchTextMax,Long|iSubItem,Long|iImage,Long|iOrder,Long|cxMin,Long|cxDefault,Long|cxIdeal,Long
T:NMLISTVIEW|hdr,NMHDR|iItem,Long|iSubItem,Long|uNewState,UINT|uOldState,UINT|uChanged,UINT|ptAction,Point|lParam,LPARAM
T:NMLVCUSTOMDRAW|nmcd,NMCUSTOMDRAW|clrText,COLORREF|clrTextBk,COLORREF|iSubItem,Long|dwItemType,DWORD|clrFace,COLORREF|iIconEffect,Long|iIconPhase,Long|iPartId,Long|iStateId,Long|rcText,Rect|uAlign,UINT
T:NMLVFINDITEMW|hdr,NMHDR|iStart,Long|lvfi,LVFINDINFOW
T:LVDISPINFO|hdr,NMHDR|item,LVITEMW
T:LVKEYDOWN|hdr,NMHDR|wVKey,WORD|flags,UINT
T:NMLVGETINFOTIP|hdr,NMHDR|dwFlags,DWORD|pszText,LPWSTR|cchTextMax,Long|iItem,Long|iSubItem,Long|lParam,LPARAM
T:TVITEM|mask,UINT|hItem,HTREEITEM|state,UINT|stateMask,UINT|pszText,LPWSTR|cchTextMax,Long|iImage,Long|iSelectedImage,Long|cChildren,Long|lParam,LPARAM
T:TVITEMEX|mask,UINT|hItem,HTREEITEM|state As UINT|stateMask,UINT|pszText,LPWSTR|cchTextMax,Long|iImage,Long|iSelectedImage,Long|cChildren,Long|lParam,LPARAM|iIntegral,Long|uStateEx,UINT|	HWnd,HWnd|iExpandedImage,Long|iReserved,Long
T:NMTREEVIEW|hdr,NMHDR|action,UINT|itemOld,TVITEMW|itemNew,TVITEMW|ptDrag,Point|
T:TVDISPINFO|hdr,NMHDR|item,TVITEMW
T:TVKEYDOWN|hdr,NMHDR|wVKey,WORD|flags,UINT|
T:NMTVCUSTOMDRAW|nmcd,NMCUSTOMDRAW|clrText,COLORREF|clrTextBk,COLORREF|iLevel,Long
T:NMTVGETINFOTIP|hdr,NMHDR|pszText,LPWSTR|cchTextMax,Long|hItem,HTREEITEM|lParam,LPARAM
T:TVITEMCHANGE|hdr,NMHDR|uChanged,UINT|hItem,HTREEITEM|uStateNew,UINT|uStateOld,UINT|lParam,LPARAM
T:TCITEMHEADER|mask,UINT|lpReserved1,UINT|lpReserved2,UINT|pszText,LPWSTR|cchTextMax,Long|iImage,Long
T:TCITEM|mask,UINT|dwState,DWORD|dwStateMask,DWORD|pszText,LPWSTR|cchTextMax,Long|iImage,Long|lParam,LPARAM
T:TCKEYDOWN|hdr,NMHDR|wVKey,WORD|flags,UINT
T:DATETIMEPICKERINFO|cbSize,DWORD|rcCheck,Rect|stateCheck,DWORD|rcButton,Rect|stateButton,DWORD|hwndEdit,HWnd|hwndUD,HWnd|hwndDropDown,HWnd
T:NMDATETIMECHANGE|nmhdr,NMHDR|dwFlags,DWORD|st,SYSTEMTIME
T:NMDATETIMESTRING|nmhdr,NMHDR|pszUserString,LPCWSTR|st,SYSTEMTIME|dwFlags,DWORD
T:NMDATETIMEWMKEYDOWN|nmhdr,NMHDR|nVirtKey,Long|pszFormat,LPCWSTR|st,SYSTEMTIME
T:NMDATETIMEFORMAT|nmhdr,NMHDR|pszFormat,LPCWSTR|st,SYSTEMTIME|pszDisplay,LPCWSTR|szDisplay,WString
T:_SYSTEMTIME|wYear,WORD|wMonth,WORD|wDayOfWeek,WORD|wDay,WORD|wHour,WORD|wMinute,WORD|wSecond,WORD|wMilliseconds,WORD
T:_WIN32_FILE_ATTRIBUTE_DATA|dwFileAttributes,DWORD|ftCreationTime,FILETIME|ftLastAccessTime,FILETIME|ftLastWriteTime,FILETIME|nFileSizeHigh,DWORD|nFileSizeLow,DWORD
T:_WIN32_FIND_DATA|dwFileAttributes,DWORD|ftCreationTime,FILETIME|ftLastAccessTime,FILETIME|ftLastWriteTime,FILETIME|nFileSizeHigh,DWORD|nFileSizeLow,DWORD|dwReserved0,DWORD|dwReserved1,DWORD|cFileName,WString * 260|cAlternateFileName,WString * 14
F:CompareFileTime(ByVal lpFileTime1 As Const FILETIME Ptr, ByVal lpFileTime2 As Const FILETIME Ptr) As Long
F:CreateFile(ByVal lpFileName As LPCWSTR, ByVal dwDesiredAccess As DWORD, ByVal dwShareMode As DWORD, ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES, ByVal dwCreationDisposition As DWORD, ByVal dwFlagsAndAttributes As DWORD, ByVal hTemplateFile As HANDLE) As HANDLE
F:DefineDosDevice(ByVal dwFlags As DWORD, ByVal lpDeviceName As LPCWSTR, ByVal lpTargetPath As LPCWSTR) As WINBOOL
F:DeleteVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCWSTR) As WINBOOL
F:FileTimeToLocalFileTime(ByVal lpFileTime As Const FILETIME Ptr, ByVal lpLocalFileTime As LPFILETIME) As WINBOOL
F:FindCloseChangeNotification(ByVal hChangeHandle As HANDLE) As WINBOOL
F:FindFirstChangeNotification(ByVal lpPathName As LPCWSTR, ByVal bWatchSubtree As WINBOOL, ByVal dwNotifyFilter As DWORD) As HANDLE
F:FindFirstFile(ByVal lpFileName As LPCWSTR, ByVal lpFindFileData As LPWIN32_FIND_DATA) As HANDLE
F:FindFirstVolume(ByVal lpszVolumeName As LPWSTR, ByVal cchBufferLength As DWORD) As HANDLE
F:FindNextChangeNotification(ByVal hChangeHandle As HANDLE) As WINBOOL
F:FindNextVolume(ByVal hFindVolume As HANDLE, ByVal lpszVolumeName As LPWSTR, ByVal cchBufferLength As DWORD) As WINBOOL
F:FindVolumeClose(ByVal hFindVolume As HANDLE) As WINBOOL
F:GetDiskFreeSpace(ByVal lpRootPathName As LPCWSTR, ByVal lpSectorsPerCluster As LPDWORD, ByVal lpBytesPerSector As LPDWORD, ByVal lpNumberOfFreeClusters As LPDWORD, ByVal lpTotalNumberOfClusters As LPDWORD) As WINBOOL
F:GetDriveType(ByVal lpRootPathName As LPCWSTR) As UINT
F:GetFileAttributes(ByVal lpFileName As LPCWSTR) As DWORD
F:GetFileInformationByHandle(ByVal hFile As HANDLE, ByVal lpFileInformation As LPBY_HANDLE_FILE_INFORMATION) As WINBOOL
F:GetFileSize(ByVal hFile As HANDLE, ByVal lpFileSizeHigh As LPDWORD) As DWORD
F:GetFileSizeEx(ByVal hFile As HANDLE, ByVal lpFileSize As PLARGE_INTEGER) As WINBOOL
F:GetFileTime(ByVal hFile As HANDLE, ByVal lpCreationTime As LPFILETIME, ByVal lpLastAccessTime As LPFILETIME, ByVal lpLastWriteTime As LPFILETIME) As WINBOOL
F:GetFileType(ByVal hFile As HANDLE) As DWORD
F:GetFullPathName(ByVal lpFileName As LPCWSTR, ByVal nBufferLength As DWORD, ByVal lpBuffer As LPWSTR, ByVal lpFilePart As LPWSTR Ptr) As DWORD
F:GetLogicalDrives() As DWORD
F:GetLogicalDriveStrings(ByVal nBufferLength As DWORD, ByVal lpBuffer As LPWSTR) As DWORD
F:GetLongPathName(ByVal lpszShortPath As LPCWSTR, ByVal lpszLongPath As LPWSTR, ByVal cchBuffer As DWORD) As DWORD
F:GetShortPathName(ByVal lpszLongPath As LPCWSTR, ByVal lpszShortPath As LPWSTR, ByVal cchBuffer As DWORD) As DWORD
F:GetTempFileName(ByVal lpPathName As LPCWSTR, ByVal lpPrefixString As LPCWSTR, ByVal uUnique As UINT, ByVal lpTempFileName As LPWSTR) As UINT
F:GetVolumeInformation(ByVal lpRootPathName As LPCWSTR, ByVal lpVolumeNameBuffer As LPWSTR, ByVal nVolumeNameSize As DWORD, ByVal lpVolumeSerialNumber As LPDWORD, ByVal lpMaximumComponentLength As LPDWORD, ByVal lpFileSystemFlags As LPDWORD, ByVal lpFileSystemNameBuffer As LPWSTR, ByVal nFileSystemNameSize As DWORD) As WINBOOL
F:GetVolumePathName(ByVal lpszFileName As LPCWSTR, ByVal lpszVolumePathName As LPWSTR, ByVal cchBufferLength As DWORD) As WINBOOL
F:LocalFileTimeToFileTime(ByVal lpLocalFileTime As Const FILETIME Ptr, ByVal lpFileTime As LPFILETIME) As WINBOOL
F:LockFile(ByVal hFile As HANDLE, ByVal dwFileOffsetLow As DWORD, ByVal dwFileOffsetHigh As DWORD, ByVal nNumberOfBytesToLockLow As DWORD, ByVal nNumberOfBytesToLockHigh As DWORD) As WINBOOL
F:QueryDosDevice(ByVal lpDeviceName As LPCWSTR, ByVal lpTargetPath As LPWSTR, ByVal ucchMax As DWORD) As DWORD
F:ReadFileEx(ByVal hFile As HANDLE, ByVal lpBuffer As LPVOID, ByVal nNumberOfBytesToRead As DWORD, ByVal lpOverlapped As LPOVERLAPPED, ByVal lpCompletionRoutine As LPOVERLAPPED_COMPLETION_ROUTINE) As WINBOOL
F:ReadFileScatter(ByVal hFile As HANDLE, ByVal aSegmentArray As FILE_SEGMENT_ELEMENT Ptr, ByVal nNumberOfBytesToRead As DWORD, ByVal lpReserved As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:SetFilePointer(ByVal hFile As HANDLE, ByVal lDistanceToMove As Long, ByVal lpDistanceToMoveHigh As PLONG, ByVal dwMoveMethod As DWORD) As DWORD
F:SetFileTime(ByVal hFile As HANDLE, ByVal lpCreationTime As Const FILETIME Ptr, ByVal lpLastAccessTime As Const FILETIME Ptr, ByVal lpLastWriteTime As Const FILETIME Ptr) As WINBOOL
F:SetFileValidData(ByVal hFile As HANDLE, ByVal ValidDataLength As LONGLONG) As WINBOOL
F:UnlockFile(ByVal hFile As HANDLE, ByVal dwFileOffsetLow As DWORD, ByVal dwFileOffsetHigh As DWORD, ByVal nNumberOfBytesToUnlockLow As DWORD, ByVal nNumberOfBytesToUnlockHigh As DWORD) As WINBOOL
F:WriteFileEx(ByVal hFile As HANDLE, ByVal lpBuffer As LPCVOID, ByVal nNumberOfBytesToWrite As DWORD, ByVal lpOverlapped As LPOVERLAPPED, ByVal lpCompletionRoutine As LPOVERLAPPED_COMPLETION_ROUTINE) As WINBOOL
F:WriteFileGather(ByVal hFile As HANDLE, ByVal aSegmentArray As FILE_SEGMENT_ELEMENT Ptr, ByVal nNumberOfBytesToWrite As DWORD, ByVal lpReserved As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:GetTempPath(ByVal nBufferLength As DWORD, ByVal lpBuffer As LPWSTR) As DWORD
F:GetVolumeNameForVolumeMountPoint(ByVal lpszVolumeMountPoint As LPCWSTR, ByVal lpszVolumeName As LPWSTR, ByVal cchBufferLength As DWORD) As WINBOOL
F:GetVolumePathNamesForVolumeName(ByVal lpszVolumeName As LPCWSTR, ByVal lpszVolumePathNames As LPWCH, ByVal cchBufferLength As DWORD, ByVal lpcchReturnLength As PDWORD) As WINBOOL
F:CreateDirectory(ByVal lpPathName As LPCWSTR, ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As WINBOOL
F:DeleteFile(ByVal lpFileName As LPCWSTR) As WINBOOL
F:FindClose(ByVal hFindFile As HANDLE) As WINBOOL
F:FindFirstFileEx(ByVal lpFileName As LPCWSTR, ByVal fInfoLevelId As FINDEX_INFO_LEVELS, ByVal lpFindFileData As LPVOID, ByVal fSearchOp As FINDEX_SEARCH_OPS, ByVal lpSearchFilter As LPVOID, ByVal dwAdditionalFlags As DWORD) As HANDLE
F:FindNextFile(ByVal hFindFile As HANDLE, ByVal lpFindFileData As LPWIN32_FIND_DATA) As WINBOOL
F:FlushFileBuffers(ByVal hFile As HANDLE) As WINBOOL
F:GetDiskFreeSpaceEx(ByVal lpDirectoryName As LPCWSTR, ByVal lpFreeBytesAvailableToCaller As PULARGE_INTEGER, ByVal lpTotalNumberOfBytes As PULARGE_INTEGER, ByVal lpTotalNumberOfFreeBytes As PULARGE_INTEGER) As WINBOOL
F:GetFileAttributesEx(ByVal lpFileName As LPCWSTR, ByVal fInfoLevelId As GET_FILEEX_INFO_LEVELS, ByVal lpFileInformation As LPVOID) As WINBOOL
F:LockFileEx(ByVal hFile As HANDLE, ByVal dwFlags As DWORD, ByVal dwReserved As DWORD, ByVal nNumberOfBytesToLockLow As DWORD, ByVal nNumberOfBytesToLockHigh As DWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:ReadFile(ByVal hFile As HANDLE, ByVal lpBuffer As LPVOID, ByVal nNumberOfBytesToRead As DWORD, ByVal lpNumberOfBytesRead As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:RemoveDirectory(ByVal lpPathName As LPCWSTR) As WINBOOL
F:SetEndOfFile(ByVal hFile As HANDLE) As WINBOOL
F:SetFileAttributes(ByVal lpFileName As LPCWSTR, ByVal dwFileAttributes As DWORD) As WINBOOL
F:SetFilePointerEx(ByVal hFile As HANDLE, ByVal liDistanceToMove As LARGE_INTEGER, ByVal lpNewFilePointer As PLARGE_INTEGER, ByVal dwMoveMethod As DWORD) As WINBOOL
F:UnlockFileEx(ByVal hFile As HANDLE, ByVal dwReserved As DWORD, ByVal nNumberOfBytesToUnlockLow As DWORD, ByVal nNumberOfBytesToUnlockHigh As DWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:WriteFile(ByVal hFile As HANDLE, ByVal lpBuffer As LPCVOID, ByVal nNumberOfBytesToWrite As DWORD, ByVal lpNumberOfBytesWritten As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:CloseHandle(ByVal hObject As HANDLE) As WINBOOL
F:DuplicateHandle(ByVal hSourceProcessHandle As HANDLE, ByVal hSourceHandle As HANDLE, ByVal hTargetProcessHandle As HANDLE, ByVal lpTargetHandle As LPHANDLE, ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal dwOptions As DWORD) As WINBOOL
F:GetHandleInformation(ByVal hObject As HANDLE, ByVal lpdwFlags As LPDWORD) As WINBOOL
F:SetHandleInformation(ByVal hObject As HANDLE, ByVal dwMask As DWORD, ByVal dwFlags As DWORD) As WINBOOL
F:HeapCreate(ByVal flOptions As DWORD, ByVal dwInitialSize As SIZE_T_, ByVal dwMaximumSize As SIZE_T_) As HANDLE
F:HeapDestroy(ByVal hHeap As HANDLE) As WINBOOL
F:HeapValidate(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal lpMem As LPCVOID) As WINBOOL
F:HeapCompact(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD) As SIZE_T_
F:HeapSummary(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal lpSummary As LPHEAP_SUMMARY) As WINBOOL
F:GetProcessHeaps(ByVal NumberOfHeaps As DWORD, ByVal ProcessHeaps As PHANDLE) As DWORD
F:HeapLock(ByVal hHeap As HANDLE) As WINBOOL
F:HeapUnlock(ByVal hHeap As HANDLE) As WINBOOL
F:HeapWalk(ByVal hHeap As HANDLE, ByVal lpEntry As LPPROCESS_HEAP_ENTRY) As WINBOOL
F:HeapSetInformation(ByVal HeapHandle As HANDLE, ByVal HeapInformationClass As HEAP_INFORMATION_CLASS, ByVal HeapInformation As PVOID, ByVal HeapInformationLength As SIZE_T_) As WINBOOL
F:HeapQueryInformation(ByVal HeapHandle As HANDLE, ByVal HeapInformationClass As HEAP_INFORMATION_CLASS, ByVal HeapInformation As PVOID, ByVal HeapInformationLength As SIZE_T_, ByVal ReturnLength As PSIZE_T) As WINBOOL
F:HeapAlloc(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal dwBytes As SIZE_T_) As LPVOID
F:HeapReAlloc(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal lpMem As LPVOID, ByVal dwBytes As SIZE_T_) As LPVOID
F:HeapFree(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal lpMem As LPVOID) As WINBOOL
F:HeapSize(ByVal hHeap As HANDLE, ByVal dwFlags As DWORD, ByVal lpMem As LPCVOID) As SIZE_T_
F:GetProcessHeap() As HANDLE
F:GetOverlappedResult(ByVal hFile As HANDLE, ByVal lpOverlapped As LPOVERLAPPED, ByVal lpNumberOfBytesTransferred As LPDWORD, ByVal bWait As WINBOOL) As WINBOOL
F:CreateIoCompletionPort(ByVal FileHandle As HANDLE, ByVal ExistingCompletionPort As HANDLE, ByVal CompletionKey As ULONG_PTR, ByVal NumberOfConcurrentThreads As DWORD) As HANDLE
F:GetQueuedCompletionStatus(ByVal CompletionPort As HANDLE, ByVal lpNumberOfBytesTransferred As LPDWORD, ByVal lpCompletionKey As PULONG_PTR, ByVal lpOverlapped As LPOVERLAPPED Ptr, ByVal dwMilliseconds As DWORD) As WINBOOL
F:PostQueuedCompletionStatus(ByVal CompletionPort As HANDLE, ByVal dwNumberOfBytesTransferred As DWORD, ByVal dwCompletionKey As ULONG_PTR, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:DeviceIoControl(ByVal hDevice As HANDLE, ByVal dwIoControlCode As DWORD, ByVal lpInBuffer As LPVOID, ByVal nInBufferSize As DWORD, ByVal lpOutBuffer As LPVOID, ByVal nOutBufferSize As DWORD, ByVal lpBytesReturned As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:CancelIo(ByVal hFile As HANDLE) As WINBOOL
F:FindResourceEx(ByVal hModule As HMODULE, ByVal lpType As LPCWSTR, ByVal lpName As LPCWSTR, ByVal wLanguage As WORD) As HRSRC
F:FreeLibraryAndExitThread(ByVal hLibModule As HMODULE, ByVal dwExitCode As DWORD)
F:FreeResource(ByVal hResData As HGLOBAL) As WINBOOL
F:GetModuleFileName(ByVal hModule As HMODULE, ByVal lpFilename As LPWSTR, ByVal nSize As DWORD) As DWORD
F:GetModuleHandle(ByVal lpModuleName As LPCWSTR) As HMODULE
F:LoadLibraryEx(ByVal lpLibFileName As LPCWSTR, ByVal hFile As HANDLE, ByVal dwFlags As DWORD) As HMODULE
F:LoadResource(ByVal hModule As HMODULE, ByVal hResInfo As HRSRC) As HGLOBAL
F:LoadString(ByVal hInstance As HINSTANCE, ByVal uID As UINT, ByVal lpBuffer As LPWSTR, ByVal cchBufferMax As Long) As Long
F:LockResource(ByVal hResData As HGLOBAL) As LPVOID
F:SizeofResource(ByVal hModule As HMODULE, ByVal hResInfo As HRSRC) As DWORD
F:AddDllDirectory(ByVal NewDirectory As PCWSTR) As DLL_DIRECTORY_COOKIE
F:RemoveDllDirectory(ByVal Cookie As DLL_DIRECTORY_COOKIE) As WINBOOL
F:SetDefaultDllDirectories(ByVal DirectoryFlags As DWORD) As WINBOOL
F:GetModuleHandleEx(ByVal dwFlags As DWORD, ByVal lpModuleName As LPCWSTR, ByVal phModule As HMODULE Ptr) As WINBOOL
F:EnumResourceLanguagesEx(ByVal hModule As HMODULE, ByVal lpType As LPCWSTR, ByVal lpName As LPCWSTR, ByVal lpEnumFunc As ENUMRESLANGPROCW, ByVal lParam As LONG_PTR, ByVal dwFlags As DWORD, ByVal LangId As LANGID) As WINBOOL
F:EnumResourceNamesEx(ByVal hModule As HMODULE, ByVal lpType As LPCWSTR, ByVal lpEnumFunc As ENUMRESNAMEPROCW, ByVal lParam As LONG_PTR, ByVal dwFlags As DWORD, ByVal LangId As LANGID) As WINBOOL
F:EnumResourceTypesEx(ByVal hModule As HMODULE, ByVal lpEnumFunc As ENUMRESTYPEPROCW, ByVal lParam As LONG_PTR, ByVal dwFlags As DWORD, ByVal LangId As LANGID) As WINBOOL
F:QueryOptionalDelayLoadedAPI(ByVal CallerModule As HMODULE, ByVal lpDllName As LPCSTR, ByVal lpProcName As LPCSTR, ByVal Reserved As DWORD) As WINBOOL
F:DisableThreadLibraryCalls(ByVal hLibModule As HMODULE) As WINBOOL
F:FreeLibrary(ByVal hLibModule As HMODULE) As WINBOOL
F:GetProcAddress(ByVal hModule As HMODULE, ByVal lpProcName As LPCSTR) As FARPROC
F:VirtualQuery(ByVal lpAddress As LPCVOID, ByVal lpBuffer As PMEMORY_BASIC_INFORMATION, ByVal dwLength As SIZE_T_) As SIZE_T_
F:FlushViewOfFile(ByVal lpBaseAddress As LPCVOID, ByVal dwNumberOfBytesToFlush As SIZE_T_) As WINBOOL
F:UnmapViewOfFile(ByVal lpBaseAddress As LPCVOID) As WINBOOL
F:CreateFileMappingFromApp(ByVal hFile As HANDLE, ByVal SecurityAttributes As PSECURITY_ATTRIBUTES, ByVal PageProtection As ULONG, ByVal MaximumSize As ULONG64, ByVal Name As PCWSTR) As HANDLE
F:MapViewOfFileFromApp(ByVal hFileMappingObject As HANDLE, ByVal DesiredAccess As ULONG, ByVal FileOffset As ULONG64, ByVal NumberOfBytesToMap As SIZE_T_) As PVOID
F:VirtualAlloc(ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal flAllocationType As DWORD, ByVal flProtect As DWORD) As LPVOID
F:VirtualFree(ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal dwFreeType As DWORD) As WINBOOL
F:VirtualProtect(ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal flNewProtect As DWORD, ByVal lpflOldProtect As PDWORD) As WINBOOL
F:VirtualAllocEx(ByVal hProcess As HANDLE, ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal flAllocationType As DWORD, ByVal flProtect As DWORD) As LPVOID
F:VirtualFreeEx(ByVal hProcess As HANDLE, ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal dwFreeType As DWORD) As WINBOOL
F:VirtualProtectEx(ByVal hProcess As HANDLE, ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_, ByVal flNewProtect As DWORD, ByVal lpflOldProtect As PDWORD) As WINBOOL
F:VirtualQueryEx(ByVal hProcess As HANDLE, ByVal lpAddress As LPCVOID, ByVal lpBuffer As PMEMORY_BASIC_INFORMATION, ByVal dwLength As SIZE_T_) As SIZE_T_
F:ReadProcessMemory(ByVal hProcess As HANDLE, ByVal lpBaseAddress As LPCVOID, ByVal lpBuffer As LPVOID, ByVal nSize As SIZE_T_, ByVal lpNumberOfBytesRead As SIZE_T_ Ptr) As WINBOOL
F:WriteProcessMemory(ByVal hProcess As HANDLE, ByVal lpBaseAddress As LPVOID, ByVal lpBuffer As LPCVOID, ByVal nSize As SIZE_T_, ByVal lpNumberOfBytesWritten As SIZE_T_ Ptr) As WINBOOL
F:CreateFileMapping(ByVal hFile As HANDLE, ByVal lpFileMappingAttributes As LPSECURITY_ATTRIBUTES, ByVal flProtect As DWORD, ByVal dwMaximumSizeHigh As DWORD, ByVal dwMaximumSizeLow As DWORD, ByVal lpName As LPCWSTR) As HANDLE
F:OpenFileMapping(ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:MapViewOfFile(ByVal hFileMappingObject As HANDLE, ByVal dwDesiredAccess As DWORD, ByVal dwFileOffsetHigh As DWORD, ByVal dwFileOffsetLow As DWORD, ByVal dwNumberOfBytesToMap As SIZE_T_) As LPVOID
F:MapViewOfFileEx(ByVal hFileMappingObject As HANDLE, ByVal dwDesiredAccess As DWORD, ByVal dwFileOffsetHigh As DWORD, ByVal dwFileOffsetLow As DWORD, ByVal dwNumberOfBytesToMap As SIZE_T_, ByVal lpBaseAddress As LPVOID) As LPVOID
F:GetLargePageMinimum() As SIZE_T_
F:GetProcessWorkingSetSizeEx(ByVal hProcess As HANDLE, ByVal lpMinimumWorkingSetSize As PSIZE_T, ByVal lpMaximumWorkingSetSize As PSIZE_T, ByVal Flags As PDWORD) As WINBOOL
F:SetProcessWorkingSetSizeEx(ByVal hProcess As HANDLE, ByVal dwMinimumWorkingSetSize As SIZE_T_, ByVal dwMaximumWorkingSetSize As SIZE_T_, ByVal Flags As DWORD) As WINBOOL
F:VirtualLock(ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_) As WINBOOL
F:VirtualUnlock(ByVal lpAddress As LPVOID, ByVal dwSize As SIZE_T_) As WINBOOL
F:GetWriteWatch(ByVal dwFlags As DWORD, ByVal lpBaseAddress As PVOID, ByVal dwRegionSize As SIZE_T_, ByVal lpAddresses As PVOID Ptr, ByVal lpdwCount As ULONG_PTR Ptr, ByVal lpdwGranularity As LPDWORD) As UINT
F:ResetWriteWatch(ByVal lpBaseAddress As LPVOID, ByVal dwRegionSize As SIZE_T_) As UINT
F:CreateMemoryResourceNotification(ByVal NotificationType As MEMORY_RESOURCE_NOTIFICATION_TYPE) As HANDLE
F:QueryMemoryResourceNotification(ByVal ResourceNotificationHandle As HANDLE, ByVal ResourceState As PBOOL) As WINBOOL
F:GetSystemFileCacheSize(ByVal lpMinimumFileCacheSize As PSIZE_T, ByVal lpMaximumFileCacheSize As PSIZE_T, ByVal lpFlags As PDWORD) As WINBOOL
F:SetSystemFileCacheSize(ByVal MinimumFileCacheSize As SIZE_T_, ByVal MaximumFileCacheSize As SIZE_T_, ByVal Flags As DWORD) As WINBOOL
F:PrefetchVirtualMemory(ByVal hProcess As HANDLE, ByVal NumberOfEntries As ULONG_PTR, ByVal VirtualAddresses As PWIN32_MEMORY_RANGE_ENTRY, ByVal Flags As ULONG) As WINBOOL
F:UnmapViewOfFileEx(ByVal BaseAddress As PVOID, ByVal UnmapFlags As ULONG) As WINBOOL
F:ImpersonateNamedPipeClient(ByVal hNamedPipe As HANDLE) As WINBOOL
F:CreatePipe(ByVal hReadPipe As PHANDLE, ByVal hWritePipe As PHANDLE, ByVal lpPipeAttributes As LPSECURITY_ATTRIBUTES, ByVal nSize As DWORD) As WINBOOL
F:ConnectNamedPipe(ByVal hNamedPipe As HANDLE, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:DisconnectNamedPipe(ByVal hNamedPipe As HANDLE) As WINBOOL
F:SetNamedPipeHandleState(ByVal hNamedPipe As HANDLE, ByVal lpMode As LPDWORD, ByVal lpMaxCollectionCount As LPDWORD, ByVal lpCollectDataTimeout As LPDWORD) As WINBOOL
F:PeekNamedPipe(ByVal hNamedPipe As HANDLE, ByVal lpBuffer As LPVOID, ByVal nBufferSize As DWORD, ByVal lpBytesRead As LPDWORD, ByVal lpTotalBytesAvail As LPDWORD, ByVal lpBytesLeftThisMessage As LPDWORD) As WINBOOL
F:TransactNamedPipe(ByVal hNamedPipe As HANDLE, ByVal lpInBuffer As LPVOID, ByVal nInBufferSize As DWORD, ByVal lpOutBuffer As LPVOID, ByVal nOutBufferSize As DWORD, ByVal lpBytesRead As LPDWORD, ByVal lpOverlapped As LPOVERLAPPED) As WINBOOL
F:CreateNamedPipe(ByVal lpName As LPCWSTR, ByVal dwOpenMode As DWORD, ByVal dwPipeMode As DWORD, ByVal nMaxInstances As DWORD, ByVal nOutBufferSize As DWORD, ByVal nInBufferSize As DWORD, ByVal nDefaultTimeOut As DWORD, ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
F:WaitNamedPipe(ByVal lpNamedPipeName As LPCWSTR, ByVal nTimeOut As DWORD) As WINBOOL
F:GetCommandLine() As LPWSTR
F:GetEnvironmentVariable(ByVal lpName As LPCWSTR, ByVal lpBuffer As LPWSTR, ByVal nSize As DWORD) As DWORD
F:SetEnvironmentVariable(ByVal lpName As LPCWSTR, ByVal lpValue As LPCWSTR) As WINBOOL
F:ExpandEnvironmentStrings(ByVal lpSrc As LPCWSTR, ByVal lpDst As LPWSTR, ByVal nSize As DWORD) As DWORD
F:SetCurrentDirectory(ByVal lpPathName As LPCWSTR) As WINBOOL
F:GetCurrentDirectory(ByVal nBufferLength As DWORD, ByVal lpBuffer As LPWSTR) As DWORD
F:SearchPath(ByVal lpPath As LPCWSTR, ByVal lpFileName As LPCWSTR, ByVal lpExtension As LPCWSTR, ByVal nBufferLength As DWORD, ByVal lpBuffer As LPWSTR, ByVal lpFilePart As LPWSTR Ptr) As DWORD
F:NeedCurrentDirectoryForExePath(ByVal ExeName As LPCWSTR) As WINBOOL
F:CreateProcess(ByVal lpApplicationName As LPCWSTR, ByVal lpCommandLine As LPWSTR, ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES, ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES, ByVal bInheritHandles As WINBOOL, ByVal dwCreationFlags As DWORD, ByVal lpEnvironment As LPVOID, ByVal lpCurrentDirectory As LPCWSTR, ByVal lpStartupInfo As LPSTARTUPINFOW, ByVal lpProcessInformation As LPPROCESS_INFORMATION) As WINBOOL
F:CreateProcessAsUser(ByVal hToken As HANDLE, ByVal lpApplicationName As LPCWSTR, ByVal lpCommandLine As LPWSTR, ByVal lpProcessAttributes As LPSECURITY_ATTRIBUTES, ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES, ByVal bInheritHandles As WINBOOL, ByVal dwCreationFlags As DWORD, ByVal lpEnvironment As LPVOID, ByVal lpCurrentDirectory As LPCWSTR, ByVal lpStartupInfo As LPSTARTUPINFOW, ByVal lpProcessInformation As LPPROCESS_INFORMATION) As WINBOOL
F:GetCurrentProcess() As HANDLE
F:GetCurrentProcessId() As DWORD
F:GetCurrentThread() As HANDLE
F:GetCurrentThreadId() As DWORD
F:IsProcessorFeaturePresent(ByVal ProcessorFeature As DWORD) As WINBOOL
F:ExitThread(ByVal dwExitCode As DWORD)
F:CreateThread(ByVal lpThreadAttributes As LPSECURITY_ATTRIBUTES, ByVal dwStackSize As SIZE_T_, ByVal lpStartAddress As LPTHREAD_START_ROUTINE, ByVal lpParameter As LPVOID, ByVal dwCreationFlags As DWORD, ByVal lpThreadId As LPDWORD) As HANDLE
F:SetThreadPriority(ByVal hThread As HANDLE, ByVal nPriority As Long) As WINBOOL
F:GetThreadPriority(ByVal hThread As HANDLE) As Long
F:GetExitCodeThread(ByVal hThread As HANDLE, ByVal lpExitCode As LPDWORD) As WINBOOL
F:SuspendThread(ByVal hThread As HANDLE) As DWORD
F:ResumeThread(ByVal hThread As HANDLE) As DWORD
F:TlsAlloc() As DWORD
F:TlsGetValue(ByVal dwTlsIndex As DWORD) As LPVOID
F:TlsSetValue(ByVal dwTlsIndex As DWORD, ByVal lpTlsValue As LPVOID) As WINBOOL
F:TlsFree(ByVal dwTlsIndex As DWORD) As WINBOOL
F:QueryPerformanceCounter(ByVal lpPerformanceCount As LARGE_INTEGER Ptr) As WINBOOL
F:QueryPerformanceFrequency(ByVal lpFrequency As LARGE_INTEGER Ptr) As WINBOOL
F:OpenMutex(ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:OpenSemaphore(ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:OpenEvent(ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:InitializeCriticalSection(ByVal lpCriticalSection As LPCRITICAL_SECTION)
F:InitializeCriticalSectionAndSpinCount(ByVal lpCriticalSection As LPCRITICAL_SECTION, ByVal dwSpinCount As DWORD) As WINBOOL
F:SetCriticalSectionSpinCount(ByVal lpCriticalSection As LPCRITICAL_SECTION, ByVal dwSpinCount As DWORD) As DWORD
F:WaitForSingleObject(ByVal hHandle As HANDLE, ByVal dwMilliseconds As DWORD) As DWORD
F:SleepEx(ByVal dwMilliseconds As DWORD, ByVal bAlertable As WINBOOL) As DWORD
F:CreateMutex(ByVal lpMutexAttributes As LPSECURITY_ATTRIBUTES, ByVal bInitialOwner As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:CreateEvent(ByVal lpEventAttributes As LPSECURITY_ATTRIBUTES, ByVal bManualReset As WINBOOL, ByVal bInitialState As WINBOOL, ByVal lpName As LPCWSTR) As HANDLE
F:SetWaitableTimer(ByVal hTimer As HANDLE, ByVal lpDueTime As Const LARGE_INTEGER Ptr, ByVal lPeriod As Long, ByVal pfnCompletionRoutine As PTIMERAPCROUTINE, ByVal lpArgToCompletionRoutine As LPVOID, ByVal fResume As WINBOOL) As WINBOOL
F:CancelWaitableTimer(ByVal hTimer As HANDLE) As WINBOOL
F:OpenWaitableTimer(ByVal dwDesiredAccess As DWORD, ByVal bInheritHandle As WINBOOL, ByVal lpTimerName As LPCWSTR) As HANDLE
F:EnterSynchronizationBarrier(ByVal lpBarrier As LPSYNCHRONIZATION_BARRIER, ByVal dwFlags As DWORD) As WINBOOL
F:InitializeSynchronizationBarrier(ByVal lpBarrier As LPSYNCHRONIZATION_BARRIER, ByVal lTotalThreads As Long, ByVal lSpinCount As Long) As WINBOOL
F:DeleteSynchronizationBarrier(ByVal lpBarrier As LPSYNCHRONIZATION_BARRIER) As WINBOOL

F:GetSystemInfo(ByVal lpSystemInfo As LPSYSTEM_INFO)
F:SignalObjectAndWait(ByVal hObjectToSignal As HANDLE, ByVal hObjectToWaitOn As HANDLE, ByVal dwMilliseconds As DWORD, ByVal bAlertable As WINBOOL) As DWORD
F:GlobalMemoryStatusEx(ByVal lpBuffer As LPMEMORYSTATUSEX) As WINBOOL
F:SetLocalTime(ByVal lpSystemTime As Const SYSTEMTIME Ptr) As WINBOOL
F:GetTickCount() As DWORD
F:GetSystemTimeAdjustment(ByVal lpTimeAdjustment As PDWORD, ByVal lpTimeIncrement As PDWORD, ByVal lpTimeAdjustmentDisabled As PBOOL) As WINBOOL
F:GetSystemDirectory(ByVal lpBuffer As LPWSTR, ByVal uSize As UINT) As UINT
F:GetWindowsDirectory(ByVal lpBuffer As LPWSTR, ByVal uSize As UINT) As UINT
F:GetSystemWindowsDirectory(ByVal lpBuffer As LPWSTR, ByVal uSize As UINT) As UINT
F:GetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT, ByVal lpBuffer As LPWSTR, ByVal nSize As LPDWORD) As WINBOOL
F:SetComputerNameEx(ByVal NameType As COMPUTER_NAME_FORMAT, ByVal lpBuffer As LPCWSTR) As WINBOOL
F:SetSystemTime(ByVal lpSystemTime As Const SYSTEMTIME Ptr) As WINBOOL
F:GetVersionEx(ByVal lpVersionInformation As LPOSVERSIONINFOW) As WINBOOL
F:GetLogicalProcessorInformation(ByVal Buffer As PSYSTEM_LOGICAL_PROCESSOR_INFORMATION, ByVal ReturnedLength As PDWORD) As WINBOOL
F:GetSystemTimePreciseAsFileTime(ByVal lpSystemTimeAsFileTime As LPFILETIME)
F:EnumSystemFirmwareTables(ByVal FirmwareTableProviderSignature As DWORD, ByVal pFirmwareTableEnumBuffer As PVOID, ByVal BufferSize As DWORD) As UINT
F:GetSystemFirmwareTable(ByVal FirmwareTableProviderSignature As DWORD, ByVal FirmwareTableID As DWORD, ByVal pFirmwareTableBuffer As PVOID, ByVal BufferSize As DWORD) As UINT
F:GlobalAlloc(ByVal uFlags As UINT, ByVal dwBytes As SIZE_T_) As HGLOBAL
F:GlobalReAlloc(ByVal hMem As HGLOBAL, ByVal dwBytes As SIZE_T_, ByVal uFlags As UINT) As HGLOBAL
F:GlobalSize(ByVal hMem As HGLOBAL) As SIZE_T_
F:GlobalFlags(ByVal hMem As HGLOBAL) As UINT
F:GlobalLock(ByVal hMem As HGLOBAL) As LPVOID
F:GlobalHandle(ByVal pMem As LPCVOID) As HGLOBAL
F:GlobalUnlock(ByVal hMem As HGLOBAL) As WINBOOL
F:GlobalFree(ByVal hMem As HGLOBAL) As HGLOBAL
F:GlobalCompact(ByVal dwMinFree As DWORD) As SIZE_T_
F:GlobalFix(ByVal hMem As HGLOBAL)
F:GlobalUnfix(ByVal hMem As HGLOBAL)
F:GlobalWire(ByVal hMem As HGLOBAL) As LPVOID
F:GlobalUnWire(ByVal hMem As HGLOBAL) As WINBOOL
F:lMemoryStatus(ByVal lpBuffer As LPMEMORYSTATUS)
F:LocalAlloc(ByVal uFlags As UINT, ByVal uBytes As SIZE_T_) As HLOCAL
F:LocalReAlloc(ByVal hMem As HLOCAL, ByVal uBytes As SIZE_T_, ByVal uFlags As UINT) As HLOCAL
F:LocalLock(ByVal hMem As HLOCAL) As LPVOID
F:LocalHandle(ByVal pMem As LPCVOID) As HLOCAL
F:LocalUnlock(ByVal hMem As HLOCAL) As WINBOOL
F:LocalSize(ByVal hMem As HLOCAL) As SIZE_T_
F:LocalFlags(ByVal hMem As HLOCAL) As UINT
F:LocalFree(ByVal hMem As HLOCAL) As HLOCAL
F:LocalShrink(ByVal hMem As HLOCAL, ByVal cbNewSize As UINT) As SIZE_T_
F:LocalCompact(ByVal uMinFree As UINT) As SIZE_T_
F:GetNamedPipeInfo(ByVal hNamedPipe As HANDLE, ByVal lpFlags As LPDWORD, ByVal lpOutBufferSize As LPDWORD, ByVal lpInBufferSize As LPDWORD, ByVal lpMaxInstances As LPDWORD) As WINBOOL
F:CreateMailslot(ByVal lpName As LPCWSTR, ByVal nMaxMessageSize As DWORD, ByVal lReadTimeout As DWORD, ByVal lpSecurityAttributes As LPSECURITY_ATTRIBUTES) As HANDLE
F:GetMailslotInfo(ByVal hMailslot As HANDLE, ByVal lpMaxMessageSize As LPDWORD, ByVal lpNextSize As LPDWORD, ByVal lpMessageCount As LPDWORD, ByVal lpReadTimeout As LPDWORD) As WINBOOL
F:SetMailslotInfo(ByVal hMailslot As HANDLE, ByVal lReadTimeout As DWORD) As WINBOOL
F:EncryptFile(ByVal lpFileName As LPCWSTR) As WINBOOL
F:DecryptFile(ByVal lpFileName As LPCWSTR, ByVal dwReserved As DWORD) As WINBOOL
F:FileEncryptionStatus(ByVal lpFileName As LPCWSTR, ByVal lpStatus As LPDWORD) As WINBOOL
F:OpenEncryptedFileRaw(ByVal lpFileName As LPCWSTR, ByVal ulFlags As ULONG, ByVal pvContext As PVOID Ptr) As DWORD
F:ReadEncryptedFileRaw(ByVal pfExportCallback As PFE_EXPORT_FUNC, ByVal pvCallbackContext As PVOID, ByVal pvContext As PVOID) As DWORD
F:WriteEncryptedFileRaw(ByVal pfImportCallback As PFE_IMPORT_FUNC, ByVal pvCallbackContext As PVOID, ByVal pvContext As PVOID) As DWORD
F:CloseEncryptedFileRaw(ByVal pvContext As PVOID)
F:lstrcmpW(ByVal lpString1 As LPCWSTR, ByVal lpString2 As LPCWSTR) As Long
F:lstrcmpiW(ByVal lpString1 As LPCWSTR, ByVal lpString2 As LPCWSTR) As Long
F:lstrcpynW(ByVal lpString1 As LPWSTR, ByVal lpString2 As LPCWSTR, ByVal iMaxLength As Long) As LPWSTR
F:lstrcpyW(ByVal lpString1 As LPWSTR, ByVal lpString2 As LPCWSTR) As LPWSTR
F:lstrcatW(ByVal lpString1 As LPWSTR, ByVal lpString2 As LPCWSTR) As LPWSTR
F:Lstrlenw(ByVal lpString As LPCWSTR) As Long
F:OpenFile(ByVal lpFileName As LPCSTR, ByVal lpReOpenBuff As LPOFSTRUCT, ByVal uStyle As UINT) As HFILE
F:_lopen(ByVal lpPathName As LPCSTR, ByVal iReadWrite As Long) As HFILE
F:_lcreat(ByVal lpPathName As LPCSTR, ByVal iAttribute As Long) As HFILE
F:_lread(ByVal hFile As HFILE, ByVal lpBuffer As LPVOID, ByVal uBytes As UINT) As UINT
F:_lwrite(ByVal hFile As HFILE, ByVal lpBuffer As LPCCH, ByVal uBytes As UINT) As UINT
F:_hread(ByVal hFile As HFILE, ByVal lpBuffer As LPVOID, ByVal lBytes As Long) As Long
F:_hwrite(ByVal hFile As HFILE, ByVal lpBuffer As LPCCH, ByVal lBytes As Long) As Long
F:_lclose(ByVal hFile As HFILE) As HFILE
F:_llseek(ByVal hFile As HFILE, ByVal lOffset As Long, ByVal iOrigin As Long) As Long
F:IsTextUnicode(ByVal lpv As Const Any Ptr, ByVal iSize As Long, ByVal lpiResult As LPINT) As WINBOOL
F:BackupRead(ByVal hFile As HANDLE, ByVal lpBuffer As LPBYTE, ByVal nNumberOfBytesToRead As DWORD, ByVal lpNumberOfBytesRead As LPDWORD, ByVal bAbort As WINBOOL, ByVal bProcessSecurity As WINBOOL, ByVal lpContext As LPVOID Ptr) As WINBOOL
F:BackupSeek(ByVal hFile As HANDLE, ByVal dwLowBytesToSeek As DWORD, ByVal dwHighBytesToSeek As DWORD, ByVal lpdwLowByteSeeked As LPDWORD, ByVal lpdwHighByteSeeked As LPDWORD, ByVal lpContext As LPVOID Ptr) As WINBOOL
F:BackupWrite(ByVal hFile As HANDLE, ByVal lpBuffer As LPBYTE, ByVal nNumberOfBytesToWrite As DWORD, ByVal lpNumberOfBytesWritten As LPDWORD, ByVal bAbort As WINBOOL, ByVal bProcessSecurity As WINBOOL, ByVal lpContext As LPVOID Ptr) As WINBOOL
F:GlobalAddAtom(ByVal lpString As LPCWSTR) As ATOM
F:GlobalAddAtomEx(ByVal lpString As LPCWSTR, ByVal Flags As DWORD) As ATOM
F:GlobalFindAtom(ByVal lpString As LPCWSTR) As ATOM
F:GlobalGetAtomName(ByVal nAtom As ATOM, ByVal lpBuffer As LPWSTR, ByVal nSize As Long) As UINT
F:AddAtom(ByVal lpString As LPCWSTR) As ATOM
F:FindAtom(ByVal lpString As LPCWSTR) As ATOM
F:GetAtomName(ByVal nAtom As ATOM, ByVal lpBuffer As LPWSTR, ByVal nSize As Long) As UINT
F:GetProfileInt(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal nDefault As INT_) As UINT
F:GetProfileString(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal lpDefault As LPCWSTR, ByVal lpReturnedString As LPWSTR, ByVal nSize As DWORD) As DWORD
F:WriteProfileString(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal lpString As LPCWSTR) As WINBOOL
F:GetProfileSection(ByVal lpAppName As LPCWSTR, ByVal lpReturnedString As LPWSTR, ByVal nSize As DWORD) As DWORD
F:WriteProfileSection(ByVal lpAppName As LPCWSTR, ByVal lpString As LPCWSTR) As WINBOOL
F:GetPrivateProfileInt(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal nDefault As INT_, ByVal lpFileName As LPCWSTR) As UINT
F:GetPrivateProfileString(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal lpDefault As LPCWSTR, ByVal lpReturnedString As LPWSTR, ByVal nSize As DWORD, ByVal lpFileName As LPCWSTR) As DWORD
F:WritePrivateProfileString(ByVal lpAppName As LPCWSTR, ByVal lpKeyName As LPCWSTR, ByVal lpString As LPCWSTR, ByVal lpFileName As LPCWSTR) As WINBOOL
F:GetPrivateProfileSection(ByVal lpAppName As LPCWSTR, ByVal lpReturnedString As LPWSTR, ByVal nSize As DWORD, ByVal lpFileName As LPCWSTR) As DWORD
F:WritePrivateProfileSection(ByVal lpAppName As LPCWSTR, ByVal lpString As LPCWSTR, ByVal lpFileName As LPCWSTR) As WINBOOL
F:GetPrivateProfileSectionNames(ByVal lpszReturnBuffer As LPWSTR, ByVal nSize As DWORD, ByVal lpFileName As LPCWSTR) As DWORD
F:GetPrivateProfileStruct(ByVal lpszSection As LPCWSTR, ByVal lpszKey As LPCWSTR, ByVal lpStruct As LPVOID, ByVal uSizeStruct As UINT, ByVal szFile As LPCWSTR) As WINBOOL
F:WritePrivateProfileStruct(ByVal lpszSection As LPCWSTR, ByVal lpszKey As LPCWSTR, ByVal lpStruct As LPVOID, ByVal uSizeStruct As UINT, ByVal szFile As LPCWSTR) As WINBOOL
F:GetComputerName(ByVal lpBuffer As LPWSTR, ByVal nSize As LPDWORD) As WINBOOL
F:SetComputerName(ByVal lpComputerName As LPCWSTR) As WINBOOL
F:DnsHostnameToComputerName(ByVal Hostname As LPCWSTR, ByVal ComputerName As LPWSTR, ByVal nSize As LPDWORD) As WINBOOL
F:GetUserName(ByVal lpBuffer As LPWSTR, ByVal pcbBuffer As LPDWORD) As WINBOOL
F:SystemTimeToTzSpecificLocalTime(ByVal lpTimeZoneInformation As Const TIME_ZONE_INFORMATION Ptr, ByVal lpUniversalTime As Const SYSTEMTIME Ptr, ByVal lpLocalTime As LPSYSTEMTIME) As WINBOOL
F:TzSpecificLocalTimeToSystemTime(ByVal lpTimeZoneInformation As Const TIME_ZONE_INFORMATION Ptr, ByVal lpLocalTime As Const SYSTEMTIME Ptr, ByVal lpUniversalTime As LPSYSTEMTIME) As WINBOOL
F:FileTimeToSystemTime(ByVal lpFileTime As Const FILETIME Ptr, ByVal lpSystemTime As LPSYSTEMTIME) As WINBOOL
F:SystemTimeToFileTime(ByVal lpSystemTime As Const SYSTEMTIME Ptr, ByVal lpFileTime As LPFILETIME) As WINBOOL
F:GetTimeZoneInformation(ByVal lpTimeZoneInformation As LPTIME_ZONE_INFORMATION) As DWORD
T:WNDCLASSEX|cbSize,UINT|Style,UINT|lpfnWndProc,WNDPROC|cbClsExtra,Long|cbWndExtra,Long|hInstance,HINSTANCE|hIcon,HICON|hCursor,HCURSOR|hbrBackground,HBRUSH|lpszMenuName,LPCWSTR|lpszClassName,LPCWSTR|hIconSm,HICON
T:WNDCLASS|Style,UINT|lpfnWndProc,WNDPROC|cbClsExtra,Long|cbWndExtra,Long|hInstance,HINSTANCE|hIcon,HICON|hCursor,HCURSOR|hbrBackground,HBRUSH|lpszMenuName,LPCWSTR|lpszClassName,LPCWSTR
T:MSG|HWnd,HWnd|message,UINT|wParam,WPARAM|lParam,LPARAM|Time,DWORD|pt,Point
F:MAKEWPARAM(Loword, Hiword)
F:MAKELPARAM(Loword, Hiword)
F:MAKELRESULT(Loword, Hiword)
T:MINMAXINFO|ptReserved,Point|ptMaxSize,Point|ptMaxPosition,Point|ptMinTrackSize,Point|ptMaxTrackSize,Point
T:WINDOWPOS|HWnd,HWnd|hwndInsertAfter,HWnd|x,Long|y,Long|cx,Long|cy,Long|flags,UINT
T:TrackMouseEvent|cbSize,DWORD|dwFlags,DWORD|hwndTrack,HWnd|dwHoverTime,DWORD
F:DrawEdge(ByVal hdc As HDC, ByVal qrc As LPRECT, ByVal edge As UINT, ByVal grfFlags As UINT) As WINBOOL
F:DrawFrameControl(ByVal As HDC, ByVal As LPRECT, ByVal As UINT, ByVal As UINT) As WINBOOL
F:DrawCaption(ByVal HWnd As HWnd, ByVal hdc As HDC, ByVal lprect As Const Rect Ptr, ByVal flags As UINT) As WINBOOL
F:DrawAnimatedRects(ByVal HWnd As HWnd, ByVal idAni As Long, ByVal lprcFrom As Const Rect Ptr, ByVal lprcTo As Const Rect Ptr) As WINBOOL
T:ACCEL|fVirt,UByte|Key,WORD|cmd,WORD
T:CREATESTRUCT|lpCreateParams,LPVOID|hInstance,HINSTANCE|hMenu,HMENU|hwndParent,HWnd|cy,Long|cx,Long|y,Long|x,Long|Style,Long|lpszName,LPCWSTR|lpszClass,LPCWSTR|dwExStyle,DWORD
T:WINDOWPLACEMENT|length,UINT|flags,UINT|showCmd,UINT|ptMinPosition,Point|ptMaxPosition,Point|rcNormalPosition,Rect
T:NMHDR|hwndFrom,HWnd|idFrom,UINT_PTR|code,UINT
T:MEASUREITEMSTRUCT|CtlType,UINT|CtlID,UINT|itemID,UINT|itemWidth,UINT|itemHeight,UINT|itemData,ULONG_PTR
T:DRAWITEMSTRUCT|CtlType,UINT|CtlID,UINT|itemID,UINT|itemAction,UINT|itemState,UINT|hwndItem,HWnd|hDC,HDC|rcItem,Rect|itemData,ULONG_PTR
F:GetMessage(ByVal lpMsg As LPMSG, ByVal HWnd As HWnd, ByVal wMsgFilterMin As UINT, ByVal wMsgFilterMax As UINT) As WINBOOL
F:TranslateMessage(ByVal lpMsg As Const MSG Ptr) As WINBOOL
F:DispatchMessage(ByVal lpMsg As Const MSG Ptr) As LRESULT
F:PeekMessage(ByVal lpMsg As LPMSG, ByVal HWnd As HWnd, ByVal wMsgFilterMin As UINT, ByVal wMsgFilterMax As UINT, ByVal wRemoveMsg As UINT) As WINBOOL
F:RegisterHotKey(ByVal HWnd As HWnd, ByVal id As Long, ByVal fsModifiers As UINT, ByVal vk As UINT) As WINBOOL
F:UnregisterHotKey(ByVal HWnd As HWnd, ByVal id As Long) As WINBOOL
F:ExitWindows(dwReserved, Code)
F:ExitWindowsEx(ByVal uFlags As UINT, ByVal dwReason As DWORD) As WINBOOL
F:SwapMouseButton(ByVal fSwap As WINBOOL) As WINBOOL
F:GetMessagePos() As DWORD
F:GetMessageTime() As Long
F:GetMessageExtraInfo() As LPARAM
F:SendNotifyMessage(ByVal HWnd As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As WINBOOL
F:SendMessage(ByVal HWnd As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As WINBOOL
F:PostMessage(ByVal HWnd As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As WINBOOL
F:DefWindowProc(ByVal HWnd As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As LRESULT
F:PostQuitMessage(ByVal nExitCode As Long)
F:RegisterClass(ByVal lpWndClass As Const WNDCLASSW Ptr) As ATOM
F:UnregisterClass(ByVal lpClassName As LPCWSTR, ByVal hInstance As HINSTANCE) As WINBOOL
F:GetClassInfo(ByVal hInstance As HINSTANCE, ByVal lpClassName As LPCWSTR, ByVal lpWndClass As LPWNDCLASSW) As WINBOOL
F:RegisterClassEx(ByVal As Const WNDCLASSEXW Ptr) As ATOM
F:GetClassInfoEx(ByVal hInstance As HINSTANCE, ByVal lpszClass As LPCWSTR, ByVal lpwcx As LPWNDCLASSEXW) As WINBOOL
F:CallWindowProc(ByVal lpPrevWndFunc As WNDPROC, ByVal HWnd As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As LRESULT
F:CreateWindowEx(ByVal dwExStyle As DWORD, ByVal lpClassName As LPCWSTR, ByVal lpWindowName As LPCWSTR, ByVal dwStyle As DWORD, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal hWndParent As HWnd, ByVal hMenu As HMENU, ByVal hInstance As HINSTANCE, ByVal lpParam As LPVOID) As HWnd
F:IsWindow(ByVal HWnd As HWnd) As WINBOOL
F:IsMenu(ByVal hMenu As HMENU) As WINBOOL
F:IsChild(ByVal hWndParent As HWnd, ByVal HWnd As HWnd) As WINBOOL
F:DestroyWindow(ByVal HWnd As HWnd) As WINBOOL
F:ShowWindow(ByVal HWnd As HWnd, ByVal nCmdShow As Long) As WINBOOL
F:AnimateWindow(ByVal HWnd As HWnd, ByVal dwTime As DWORD, ByVal dwFlags As DWORD) As WINBOOL
F:UpdateLayeredWindow(ByVal HWnd As HWnd, ByVal hdcDst As HDC, ByVal pptDst As Point Ptr, ByVal psize As SIZE Ptr, ByVal hdcSrc As HDC, ByVal pptSrc As Point Ptr, ByVal crKey As COLORREF, ByVal pblend As BLENDFUNCTION Ptr, ByVal dwFlags As DWORD) As WINBOOL
T:UPDATELAYEREDWINDOWINFO|cbSize,DWORD|hdcDst,HDC|pptDst,Const Point Ptr|psize,Const SIZE Ptr|hdcSrc,HDC|pptSrc,Const Point Ptr|crKey,COLORREF|pblend,Const BLENDFUNCTION Ptr|dwFlags,DWORD|prcDirty,Const Rect Ptr
F:GetLayeredWindowAttributes(ByVal HWnd As HWnd, ByVal pcrKey As COLORREF Ptr, ByVal pbAlpha As UByte Ptr, ByVal pdwFlags As DWORD Ptr) As WINBOOL
F:PrintWindow(ByVal HWnd As HWnd, ByVal hdcBlt As HDC, ByVal nFlags As UINT) As WINBOOL
F:SetLayeredWindowAttributes(ByVal HWnd As HWnd, ByVal crKey As COLORREF, ByVal bAlpha As UByte, ByVal dwFlags As DWORD) As WINBOOL
F:CloseWindow(ByVal HWnd As HWnd) As WINBOOL
F:MoveWindow(ByVal HWnd As HWnd, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal bRepaint As WINBOOL) As WINBOOL
F:SetWindowPos(ByVal HWnd As HWnd, ByVal hWndInsertAfter As HWnd, ByVal X As Long, ByVal Y As Long, ByVal cx As Long, ByVal cy As Long, ByVal uFlags As UINT) As WINBOOL
F:GetWindowPlacement(ByVal HWnd As HWnd, ByVal lpwndpl As WINDOWPLACEMENT Ptr) As WINBOOL
F:SetWindowPlacement(ByVal HWnd As HWnd, ByVal lpwndpl As Const WINDOWPLACEMENT Ptr) As WINBOOL
F:BeginDeferWindowPos(ByVal nNumWindows As Long) As HDWP
F:DeferWindowPos(ByVal hWinPosInfo As HDWP, ByVal HWnd As HWnd, ByVal hWndInsertAfter As HWnd, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal uFlags As UINT) As HDWP
F:EndDeferWindowPos(ByVal hWinPosInfo As HDWP) As WINBOOL
F:IsWindowVisible(ByVal HWnd As HWnd) As WINBOOL
F:IsIconic(ByVal HWnd As HWnd) As WINBOOL
F:AnyPopup() As WINBOOL
F:BringWindowToTop(ByVal HWnd As HWnd) As WINBOOL
F:IsZoomed(ByVal HWnd As HWnd) As WINBOOL
F:GetDlgItemText(ByVal hDlg As HWnd, ByVal nIDDlgItem As Long, ByVal lpString As LPWSTR, ByVal cchMax As Long) As UINT
F:CheckDlgButton(ByVal hDlg As HWnd, ByVal nIDButton As Long, ByVal uCheck As UINT) As WINBOOL
F:CheckRadioButton(ByVal hDlg As HWnd, ByVal nIDFirstButton As Long, ByVal nIDLastButton As Long, ByVal nIDCheckButton As Long) As WINBOOL
F:IsDlgButtonChecked(ByVal hDlg As HWnd, ByVal nIDButton As Long) As UINT
F:SendDlgItemMessage(ByVal hDlg As HWnd, ByVal nIDDlgItem As Long, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As LRESULT
F:GetNextDlgGroupItem(ByVal hDlg As HWnd, ByVal hCtl As HWnd, ByVal bPrevious As WINBOOL) As HWnd
F:GetNextDlgTabItem(ByVal hDlg As HWnd, ByVal hCtl As HWnd, ByVal bPrevious As WINBOOL) As HWnd
F:GetDlgCtrlID(ByVal HWnd As HWnd) As Long
F:GetDialogBaseUnits() As Long
F:DefDlgProc(ByVal hDlg As HWnd, ByVal Msg As UINT, ByVal wParam As WPARAM, ByVal lParam As LPARAM) As LRESULT
F:CallMsgFilter(ByVal lpMsg As LPMSG, ByVal nCode As Long) As WINBOOL
F:OpenClipboard(ByVal hWndNewOwner As HWnd) As WINBOOL
F:CloseClipboard() As WINBOOL
F:GetClipboardSequenceNumber() As DWORD
F:GetClipboardOwner() As HWnd
F:SetClipboardViewer(ByVal hWndNewViewer As HWnd) As HWnd
F:GetClipboardViewer() As HWnd
F:ChangeClipboardChain(ByVal hWndRemove As HWnd, ByVal hWndNewNext As HWnd) As WINBOOL
F:SetClipboardData(ByVal uFormat As UINT, ByVal hMem As HANDLE) As HANDLE
F:GetClipboardData(ByVal uFormat As UINT) As HANDLE
F:RegisterClipboardFormat(ByVal lpszFormat As LPCWSTR) As UINT
F:CountClipboardFormats() As Long
F:EnumClipboardFormats(ByVal format As UINT) As UINT
F:GetClipboardFormatName(ByVal format As UINT, ByVal lpszFormatName As LPWSTR, ByVal cchMaxCount As Long) As Long
F:EmptyClipboard() As WINBOOL
F:IsClipboardFormatAvailable(ByVal format As UINT) As WINBOOL
F:GetPriorityClipboardFormat(ByVal paFormatPriorityList As UINT Ptr, ByVal cFormats As Long) As Long
F:GetOpenClipboardWindow() As HWnd
F:IsCharAlpha(ByVal ch As WCHAR) As WINBOOL
F:IsCharAlphaNumeric(ByVal ch As WCHAR) As WINBOOL
F:IsCharUpper(ByVal ch As WCHAR) As WINBOOL
F:IsCharLower(ByVal ch As WCHAR) As WINBOOL
F:SetFocus(ByVal HWnd As HWnd) As HWnd
F:GetActiveWindow() As HWnd
F:GetFocus() As HWnd
F:GetKBCodePage() As UINT
F:GetKeyState(ByVal nVirtKey As Long) As Short
F:GetAsyncKeyState(ByVal vKey As Long) As Short
F:GetKeyboardState(ByVal lpKeyState As PBYTE) As WINBOOL
F:SetKeyboardState(ByVal lpKeyState As LPBYTE) As WINBOOL
F:GetKeyNameText(ByVal lParam As Long, ByVal lpString As LPWSTR, ByVal cchSize As Long) As Long
F:VkKeyScan(ByVal ch As WCHAR) As Short
F:GetInputState() As WINBOOL
F:GetQueueStatus(ByVal flags As UINT) As DWORD
F:GetCapture() As HWnd
F:SetCapture(ByVal HWnd As HWnd) As HWnd
F:ReleaseCapture() As WINBOOL
F:MsgWaitForMultipleObjects(ByVal nCount As DWORD, ByVal pHandles As Const HANDLE Ptr, ByVal fWaitAll As WINBOOL, ByVal dwMilliseconds As DWORD, ByVal dwWakeMask As DWORD) As DWORD
F:MsgWaitForMultipleObjectsEx(ByVal nCount As DWORD, ByVal pHandles As Const HANDLE Ptr, ByVal dwMilliseconds As DWORD, ByVal dwWakeMask As DWORD, ByVal dwFlags As DWORD) As DWORD
F:SetTimer(ByVal HWnd As HWnd, ByVal nIDEvent As UINT_PTR, ByVal uElapse As UINT, ByVal lpTimerFunc As TIMERPROC) As UINT_PTR
F:KillTimer(ByVal HWnd As HWnd, ByVal uIDEvent As UINT_PTR) As WINBOOL
F:IsWindowUnicode(ByVal HWnd As HWnd) As WINBOOL
F:EnableWindow(ByVal HWnd As HWnd, ByVal bEnable As WINBOOL) As WINBOOL
F:IsWindowEnabled(ByVal HWnd As HWnd) As WINBOOL
F:LoadAccelerators(ByVal hInstance As HINSTANCE, ByVal lpTableName As LPCWSTR) As HACCEL
F:CreateAcceleratorTable(ByVal paccel As LPACCEL, ByVal cAccel As Long) As HACCEL
F:DestroyAcceleratorTable(ByVal hAccel As HACCEL) As WINBOOL
F:CopyAcceleratorTable(ByVal hAccelSrc As HACCEL, ByVal lpAccelDst As LPACCEL, ByVal cAccelEntries As Long) As Long
F:TranslateAccelerator(ByVal HWnd As HWnd, ByVal hAccTable As HACCEL, ByVal lpMsg As LPMSG) As Long
F:GetSystemMetrics(ByVal nIndex As Long) As Long
F:LoadMenu(ByVal hInstance As HINSTANCE, ByVal lpMenuName As LPCWSTR) As HMENU
F:GetMenu(ByVal HWnd As HWnd) As HMENU
F:SetMenu(ByVal HWnd As HWnd, ByVal hMenu As HMENU) As WINBOOL
F:ChangeMenu(ByVal hMenu As HMENU, ByVal cmd As UINT, ByVal lpszNewItem As LPCWSTR, ByVal cmdInsert As UINT, ByVal flags As UINT) As WINBOOL
F:HiliteMenuItem(ByVal HWnd As HWnd, ByVal hMenu As HMENU, ByVal uIDHiliteItem As UINT, ByVal uHilite As UINT) As WINBOOL
F:GetMenuString(ByVal hMenu As HMENU, ByVal uIDItem As UINT, ByVal lpString As LPWSTR, ByVal cchMax As Long, ByVal flags As UINT) As Long
F:GetMenuState(ByVal hMenu As HMENU, ByVal uId As UINT, ByVal uFlags As UINT) As UINT
F:DrawMenuBar(ByVal HWnd As HWnd) As WINBOOL
F:GetSystemMenu(ByVal HWnd As HWnd, ByVal bRevert As WINBOOL) As HMENU
F:CreateMenu() As HMENU
F:CreatePopupMenu() As HMENU
F:DestroyMenu(ByVal hMenu As HMENU) As WINBOOL
F:CheckMenuItem(ByVal hMenu As HMENU, ByVal uIDCheckItem As UINT, ByVal uCheck As UINT) As DWORD
F:EnableMenuItem(ByVal hMenu As HMENU, ByVal uIDEnableItem As UINT, ByVal uEnable As UINT) As WINBOOL
F:GetSubMenu(ByVal hMenu As HMENU, ByVal nPos As Long) As HMENU
F:GetMenuItemID(ByVal hMenu As HMENU, ByVal nPos As Long) As UINT
F:GetMenuItemCount(ByVal hMenu As HMENU) As Long
F:InsertMenu(ByVal hMenu As HMENU, ByVal uPosition As UINT, ByVal uFlags As UINT, ByVal uIDNewItem As UINT_PTR, ByVal lpNewItem As LPCWSTR) As WINBOOL
F:AppendMenu(ByVal hMenu As HMENU, ByVal uFlags As UINT, ByVal uIDNewItem As UINT_PTR, ByVal lpNewItem As LPCWSTR) As WINBOOL
F:ModifyMenu(ByVal hMnu As HMENU, ByVal uPosition As UINT, ByVal uFlags As UINT, ByVal uIDNewItem As UINT_PTR, ByVal lpNewItem As LPCWSTR) As WINBOOL
F:RemoveMenu(ByVal hMenu As HMENU, ByVal uPosition As UINT, ByVal uFlags As UINT) As WINBOOL
F:DeleteMenu(ByVal hMenu As HMENU, ByVal uPosition As UINT, ByVal uFlags As UINT) As WINBOOL
F:SetMenuItemBitmaps(ByVal hMenu As HMENU, ByVal uPosition As UINT, ByVal uFlags As UINT, ByVal hBitmapUnchecked As HBITMAP, ByVal hBitmapChecked As HBITMAP) As WINBOOL
F:GetMenuCheckMarkDimensions() As Long
F:TrackPopupMenu(ByVal hMenu As HMENU, ByVal uFlags As UINT, ByVal x As Long, ByVal y As Long, ByVal nReserved As Long, ByVal HWnd As HWnd, ByVal prcRect As Const Rect Ptr) As WINBOOL
F:TrackPopupMenuEx(ByVal As HMENU, ByVal As UINT, ByVal As Long, ByVal As Long, ByVal As HWnd, ByVal As LPTPMPARAMS) As WINBOOL
F:GetMenuInfo(ByVal As HMENU, ByVal As LPMENUINFO) As WINBOOL
F:SetMenuInfo(ByVal As HMENU, ByVal As LPCMENUINFO) As WINBOOL
T:MENUITEMINFOW|cbSize,UINT|fMask,UINT|fType,UINT|fState,UINT|wID,UINT|hSubMenu,HMENU|hbmpChecked,HBITMAP|hbmpUnchecked,HBITMAP|dwItemData,ULONG_PTR|dwTypeData,LPWSTR|cch,UINT|hbmpItem,HBITMAP
F:InsertMenuItem(ByVal hmenu As HMENU, ByVal item As UINT, ByVal fByPosition As WINBOOL, ByVal lpmi As LPCMENUITEMINFOW) As WINBOOL
F:GetMenuItemInfo(ByVal hmenu As HMENU, ByVal item As UINT, ByVal fByPosition As WINBOOL, ByVal lpmii As LPMENUITEMINFOW) As WINBOOL
F:SetMenuItemInfo(ByVal hmenu As HMENU, ByVal item As UINT, ByVal fByPositon As WINBOOL, ByVal lpmii As LPCMENUITEMINFOW) As WINBOOL
F:GetMenuDefaultItem(ByVal hMenu As HMENU, ByVal fByPos As UINT, ByVal gmdiFlags As UINT) As UINT
F:SetMenuDefaultItem(ByVal hMenu As HMENU, ByVal uItem As UINT, ByVal fByPos As UINT) As WINBOOL
F:GetMenuItemRect(ByVal HWnd As HWnd, ByVal hMenu As HMENU, ByVal uItem As UINT, ByVal lprcItem As LPRECT) As WINBOOL
F:MenuItemFromPoint(ByVal HWnd As HWnd, ByVal hMenu As HMENU, ByVal ptScreen As Point) As Long
T:DRAWTEXTPARAMS|cbSize,UINT|iTabLength,Long|iLeftMargin,Long|iRightMargin,Long|uiLengthDrawn,UINT
F:DrawText(ByVal hdc As HDC, ByVal lpchText As LPCWSTR, ByVal cchText As Long, ByVal lprc As LPRECT, ByVal format As UINT) As Long
F:DrawTextEx(ByVal hdc As HDC, ByVal lpchText As LPWSTR, ByVal cchText As Long, ByVal lprc As LPRECT, ByVal format As UINT, ByVal lpdtp As LPDRAWTEXTPARAMS) As Long
F:GrayString(ByVal hDC As HDC, ByVal hBrush As HBRUSH, ByVal lpOutputFunc As GRAYSTRINGPROC, ByVal lpData As LPARAM, ByVal nCount As Long, ByVal X As Long, ByVal Y As Long, ByVal nWidth As Long, ByVal nHeight As Long) As WINBOOL
F:DrawState(ByVal hdc As HDC, ByVal hbrFore As HBRUSH, ByVal qfnCallBack As DRAWSTATEPROC, ByVal lData As LPARAM, ByVal wData As WPARAM, ByVal x As Long, ByVal y As Long, ByVal cx As Long, ByVal cy As Long, ByVal uFlags As UINT) As WINBOOL
F:TabbedTextOut(ByVal hdc As HDC, ByVal x As Long, ByVal y As Long, ByVal lpString As LPCWSTR, ByVal chCount As Long, ByVal nTabPositions As Long, ByVal lpnTabStopPositions As Const INT_ Ptr, ByVal nTabOrigin As Long) As Long
F:GetTabbedTextExtent(ByVal hdc As HDC, ByVal lpString As LPCWSTR, ByVal chCount As Long, ByVal nTabPositions As Long, ByVal lpnTabStopPositions As Const INT_ Ptr) As DWORD
F:UpdateWindow(ByVal HWnd As HWnd) As WINBOOL
F:SetActiveWindow(ByVal HWnd As HWnd) As HWnd
F:GetForegroundWindow() As HWnd
F:PaintDesktop(ByVal hdc As HDC) As WINBOOL
F:SwitchToThisWindow(ByVal HWnd As HWnd, ByVal fUnknown As WINBOOL)
F:SetForegroundWindow(ByVal HWnd As HWnd) As WINBOOL
F:AllowSetForegroundWindow(ByVal dwProcessId As DWORD) As WINBOOL
F:LockSetForegroundWindow(ByVal uLockCode As UINT) As WINBOOL
F:WindowFromDC(ByVal hDC As HDC) As HWnd
F:GetDC(ByVal HWnd As HWnd) As HDC
F:GetDCEx(ByVal HWnd As HWnd, ByVal hrgnClip As HRGN, ByVal flags As DWORD) As HDC
F:GetWindowDC(ByVal HWnd As HWnd) As HDC
F:ReleaseDC(ByVal HWnd As HWnd, ByVal hDC As HDC) As Long
F:BeginPaint(ByVal HWnd As HWnd, ByVal lpPaint As LPPAINTSTRUCT) As HDC
F:EndPaint(ByVal HWnd As HWnd, ByVal lpPaint As Const PAINTSTRUCT Ptr) As WINBOOL
F:GetUpdateRect(ByVal HWnd As HWnd, ByVal lpRect As LPRECT, ByVal bErase As WINBOOL) As WINBOOL
F:GetUpdateRgn(ByVal HWnd As HWnd, ByVal hRgn As HRGN, ByVal bErase As WINBOOL) As Long
F:SetWindowRgn(ByVal HWnd As HWnd, ByVal hRgn As HRGN, ByVal bRedraw As WINBOOL) As Long
F:GetWindowRgn(ByVal HWnd As HWnd, ByVal hRgn As HRGN) As Long
F:GetWindowRgnBox(ByVal HWnd As HWnd, ByVal lprc As LPRECT) As Long
F:ExcludeUpdateRgn(ByVal hDC As HDC, ByVal HWnd As HWnd) As Long
F:InvalidateRect(ByVal HWnd As HWnd, ByVal lpRect As Const Rect Ptr, ByVal bErase As WINBOOL) As WINBOOL
F:ValidateRect(ByVal HWnd As HWnd, ByVal lpRect As Const Rect Ptr) As WINBOOL
F:InvalidateRgn(ByVal HWnd As HWnd, ByVal hRgn As HRGN, ByVal bErase As WINBOOL) As WINBOOL
F:ValidateRgn(ByVal HWnd As HWnd, ByVal hRgn As HRGN) As WINBOOL
F:RedrawWindow(ByVal HWnd As HWnd, ByVal lprcUpdate As Const Rect Ptr, ByVal hrgnUpdate As HRGN, ByVal flags As UINT) As WINBOOL
F:LockWindowUpdate(ByVal hWndLock As HWnd) As WINBOOL
F:ScrollWindow(ByVal HWnd As HWnd, ByVal XAmount As Long, ByVal YAmount As Long, ByVal lpRect As Const Rect Ptr, ByVal lpClipRect As Const Rect Ptr) As WINBOOL
F:ScrollDC(ByVal hDC As HDC, ByVal dx As Long, ByVal dy As Long, ByVal lprcScroll As Const Rect Ptr, ByVal lprcClip As Const Rect Ptr, ByVal hrgnUpdate As HRGN, ByVal lprcUpdate As LPRECT) As WINBOOL
F:ScrollWindowEx(ByVal HWnd As HWnd, ByVal dx As Long, ByVal dy As Long, ByVal prcScroll As Const Rect Ptr, ByVal prcClip As Const Rect Ptr, ByVal hrgnUpdate As HRGN, ByVal prcUpdate As LPRECT, ByVal flags As UINT) As Long
F:SetScrollPos(ByVal HWnd As HWnd, ByVal nBar As Long, ByVal nPos As Long, ByVal bRedraw As WINBOOL) As Long
F:GetScrollPos(ByVal HWnd As HWnd, ByVal nBar As Long) As Long
F:SetScrollRange(ByVal HWnd As HWnd, ByVal nBar As Long, ByVal nMinPos As Long, ByVal nMaxPos As Long, ByVal bRedraw As WINBOOL) As WINBOOL
F:GetScrollRange(ByVal HWnd As HWnd, ByVal nBar As Long, ByVal lpMinPos As LPINT, ByVal lpMaxPos As LPINT) As WINBOOL
F:ShowScrollBar(ByVal HWnd As HWnd, ByVal wBar As Long, ByVal bShow As WINBOOL) As WINBOOL
F:EnableScrollBar(ByVal HWnd As HWnd, ByVal wSBflags As UINT, ByVal wArrows As UINT) As WINBOOL
F:SetProp(ByVal HWnd As HWnd, ByVal lpString As LPCWSTR, ByVal hData As HANDLE) As WINBOOL
F:GetProp(ByVal HWnd As HWnd, ByVal lpString As LPCWSTR) As HANDLE
F:RemoveProp(ByVal HWnd As HWnd, ByVal lpString As LPCWSTR) As HANDLE
F:EnumPropsEx(ByVal HWnd As HWnd, ByVal lpEnumFunc As PROPENUMPROCEXW, ByVal lParam As LPARAM) As Long
F:EnumProps(ByVal HWnd As HWnd, ByVal lpEnumFunc As PROPENUMPROCW) As Long
F:SetWindowText(ByVal HWnd As HWnd, ByVal lpString As LPCWSTR) As WINBOOL
F:GetWindowText(ByVal HWnd As HWnd, ByVal lpString As LPWSTR, ByVal nMaxCount As Long) As Long
F:GetWindowTextLength(ByVal HWnd As HWnd) As Long
F:GetClientRect(ByVal HWnd As HWnd, ByVal lpRect As LPRECT) As WINBOOL
F:GetWindowRect(ByVal HWnd As HWnd, ByVal lpRect As LPRECT) As WINBOOL
F:AdjustWindowRect(ByVal lpRect As LPRECT, ByVal dwStyle As DWORD, ByVal bMenu As WINBOOL) As WINBOOL
F:AdjustWindowRectEx(ByVal lpRect As LPRECT, ByVal dwStyle As DWORD, ByVal bMenu As WINBOOL, ByVal dwExStyle As DWORD) As WINBOOL
F:MessageBox(ByVal HWnd As HWnd, ByVal lpText As LPCWSTR, ByVal lpCaption As LPCWSTR, ByVal uType As UINT) As Long
F:MessageBeep(ByVal uType As UINT) As WINBOOL
F:ShowCursor(ByVal bShow As WINBOOL) As Long
F:SetCursorPos(ByVal X As Long, ByVal Y As Long) As WINBOOL
F:SetCursor(ByVal hCursor As HCURSOR) As HCURSOR
F:GetCursorPos(ByVal lpPoint As LPPOINT) As WINBOOL
F:ClipCursor(ByVal lpRect As Const Rect Ptr) As WINBOOL
F:GetClipCursor(ByVal lpRect As LPRECT) As WINBOOL
F:GetCursor() As HCURSOR
F:CreateCaret(ByVal HWnd As HWnd, ByVal hBitmap As HBITMAP, ByVal nWidth As Long, ByVal nHeight As Long) As WINBOOL
F:GetCaretBlinkTime() As UINT
F:SetCaretBlinkTime(ByVal uMSeconds As UINT) As WINBOOL
F:DestroyCaret() As WINBOOL
F:HideCaret(ByVal HWnd As HWnd) As WINBOOL
F:ShowCaret(ByVal HWnd As HWnd) As WINBOOL
F:SetCaretPos(ByVal X As Long, ByVal Y As Long) As WINBOOL
F:GetCaretPos(ByVal lpPoint As LPPOINT) As WINBOOL
F:ClientToScreen(ByVal HWnd As HWnd, ByVal lpPoint As LPPOINT) As WINBOOL
F:ScreenToClient(ByVal HWnd As HWnd, ByVal lpPoint As LPPOINT) As WINBOOL
F:MapWindowPoints(ByVal hWndFrom As HWnd, ByVal hWndTo As HWnd, ByVal lpPoints As LPPOINT, ByVal cPoints As UINT) As Long
F:WindowFromPoint(ByVal Point As Point) As HWnd
F:ChildWindowFromPoint(ByVal hWndParent As HWnd, ByVal Point As Point) As HWnd
F:ChildWindowFromPointEx(ByVal HWnd As HWnd, ByVal pt As Point, ByVal flags As UINT) As HWnd
F:GetSysColor(ByVal nIndex As Long) As DWORD
F:GetSysColorBrush(ByVal nIndex As Long) As HBRUSH
F:SetSysColors(ByVal cElements As Long, ByVal lpaElements As Const INT_ Ptr, ByVal lpaRgbValues As Const COLORREF Ptr) As WINBOOL
F:DrawFocusRect(ByVal hDC As HDC, ByVal lprc As Const Rect Ptr) As WINBOOL
F:FillRect(ByVal hDC As HDC, ByVal lprc As Const Rect Ptr, ByVal hbr As HBRUSH) As Long
F:FrameRect(ByVal hDC As HDC, ByVal lprc As Const Rect Ptr, ByVal hbr As HBRUSH) As Long
F:InvertRect(ByVal hDC As HDC, ByVal lprc As Const Rect Ptr) As WINBOOL
F:SetRect(ByVal lprc As LPRECT, ByVal xLeft As Long, ByVal yTop As Long, ByVal xRight As Long, ByVal yBottom As Long) As WINBOOL
F:SetRectEmpty(ByVal lprc As LPRECT) As WINBOOL
F:CopyRect(ByVal lprcDst As LPRECT, ByVal lprcSrc As Const Rect Ptr) As WINBOOL
F:InflateRect(ByVal lprc As LPRECT, ByVal dx As Long, ByVal dy As Long) As WINBOOL
F:IntersectRect(ByVal lprcDst As LPRECT, ByVal lprcSrc1 As Const Rect Ptr, ByVal lprcSrc2 As Const Rect Ptr) As WINBOOL
F:UnionRect(ByVal lprcDst As LPRECT, ByVal lprcSrc1 As Const Rect Ptr, ByVal lprcSrc2 As Const Rect Ptr) As WINBOOL
F:SubtractRect(ByVal lprcDst As LPRECT, ByVal lprcSrc1 As Const Rect Ptr, ByVal lprcSrc2 As Const Rect Ptr) As WINBOOL
F:OffsetRect(ByVal lprc As LPRECT, ByVal dx As Long, ByVal dy As Long) As WINBOOL
F:IsRectEmpty(ByVal lprc As Const Rect Ptr) As WINBOOL
F:EqualRect(ByVal lprc1 As Const Rect Ptr, ByVal lprc2 As Const Rect Ptr) As WINBOOL
F:PtInRect(ByVal lprc As Const Rect Ptr, ByVal pt As Point) As WINBOOL
F:GetWindowWord(ByVal HWnd As HWnd, ByVal nIndex As Long) As WORD
F:SetWindowWord(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal wNewWord As WORD) As WORD
F:GetWindowLong(ByVal HWnd As HWnd, ByVal nIndex As Long) As Long
F:SetWindowLong(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
F:GetWindowLongPtr(ByVal HWnd As HWnd, ByVal nIndex As Long) As Long
F:SetWindowLongPtr(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal dwNewLong As Long) As Long
F:GetClassWord(ByVal HWnd As HWnd, ByVal nIndex As Long) As WORD
F:SetClassWord(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal wNewWord As WORD) As WORD
F:GetClassLong(ByVal HWnd As HWnd, ByVal nIndex As Long) As DWORD
F:SetClassLong(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal dwNewLong As Long) As DWORD
F:GetClassLongPtr(ByVal HWnd As HWnd, ByVal nIndex As Long) As DWORD
F:SetClassLongPtr(ByVal HWnd As HWnd, ByVal nIndex As Long, ByVal dwNewLong As Long) As DWORD
F:GetDesktopWindow() As HWnd
F:GetParent(ByVal HWnd As HWnd) As HWnd
F:SetParent(ByVal hWndChild As HWnd, ByVal hWndNewParent As HWnd) As HWnd
F:EnumChildWindows(ByVal hWndParent As HWnd, ByVal lpEnumFunc As WNDENUMPROC, ByVal lParam As LPARAM) As WINBOOL
F:FindWindow(ByVal lpClassName As LPCWSTR, ByVal lpWindowName As LPCWSTR) As HWnd
F:FindWindowEx(ByVal hWndParent As HWnd, ByVal hWndChildAfter As HWnd, ByVal lpszClass As LPCWSTR, ByVal lpszWindow As LPCWSTR) As HWnd
F:EnumWindows(ByVal lpEnumFunc As WNDENUMPROC, ByVal lParam As LPARAM) As WINBOOL
F:GetClassName(ByVal HWnd As HWnd, ByVal lpClassName As LPWSTR, ByVal nMaxCount As Long) As Long
F:GetTopWindow(ByVal HWnd As HWnd) As HWnd
F:SetWindowsHook(ByVal nFilterType As Long, ByVal pfnFilterProc As HOOKPROC) As HHOOK
F:LoadBitmap(ByVal hInstance As HINSTANCE, ByVal lpBitmapName As LPCWSTR) As HBITMAP
F:LoadCursor(ByVal hInstance As HINSTANCE, ByVal lpCursorName As LPCWSTR) As HCURSOR
F:CreateCursor(ByVal hInst As HINSTANCE, ByVal xHotSpot As Long, ByVal yHotSpot As Long, ByVal nWidth As Long, ByVal nHeight As Long, ByVal pvANDPlane As Const Any Ptr, ByVal pvXORPlane As Const Any Ptr) As HCURSOR
F:DestroyCursor(ByVal hCursor As HCURSOR) As WINBOOL
F:LoadIcon(ByVal hInstance As HINSTANCE, ByVal lpIconName As LPCWSTR) As HICON
F:CreateIcon(ByVal hInstance As HINSTANCE, ByVal nWidth As Long, ByVal nHeight As Long, ByVal cPlanes As UByte, ByVal cBitsPixel As UByte, ByVal lpbANDbits As Const UByte Ptr, ByVal lpbXORbits As Const UByte Ptr) As HICON
F:DestroyIcon(ByVal hIcon As HICON) As WINBOOL
F:LookupIconIdFromDirectory(ByVal presbits As PBYTE, ByVal fIcon As WINBOOL) As Long
F:LookupIconIdFromDirectoryEx(ByVal presbits As PBYTE, ByVal fIcon As WINBOOL, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal Flags As UINT) As Long
F:CreateIconFromResource(ByVal presbits As PBYTE, ByVal dwResSize As DWORD, ByVal fIcon As WINBOOL, ByVal dwVer As DWORD) As HICON
F:CreateIconFromResourceEx(ByVal presbits As PBYTE, ByVal dwResSize As DWORD, ByVal fIcon As WINBOOL, ByVal dwVer As DWORD, ByVal cxDesired As Long, ByVal cyDesired As Long, ByVal Flags As UINT) As HICON
F:LoadImage(ByVal hInst As HINSTANCE, ByVal Name As LPCWSTR, ByVal Type As UINT, ByVal cx As Long, ByVal cy As Long, ByVal fuLoad As UINT) As HANDLE
F:CopyImage(ByVal h As HANDLE, ByVal Type As UINT, ByVal cx As Long, ByVal cy As Long, ByVal flags As UINT) As HANDLE
F:DrawIconEx(ByVal hdc As HDC, ByVal xLeft As Long, ByVal yTop As Long, ByVal hIcon As HICON, ByVal cxWidth As Long, ByVal cyWidth As Long, ByVal istepIfAniCur As UINT, ByVal hbrFlickerFreeDraw As HBRUSH, ByVal diFlags As UINT) As WINBOOL
F:CreateIconIndirect(ByVal piconinfo As PICONINFO) As HICON
F:CopyIcon(ByVal hIcon As HICON) As HICON
F:GetIconInfo(ByVal hIcon As HICON, ByVal piconinfo As PICONINFO) As WINBOOL
F:IsDialogMessage(ByVal hDlg As HWnd, ByVal lpMsg As LPMSG) As WINBOOL
F:SetScrollInfo(ByVal HWnd As HWnd, ByVal nBar As Long, ByVal lpsi As LPCSCROLLINFO, ByVal redraw As WINBOOL) As Long
F:GetScrollInfo(ByVal HWnd As HWnd, ByVal nBar As Long, ByVal lpsi As LPSCROLLINFO) As WINBOOL
