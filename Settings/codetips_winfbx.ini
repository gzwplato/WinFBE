F:AfxWstrAlloc(BYREF wszStr AS WSTRING) AS WSTRING PTR
F:AfxGuid(BYVAL pwszGuidText AS WSTRING PTR = NULL) AS GUID
F:AfxGuidText(BYVAL classID AS CLSID PTR) AS STRING
F:AfxSafeRelease|AfxSafeRelease(BYREF pv AS ANY PTR) AS ULONG
F:AfxSafeAddRef(BYVAL pv AS ANY PTR) AS ULONG
F:acosh(BYVAL x AS DOUBLE) AS DOUBLE
F:asinh(BYVAL x AS DOUBLE) AS DOUBLE
F:atanh(BYVAL x AS DOUBLE) AS DOUBLE
F:hypot3(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE, BYVAL z AS DOUBLE) AS DOUBLE
F:isinf(BYVAL x AS DOUBLE) AS LONG
F:isinfinity(BYVAL x AS DOUBLE) AS LONG
F:CSet(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS _complex
F:CRect(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS _complex
F:CPolar(BYVAL r AS DOUBLE, BYVAL theta AS DOUBLE) AS _complex
F:CGetReal(BYREF z AS _complex) AS DOUBLE
F:CGetImag(BYREF z AS _complex) AS DOUBLE
F:CSetReal(BYREF z AS _complex, BYVAL x AS DOUBLE)
F:CSetImag(BYREF z AS _complex, BYVAL y AS DOUBLE)
F:CSwap(BYREF z1 AS _complex, BYREF z2 AS _complex)
F:CNeg(BYREF z AS _complex) AS _complex
F:CNegate(BYREF z AS _complex) AS _complex
F:CNegative(BYREF z AS _complex) AS _complex
F:CAddReal(BYREF z AS _complex, BYVAL x AS DOUBLE) AS _complex
F:CAddImag(BYREF z AS _complex, BYVAL y AS DOUBLE) AS _complex
F:CSubReal(BYREF z AS _complex, BYVAL x AS DOUBLE) AS _complex
F:CSubImag(BYREF z AS _complex, BYVAL y AS DOUBLE) AS _complex
F:CMulReal(BYREF z AS _complex, BYVAL x AS DOUBLE) AS _complex
F:CMulImag(BYREF z AS _complex, BYVAL y AS DOUBLE) AS _complex
F:CDivReal(BYREF z AS _complex, BYVAL x AS DOUBLE) AS _complex
F:CDivImag(BYREF z AS _complex, BYVAL y AS DOUBLE) AS _complex
F:CConj(BYREF z AS _complex) AS _complex
F:CConjugate(BYREF z AS _complex) AS _complex
F:CArg(BYREF z AS _complex) AS DOUBLE
F:CArgument(BYREF z AS _complex) AS DOUBLE
F:CPhase(BYREF z AS _complex) AS DOUBLE
F:CAbs(BYREF z AS _complex) AS DOUBLE
F:CMagnitude(BYREF z AS _complex) AS DOUBLE
F:CLogAbs(BYREF value AS _complex) AS DOUBLE
F:CAbs2(BYREF z AS _complex) AS DOUBLE
F:CNorm(BYREF z AS _complex) AS DOUBLE
F:CReciprocal(BYREF value AS _complex) AS _complex
F:CInverse(BYREF value AS _complex) AS _complex
F:CFromPolarCoordinates(BYVAL magnitude AS DOUBLE, BYVAL phase AS DOUBLE) AS _complex
F:CSqr(BYREF value AS _complex) AS _complex
F:CSqrt(BYREF value AS _complex) AS _complex
F:CSqrReal(BYVAL value AS DOUBLE) AS _complex
F:CExp(BYREF value AS _complex) AS _complex
F:CLog(BYREF value AS _complex) AS _complex
F:CLog10(BYREF value AS _complex) AS _complex
F:CPow(BYREF value AS _complex, BYREF power AS _complex) AS _complex
F:CSin(BYREF value AS _complex) AS _complex
F:CCos(BYREF value AS _complex) AS _complex
F:CSec(BYREF value AS _complex) AS _complex
F:CCsc(BYREF value AS _complex) AS _complex
F:CTan(BYREF value AS _complex) AS _complex
F:CCot(BYREF value AS _complex) AS _complex
F:CArcSinReal(BYVAL value AS DOUBLE) AS _complex
F:CASinReal(BYVAL value AS DOUBLE) AS _complex
F:CArcSin(BYREF value AS _complex) AS _complex
F:CASin(BYREF value AS _complex) AS _complex
F:CArcCosReal(BYVAL value AS DOUBLE) AS _complex
F:CACosReal(BYVAL value AS DOUBLE) AS _complex
F:CArcCos(BYREF value AS _complex) AS _complex
F:CACos(BYREF value AS _complex) AS _complex
F:CArcSecReal(BYVAL value AS DOUBLE) AS _complex
F:CASecReal(BYVAL value AS DOUBLE) AS _complex
F:CArcSec(BYREF value AS _complex) AS _complex
F:CASec(BYREF value AS _complex) AS _complex
F:CArcCscReal(BYVAL value AS DOUBLE) AS _complex
F:CACscReal(BYVAL value AS DOUBLE) AS _complex
F:CArcCsc(BYREF value AS _complex) AS _complex
F:CACsc(BYREF value AS _complex) AS _complex
F:CArcTan(BYREF value AS _complex) AS _complex
F:CATan(BYREF value AS _complex) AS _complex
F:CArcCot(BYREF value AS _complex) AS _complex
F:CACot(BYREF value AS _complex) AS _complex
F:CSinH(BYREF value AS _complex) AS _complex
F:CCosH(BYREF value AS _complex) AS _complex
F:CSecH(BYREF value AS _complex) AS _complex
F:CCscH(BYREF value AS _complex) AS _complex
F:CTanH(BYREF value AS _complex) AS _complex
F:CCotH(BYREF value AS _complex) AS _complex
F:CArcSinH(BYREF value AS _complex) AS _complex
F:CASinH(BYREF value AS _complex) AS _complex
F:CArcCoshReal(BYVAL value AS DOUBLE) AS _complex
F:CACoshReal(BYVAL value AS DOUBLE) AS _complex
F:CArcCosH(BYREF value AS _complex) AS _complex
F:CACosH(BYREF value AS _complex) AS _complex
F:CArcSecH(BYREF value AS _complex) AS _complex
F:CASecH(BYREF value AS _complex) AS _complex
F:CArcCscH(BYREF value AS _complex) AS _complex
F:CACscH(BYREF value AS _complex) AS _complex
F:CArcTanhReal(BYVAL value AS DOUBLE) AS _complex
F:CATanhReal(BYVAL value AS DOUBLE) AS _complex
F:CArcTanH(BYREF value AS _complex) AS _complex
F:CATanH(BYREF value AS _complex) AS _complex
F:CArcCotH(BYREF value AS _complex) AS _complex
F:CACotH(BYREF value AS _complex) AS _complex
F:CSgn(BYREF z AS _complex) AS LONG
F:CStr(BYREF z AS _complex) AS STRING
F:CStrPolar(BYREF z AS _complex) AS STRING
F:Button_Click(BYVAL hButton AS HWND)
F:Button_GetImage(BYVAL hButton AS HWND) AS HANDLE
F:Button_SetDontClick(BYVAL hButton AS HWND, BYVAL bState AS BOOL)
F:Button_SetBitmap(BYVAL hButton AS HWND, BYVAL hbmp AS HBITMAP) AS HBITMAP
F:Button_SetIcon(BYVAL hButton AS HWND, BYVAL hIcon AS HICON) AS HICON
F:Button_SetImage(BYVAL hButton AS HWND, BYVAL ImageType AS DWORD, BYVAL hImage AS HANDLE) AS HANDLE
F:Button_SetImageListXY(BYVAL hButton AS HWND, BYVAL himl AS HIMAGELIST, BYVAL nLeft AS LONG, BYVAL nTop AS LONG, BYVAL nRight AS LONG, BYVAL nBottom AS LONG, BYVAL uALign AS DWORD = 0) AS BOOLEAN
F:Button_DeleteBitmap(BYVAL hButton AS HWND) AS BOOLEAN
F:Button_DeleteIcon(BYVAL hButton AS HWND) AS BOOLEAN
F:Button_DeleteImage(BYVAL hButton AS HWND, BYVAL ImageType AS DWORD) AS BOOLEAN
F:AfxGetComboBoxText(BYVAL hComboBox AS HWND, BYVAL nIndex AS LONG) AS CWSTR
F:ComboBox_GetComboBoxInfo(BYVAL hComboBox AS HWND, BYVAL pcbi AS COMBOBOXINFO PTR) AS BOOLEAN
F:Combobox_CalcHorizontalExtent(BYVAL hComboBox AS HWND) AS LONG
F:ComboBox_GetEditBoxHandle(BYVAL hComboBox AS HWND) AS HWND
F:ComboBox_GetListBoxHandle(BYVAL hComboBox AS HWND) AS HWND
F:ComboBox_GetDroppedWidth(BYVAL hComboBox AS HWND) AS LONG
F:ComboBox_GetHorizontalExtent(BYVAL hComboBox AS HWND) AS LONG
F:ComboBox_GetLocale(BYVAL hComboBox AS HWND) AS LONG
F:ComboBox_GetTopIndex(BYVAL hComboBox AS HWND) AS LONG
F:ComboBox_InitStorage(BYVAL hComboBox AS HWND, BYVAL items AS LONG, BYVAL cb AS LONG) AS LONG
F:ComboBox_SetDroppedWidth(BYVAL hComboBox AS HWND, BYVAL nWidth AS LONG) AS LONG
F:ComboBox_SetHorizontalExtent(BYVAL hComboBox AS HWND, BYVAL nWidth AS LONG)
F:ComboBox_SetLocale(BYVAL hComboBox AS HWND, BYVAL lcid AS LONG) AS LONG
F:ComboBox_SetTopIndex(BYVAL hComboBox AS HWND, BYVAL index AS DWORD) AS LONG
F:ComboBoxEx_DeleteItem(BYVAL hComboboxEx AS HWND, BYVAL nIndex AS DWORD) AS INT_
F:ComboBoxEx_GetComboControl(BYVAL hComboboxEx AS HWND) AS HWND
F:ComboBoxEx_GetEditControl(BYVAL hComboboxEx AS HWND) AS HWND
F:ComboBoxEx_GetExtendedStyle(BYVAL hComboboxEx AS HWND) AS DWORD
F:ComboBoxEx_GetImageList(BYVAL hComboboxEx AS HWND) AS HIMAGELIST
F:ComboBoxEx_GetItem(BYVAL hComboboxEx AS HWND, BYVAL pCBItem AS COMBOBOXEXITEMW PTR) AS BOOLEAN
F:ComboBoxEx_GetUnicodeFormat(BYVAL hComboboxEx AS HWND) AS DWORD
F:ComboBoxEx_HasEditChanged(BYVAL hComboboxEx AS HWND) AS BOOLEAN
F:ComboBoxEx_InsertItem(BYVAL hComboboxEx AS HWND, BYVAL lpCBItem AS COMBOBOXEXITEMW PTR) AS LONG
F:ComboBoxEx_SetExtendedStyle(BYVAL hComboboxEx AS HWND, BYVAL dwExMask AS DWORD, BYVAL dwExStyle AS DWORD) AS DWORD
F:ComboBoxEx_SetImageList(BYVAL hComboboxEx AS HWND, BYVAL himl AS HIMAGELIST) AS HIMAGELIST
F:ComboBoxEx_SetItem(BYVAL hComboboxEx AS HWND, BYVAL lpCBItem AS COMBOBOXEXITEMW PTR) AS BOOLEAN
F:ComboBoxEx_SetUnicodeFormat(BYVAL hComboboxEx AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:ComboBoxEx_SetWindowTheme(BYVAL hComboboxEx AS HWND, BYVAL pwszStyle AS WSTRING PTR)
F:Edit_CharFromPos(BYVAL hEdit AS HWND, BYVAL x AS SHORT, BYVAL y AS SHORT) AS LONG
F:Edit_Clear(BYVAL hEdit AS HWND)
F:Edit_Copy(BYVAL hEdit AS HWND)
F:Edit_Cut(BYVAL hEdit AS HWND)
F:Edit_GetIMEStatus(BYVAL hEdit AS HWND, BYVAL nStatusType AS LONG) AS LONG
F:Edit_GetLimitText(BYVAL hEdit AS HWND) AS LONG
F:Edit_GetMargins(BYVAL hEdit AS HWND) AS DWORD
F:Edit_GetLeftMargin(BYVAL hEdit AS HWND) AS WORD
F:Edit_GetRightMargin(BYVAL hEdit AS HWND) AS WORD
F:Edit_GetSelStart(BYVAL hEdit AS HWND) AS WORD
F:Edit_GetSelEnd(BYVAL hEdit AS HWND) AS WORD
F:Edit_GetThumb(BYVAL hEdit AS HWND) AS LONG
F:Edit_LineScroll(BYVAL hEdit AS HWND, BYVAL x AS LONG, BYVAL y AS LONG) AS BOOLEAN
F:Edit_Paste(BYVAL hEdit AS HWND)
F:Edit_PosFromChar(BYVAL hEdit AS HWND, BYVAL index AS DWORD) AS LONG
F:Edit_SetCueBannerTextFocused(BYVAL hEdit AS HWND, BYVAL pwszText AS WSTRING PTR, BYVAL fDrawFocused AS LONG) AS BOOLEAN
F:Edit_SetIMEStatus(BYVAL hEdit AS HWND, BYVAL nStatusType AS LONG, BYVAL flags AS DWORD) AS DWORD
F:Edit_SetMargins(BYVAL hEdit AS HWND, BYVAL nMargins AS LONG, BYVAL nWidth AS LONG)
F:Edit_SetLeftMargin(BYVAL hEdit AS HWND, BYVAL nWidth AS WORD)
F:Edit_SetRightMargin(BYVAL hEdit AS HWND, BYVAL nWidth AS WORD)
F:Header_HitTest(BYVAL hwndHD AS HWND, BYVAL phdhti AS HDHITTESTINFO PTR) AS LONG
F:Header_GetItemWidth(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG) AS LONG
F:Header_SetItemWidth(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG, BYVAL nWidth AS LONG) AS BOOLEAN
F:Header_GetItemOrder(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG) AS LONG
F:Header_SetItemOrder(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG, BYVAL iOrder AS LONG) AS LONG
F:Header_GetItemText(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS BOOLEAN
F:Header_SetItemText(BYVAL hwndHD AS HWND, BYVAL nItem AS LONG, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:HotKey_GetHotKey(BYVAL hHotKey AS HWND) AS DWORD
F:HotKey_SetHotKey(BYVAL hHotKey AS HWND, BYVAL vkCode AS SHORT, BYVAL fMods AS SHORT)
F:HotKey_SetRules(BYVAL hHotKey AS HWND, BYVAL fwCombInv AS WORD, BYVAL fwModInv AS WORD)
F:ScrollBar_SetRangeRedraw(BYVAL hScrollBar AS HWND, BYVAL posMin AS LONG, BYVAL posMax AS LONG) AS LONG
F:SysLink_GetIdealHeight(BYVAL hLM AS HWND) AS LONG
F:Syslink_GetItem(BYVAL hLM AS HWND, BYVAL lpItem AS LITEM PTR) AS BOOLEAN
F:SysLink_HitTest(BYVAL hLM AS HWND, BYVAL lphti AS LHITTESTINFO PTR) AS BOOLEAN
F:SysLink_SetItem(BYVAL hLM AS HWND, BYVAL lpItem AS LITEM PTR) AS BOOLEAN
F:AfxGetListBoxText(BYVAL hListBox AS HWND, BYVAL nIndex AS LONG) AS CWSTR
F:ListBox_AddFile(BYVAL hListBox AS HWND, BYVAL pwszFileName AS WSTRING PTR) AS LONG
F:ListBox_GetAnchorIndex(BYVAL hListBox AS HWND) AS LONG
F:Listbox_GetListboxInfo(BYVAL hListBox AS HWND) AS LONG
F:ListBox_GetLocale(BYVAL hListBox AS HWND) AS LONG
F:Listbox_InitStorage(BYVAL hListBox AS HWND, BYVAL nItems AS DWORD, BYVAL nBytes AS DWORD) AS LONG
F:Listbox_ItemFromPoint(BYVAL hListBox AS HWND, BYVAL x AS SHORT, BYVAL y AS SHORT) AS LONG
F:Listbox_SelItemRangeEx(BYVAL hListBox AS HWND, BYVAL startIndex AS LONG, BYVAL endIndex AS LONG) AS LONG
F:ListBox_SetAnchorIndex(BYVAL hListBox AS HWND, BYVAL index AS LONG) AS LONG
F:Listbox_SetCount(BYVAL hListBox AS HWND, BYVAL nCount AS DWORD) AS LONG
F:ListBox_SetLocale(BYVAL hListBox AS HWND, BYVAL wLocaleID AS DWORD) AS LONG
F:ListBox_ReplaceString(BYVAL hListBox AS HWND, BYVAL index AS LONG, BYVAL pwszNewText AS WSTRING PTR, BYVAL pNewData AS LONG_PTR = 0) AS LONG
F:Listbox_CalcHorizontalExtent(BYVAL hListBox AS HWND) AS LONG
F:ListView_FindString(BYVAL hwndLV AS HWND, BYVAL pwszText AS WSTRING PTR) AS LONG
F:ListView_GetFocusedItem(BYVAL hwndLV AS HWND) AS LONG
F:ListView_GetISearchStringLen(BYVAL hwndLV AS HWND) AS LONG
F:ListView_HitTestEx(BYVAL hwndLV AS HWND, BYVAL pinfo AS LVHITTESTINFO PTR) AS LONG
F:ListView_GetSelection(BYVAL hwndLV AS HWND) AS LONG
F:ListView_SelectItem(BYVAL hwndLV AS HWND, BYVAL nIndex AS LONG)
F:ListView_SelectAllItems(BYVAL hwndLV AS HWND)
F:ListView_UnselectItem(BYVAL hwndLV AS HWND, BYVAL nIndex AS LONG)
F:ListView_UnselectAllItems(BYVAL hwndLV AS HWND)
F:ListView_MakeHeaderFlat(BYVAL hwndLV AS HWND)
F:ListView_FitContent(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG) AS BOOLEAN
F:ListView_AutoSizeColumns(BYVAL hwndLV AS HWND) AS BOOLEAN
F:ListView_FitHeader(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG) AS BOOLEAN
F:ListView_AutoSizeHeader(BYVAL hwndLV AS HWND) AS BOOLEAN
F:ListView_GetColumnCount(BYVAL hwndLV AS HWND) AS LONG
F:ListView_GetColumnOrder(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG) AS LONG
F:ListView_GetOrderArray(BYVAL hwndLV AS HWND, BYVAL nSize AS DWORD, BYVAL lpiArray AS LONG PTR) AS LONG
F:ListView_GetTooltipsFont(BYVAL hwndLV AS HWND) AS HFONT
F:ListView_SetTooltipsFont(BYVAL hwndLV AS HWND, BYVAL hFont AS HFONT = NULL, BYVAL fRedraw AS BOOLEAN = FALSE)
F:ListView_GetColumnText(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS BOOLEAN
F:ListView_GetHeaderText(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS LONG
F:ListView_AddColumn(BYVAL hwndLV AS HWND, BYVAL nCol AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL nWidth AS LONG, BYVAL nFormat AS LONG = 0) AS LONG
F:ListView_AddItem(BYVAL hwndLV AS HWND, BYVAL nItem AS LONG, BYVAL nImage AS LONG, BYVAL pwszText AS WSTRING PTR) AS LONG
F:ListView_AppendItem(BYVAL hwndLV AS HWND, BYVAL nImage AS LONG, BYVAL pwszText AS WSTRING PTR) AS LONG
F:Rebar_BeginDrag(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL dwPos AS DWORD)
F:Rebar_DeleteBand(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD) AS BOOLEAN
F:Rebar_DragMove(BYVAL hRebar AS HWND, BYVAL dwPos AS DWORD)
F:Rebar_EndDrag(BYVAL hRebar AS HWND)
F:Rebar_GetBandBorders(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL lprc AS RECT PTR)
F:AfxGetRebarBandRect(BYVAL hRebar AS HWND, BYVAL nBand AS LONG) AS RECT
F:Rebar_GetBandCount(BYVAL hRebar AS HWND) AS DWORD
F:Rebar_GetBandInfo(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL lprbbi AS REBARBANDINFOW PTR) AS BOOLEAN
F:AfxGetRebarBandInfo(BYVAL hRebar AS HWND, BYVAL nBand AS LONG) AS REBARBANDINFOW
F:Rebar_GetBandMargins(BYVAL hRebar AS HWND, BYVAL pMargins AS MARGINS PTR)
F:Rebar_GetBarHeight(BYVAL hRebar AS HWND) AS DWORD
F:Rebar_GetBarInfo(BYVAL hRebar AS HWND, BYVAL lprbi AS REBARINFO PTR) AS BOOLEAN
F:Rebar_GetBkColor(BYVAL hRebar AS HWND) AS COLORREF
F:Rebar_GetColorScheme(BYVAL hRebar AS HWND, BYVAL lpcs AS COLORSCHEME PTR) AS BOOLEAN
F:Rebar_GetDropTarget(BYVAL hRebar AS HWND) AS IDropTarget PTR
F:Rebar_GetExtendedStyle(BYVAL hRebar AS HWND) AS DWORD
F:Rebar_GetPalette(BYVAL hRebar AS HWND) AS DWORD
F:Rebar_GetRect(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL lprc AS RECT PTR) AS BOOLEAN
F:Rebar_GetRowCount(BYVAL hRebar AS HWND) AS DWORD
F:Rebar_GetRowHeight(BYVAL hRebar AS HWND, BYVAL uRow AS DWORD) AS DWORD
F:Rebar_GetTextColor(BYVAL hRebar AS HWND) AS COLORREF
F:Rebar_GetTooltips(BYVAL hRebar AS HWND) AS HWND
F:Rebar_GetUnicodeFormat(BYVAL hRebar AS HWND) AS LONG
F:Rebar_HitTest(BYVAL hRebar AS HWND, BYVAL lprhbt AS RBHITTESTINFO PTR) AS LONG
F:Rebar_IdToIndex(BYVAL hRebar AS HWND, BYVAL uBandID AS DWORD) AS LONG
F:Rebar_InsertBand(BYVAL hRebar AS HWND, BYVAL nIndex AS LONG, BYVAL lprbbi AS REBARBANDINFOW PTR) AS BOOLEAN
F:Rebar_MaximizeBand(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL fIdeal AS DWORD)
F:Rebar_MinimizeBand(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD)
F:Rebar_MoveBand(BYVAL hRebar AS HWND, BYVAL nFrom AS DWORD, BYVAL nTo AS DWORD) AS BOOLEAN
F:Rebar_PushChevron(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL iAppValue AS DWORD)
F:Rebar_SetBandInfo(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL lprbbi AS REBARBANDINFOW PTR) AS BOOLEAN
F:Rebar_SetBandWidth(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL nWidth AS DWORD) AS BOOLEAN
F:Rebar_SetBarInfo(BYVAL hRebar AS HWND, BYVAL lprbi AS REBARINFO PTR) AS BOOLEAN
F:Rebar_SetBkColor(BYVAL hRebar AS HWND, BYVAL clrBk AS DWORD) AS DWORD
F:Rebar_SetColorScheme(BYVAL hRebar AS HWND, BYVAL lpcs AS COLORSCHEME PTR)
F:Rebar_SetPalette(BYVAL hRebar AS HWND, BYVAL hpal AS HPALETTE) AS HPALETTE
F:Rebar_SetParent(BYVAL hRebar AS HWND, BYVAL hwndParent AS hWND) AS HWND
F:Rebar_SetTextColor(BYVAL hRebar AS HWND, BYVAL clrText AS COLORREF) AS COLORREF
F:Rebar_SetTooltips(BYVAL hRebar AS HWND, BYVAL hwndToolTip AS HWND)
F:Rebar_SetUnicodeFormat(BYVAL hRebar AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:Rebar_SetWindowTheme(BYVAL hRebar AS HWND, BYVAL pwszTheme AS WSTRING PTR)
F:Rebar_ShowBand(BYVAL hRebar AS HWND, BYVAL uBand AS DWORD, BYVAL fShow AS DWORD) AS BOOLEAN
F:Rebar_SizeToRect(BYVAL hRebar AS HWND, BYVAL prc AS RECT PTR) AS BOOLEAN
F:Static_SetImage(BYVAL hStatic AS HWND, BYVAL nType AS LONG, BYVAL hImage AS HANDLE) AS HANDLE
F:Static_DeleteImage(BYVAL hStatic AS HWND, BYVAL nType AS LONG) AS BOOLEAN
F:Static_GetImage(BYVAL hStatic AS HWND, BYVAL nType AS LONG) AS HANDLE
F:Static_SetBitmap(BYVAL hStatic AS HWND, BYVAL hBitmap AS HBITMAP) AS HBITMAP
F:Static_DeleteIcon(BYVAL hStatic AS HWND) AS BOOLEAN
F:Static_DeleteBitmap(BYVAL hStatic AS HWND) AS BOOLEAN
F:Static_SetCursor(BYVAL hStatic AS HWND, BYVAL hCursor AS HCURSOR) AS HCURSOR
F:Static_DeleteCursor(BYVAL hStatic AS HWND) AS BOOLEAN
F:Static_SetEnhancedMetafile(BYVAL hStatic AS HWND, BYVAL hEnhMetafile AS HENHMETAFILE) AS HENHMETAFILE
F:Static_DeleteEnhancedMetafile(BYVAL hStatic AS HWND) AS BOOLEAN
F:Toolbar_AddBitmap(BYVAL hToolBar AS HWND, BYVAL nButtons AS DWORD, BYVAL tabm AS TBADDBITMAP PTR) AS LONG
F:Toolbar_AddButtons(BYVAL hToolBar AS HWND, BYVAL nButtons AS DWORD, BYVAL lpButtons AS TBBUTTON PTR) AS BOOLEAN
F:Toolbar_AddButton(BYVAL hToolBar AS HWND, BYVAL idxBitmap AS LONG, BYVAL idCommand AS LONG, BYVAL fsState AS UBYTE = 0, BYVAL fsStyle AS UBYTE = 0, BYVAL dwData AS DWORD_PTR = 0, BYVAL pwszText AS WSTRING PTR = NULL) AS BOOLEAN
F:Toolbar_AddSeparator(BYVAL hToolBar AS HWND, BYVAL nWidth AS LONG = 0) AS BOOLEAN
F:Toolbar_InsertButton(BYVAL hToolBar AS HWND, BYVAL idxButton AS LONG, BYVAL idxBitmap AS LONG, BYVAL idCommand AS LONG, BYVAL fsState AS UBYTE = 0, BYVAL fsStyle AS UBYTE = 0, BYVAL dwData AS DWORD_PTR = 0, BYVAL pwszText AS WSTRING PTR = NULL) AS BOOLEAN
F:Toolbar_InsertSeparator(BYVAL hToolBar AS HWND, BYVAL idxButton AS LONG, BYVAL nWidth AS LONG = 0) AS BOOLEAN
F:Toolbar_AddString(BYVAL hToolBar AS HWND, BYVAL hInst AS HINSTANCE, BYVAL idString AS INT_PTR) AS LONG
F:Toolbar_AutoSize(BYVAL hToolBar AS HWND)
F:Toolbar_ButtonCount(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_ButtonStructSize(BYVAL hToolBar AS HWND, BYVAL cb AS LONG)
F:Toolbar_ChangeBitmap(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL iBitmap AS WORD) AS BOOLEAN
F:Toolbar_CheckButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fCheck AS SHORT) AS BOOLEAN
F:Toolbar_CommandToIndex(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS LONG
F:Toolbar_Customize(BYVAL hToolBar AS HWND)
F:Toolbar_DeleteButton(BYVAL hToolBar AS HWND, BYVAL nButton AS LONG) AS BOOLEAN
F:Toolbar_EnableButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_DisableButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_GetAnchorHighlight(BYVAL hToolBar AS HWND) AS BOOLEAN
F:Toolbar_GetBitmap(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS LONG
F:Toolbar_GetBitmapFlags(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetButton(BYVAL hToolBar AS HWND, BYVAL nButton AS LONG, BYVAL ptbb AS TBBUTTON PTR) AS BOOLEAN
F:Toolbar_GetButtonSize(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetButtonHeight(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetButtonWidth(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetButtonInfo(BYVAL hToolBar AS HWND, BYVAL iID AS LONG, BYVAL lptbbi AS TBBUTTONINFOW PTR) AS LONG
F:Toolbar_GetColorScheme(BYVAL hToolBar AS HWND, BYVAL lpcs AS COLORSCHEME PTR) AS BOOLEAN
F:Toolbar_GetImageList(BYVAL hToolBar AS HWND) AS HIMAGELIST
F:Toolbar_GetDisabledImageList(BYVAL hToolBar AS HWND) AS HIMAGELIST
F:Toolbar_GetHotImageList(BYVAL hToolBar AS HWND) AS HIMAGELIST
F:Toolbar_GetExtendedStyle(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetHorizontalPadding(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetVerticalPadding(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetHotItem(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetInsertMark(BYVAL hToolBar AS HWND, BYVAL ptbim AS TBINSERTMARK PTR) AS LONG
F:Toolbar_GetInsertMarkColor(BYVAL hToolBar AS HWND) AS COLORREF
F:Toolbar_GetItemRect(BYVAL hToolBar AS HWND, BYVAL nButton AS LONG, BYVAL lprc AS RECT PTR) AS BOOLEAN
F:Toolbar_GetMaxSize(BYVAL hToolBar AS HWND, BYVAL psize AS SIZE PTR) AS BOOLEAN
F:Toolbar_GetMetrics(BYVAL hToolBar AS HWND, BYVAL ptbMetrics AS TBMETRICS PTR)
F:Toolbar_GetPadding(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetRect(BYVAL hToolBar AS HWND, BYVAL iID AS LONG, BYVAL lprc AS RECT PTR) AS BOOLEAN
F:Toolbar_GetRows(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetState(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS DWORD
F:Toolbar_GetString(BYVAL hToolBar AS HWND, BYVAL iString AS SHORT, BYVAL pBuffer AS WSTRING PTR, BYVAL cchMax AS SHORT) AS LONG
F:Toolbar_GetStyle(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetTextRows(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_GetTooltips(BYVAL hToolBar AS HWND) AS HWND
F:Toolbar_GetUnicodeFormat(BYVAL hToolBar AS HWND) AS DWORD
F:Toolbar_HideButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fShow AS SHORT) AS BOOLEAN
F:Toolbar_HitTest(BYVAL hToolBar AS HWND, BYVAL pptHitTest AS POINT PTR) AS LONG
F:Toolbar_Indeterminate(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fIndeterminate AS SHORT) AS BOOLEAN
F:Toolbar_InsertMarkHitTest(BYVAL hToolBar AS HWND, BYVAL lppt AS POINT PTR, BYVAL lptbim AS TBINSERTMARK PTR) AS BOOLEAN
F:Toolbar_IsButtonChecked(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_IsButtonEnabled(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_IsButtonHidden(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_IsButtonHighlighted(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_IsButtonIndeterminate(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_IsButtonPressed(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS BOOLEAN
F:Toolbar_LoadImages(BYVAL hToolBar AS HWND, BYVAL iBitmapID AS DWORD, BYVAL hinst AS HINSTANCE) AS LONG
F:Toolbar_MapAccelerator(BYVAL hToolBar AS HWND, BYVAL chAccel AS DWORD, BYVAL pIDBtn AS DWORD PTR) AS BOOLEAN
F:Toolbar_MarkButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fHighlight AS SHORT) AS BOOLEAN
F:Toolbar_MoveButton(BYVAL hToolBar AS HWND, BYVAL uOldPos AS DWORD, BYVAL uNewPos AS DWORD) AS BOOLEAN
F:Toolbar_PressButton(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fPress AS SHORT) AS BOOLEAN
F:Toolbar_ReplaceBitmap(BYVAL hToolBar AS HWND, BYVAL ptbrb AS TBREPLACEBITMAP PTR) AS BOOLEAN
F:Toolbar_SaveRestore(BYVAL hToolBar AS HWND, BYVAL fSave AS LONG, BYVAL ptbsp AS TBSAVEPARAMSW PTR)
F:Toolbar_SetAnchorHighlight(BYVAL hToolBar AS HWND, BYVAL fAnchor AS BOOLEAN) AS BOOLEAN
F:Toolbar_SetBitmapSize(BYVAL hToolBar AS HWND, BYVAL dxBitmap AS SHORT, BYVAL dyBitmap AS SHORT) AS BOOLEAN
F:Toolbar_SetButtonInfo(BYVAL hToolBar AS HWND, BYVAL iID AS LONG, BYVAL lptbbi AS TBBUTTONINFOW PTR) AS BOOLEAN
F:Toolbar_SetButtonSize(BYVAL hToolBar AS HWND, BYVAL dxButton AS SHORT, BYVAL dyButton AS SHORT) AS BOOLEAN
F:Toolbar_SetButtonWidth(BYVAL hToolBar AS HWND, BYVAL cxMin AS SHORT, BYVAL cxMax AS SHORT) AS BOOLEAN
F:Toolbar_SetCmdId(BYVAL hToolBar AS HWND, BYVAL index AS SHORT, BYVAL cmdid AS SHORT) AS BOOLEAN
F:Toolbar_SetColorScheme(BYVAL hToolBar AS HWND, BYVAL lpcs AS COLORSCHEME PTR)
F:Toolbar_SetImageList(BYVAL hToolBar AS HWND, BYVAL himlNew AS HIMAGELIST) AS HIMAGELIST
F:Toolbar_SetHotImageList(BYVAL hToolBar AS HWND, BYVAL himlNewHot AS HIMAGELIST) AS HIMAGELIST
F:Toolbar_SetDisabledImageList(BYVAL hToolBar AS HWND, BYVAL himlNewDisabled AS HIMAGELIST) AS HIMAGELIST
F:Toolbar_SetPressedImageList(BYVAL hToolBar AS HWND, BYVAL iImageID AS DWORD, BYVAL himlNew AS HIMAGELIST) AS HIMAGELIST
F:Toolbar_SetDrawTextFlags(BYVAL hToolBar AS HWND, BYVAL dwMask AS DWORD, BYVAL dwDTFlags AS DWORD) AS DWORD
F:Toolbar_SetExtendedStyle(BYVAL hToolBar AS HWND, BYVAL dwExStyle AS DWORD) AS DWORD
F:Toolbar_SetHotItem(BYVAL hToolBar AS HWND, BYVAL iHot AS LONG) AS LONG
F:Toolbar_SetIndent(BYVAL hToolBar AS HWND, BYVAL iIndent AS LONG) AS BOOLEAN
F:Toolbar_SetInsertMark(BYVAL hToolBar AS HWND, BYVAL lptbim AS TBINSERTMARK PTR)
F:Toolbar_SetInsertMarkColor(BYVAL hToolBar AS HWND, BYVAL clrInsertMark AS COLORREF) AS COLORREF
F:Toolbar_SetListGap(BYVAL hToolBar AS HWND, BYVAL gap AS DWORD)
F:Toolbar_SetMaxTextRows(BYVAL hToolBar AS HWND, BYVAL iMaxRows AS LONG) AS BOOLEAN
F:Toolbar_SetMetrics(BYVAL hToolBar AS HWND, BYVAL ptbMetrics AS TBMETRICS PTR)
F:Toolbar_SetPadding(BYVAL hToolBar AS HWND, BYVAL cx AS SHORT, BYVAL cy AS SHORT) AS DWORD
F:Toolbar_SetParent(BYVAL hToolBar AS HWND, BYVAL hwndParent AS HWND) AS HWND
F:Toolbar_SetRows(BYVAL hToolBar AS HWND, BYVAL cRows AS WORD, BYVAL fLarger AS BOOLEAN, BYVAL lprc AS RECT PTR)
F:Toolbar_SetState(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL fState AS SHORT) AS BOOLEAN
F:Toolbar_SetStyle(BYVAL hToolBar AS HWND, BYVAL dwStyle AS DWORD)
F:Toolbar_SetToolTips(BYVAL hToolBar AS HWND, BYVAL hwndToolTip AS HWND)
F:Toolbar_SetUnicodeFormat(BYVAL hToolBar AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:Toolbar_SetWindowTheme(BYVAL hToolBar AS HWND, BYVAL pwszTheme AS WSTRING PTR)
F:Toolbar_MakeOpaque(BYVAL hToolBar AS HWND)
F:Toolbar_GetObject(BYVAL hToolBar AS HWND) AS IDropTarget PTR
F:Toolbar_GetButtonText(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG, BYVAL pBuffer AS WSTRING PTR) AS LONG
F:Toolbar_ButtonGetTextLength(BYVAL hToolBar AS HWND, BYVAL idButton AS LONG) AS LONG
F:TreeView_GetItemEx(BYVAL hwndTV AS HWND, BYVAL pitem AS TVITEMEXW PTR) AS BOOLEAN
F:TreeView_AddItem(BYVAL hwndTV AS HWND, BYVAL hParent AS HTREEITEM, BYVAL hInsertAfter AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0, BYVAL iImage AS LONG = 0, BYVAL iSelectedImage AS LONG = 0) AS HTREEITEM
F:TreeView_AppendItem(BYVAL hwndTV AS HWND, BYVAL hParent AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0, BYVAL iImage AS LONG = 0, BYVAL iSelectedImage AS LONG = 0) AS HTREEITEM
F:TreeView_InsertFirstItem(BYVAL hwndTV AS HWND, BYVAL hParent AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0, BYVAL iImage AS LONG = 0, BYVAL iSelectedImage AS LONG = 0) AS HTREEITEM
F:TreeView_AddRootItem(BYVAL hwndTV AS HWND, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0, BYVAL iImage AS LONG = 0, BYVAL iSelectedImage AS LONG = 0) AS HTREEITEM
F:TreeView_InsertSortedItem(BYVAL hwndTV AS HWND, BYVAL hParent AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0, BYVAL iImage AS LONG = 0, BYVAL iSelectedImage AS LONG = 0) AS HTREEITEM
F:TreeView_GetBold(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM) AS BOOLEAN
F:TreeView_IsItemChecked(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM) AS BOOLEAN
F:TreeView_GetISearchStringLen(BYVAL hwndTV AS HWND) AS LONG
F:TreeView_GetlParam(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM) AS LPARAM
F:TreeView_SetBold(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM, BYVAL fBold AS BOOLEAN)
F:TreeView_SetItemEx(BYVAL hwndTV AS HWND, BYVAL pitem AS TVITEMEXW PTR) AS BOOLEAN
F:TreeView_SetItemText(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:TreeView_ExpandChildItems(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_ExpandSiblings(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_ExpandAllChildItems(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_ExpandAllItems(BYVAL hwndTV AS HWND)
F:TreeView_CollapseChildItems(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_CollapseSiblings(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_CollapseAllChildItems(BYVAL hwndTV AS HWND, BYVAL hNode AS HTREEITEM)
F:TreeView_CollapseAllItems(BYVAL hwndTV AS HWND)
F:TreeView_GetItemText(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL cchtextmax AS LONG) AS BOOLEAN
F:TreeView_GetParentText(BYVAL hwndTV AS HWND, BYVAL hItem AS HTREEITEM, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS BOOLEAN
F:TreeView_ItemExists(BYVAL hTreeView AS HWND, BYVAL hNode AS HTREEITEM, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:TreeView_ItemExistsIgnoreCase(BYVAL hTreeView AS HWND, BYVAL hNode AS HTREEITEM, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:TaskDialog_ClickButton(BYVAL hTaskDlg AS HWND, BYVAL nButton AS DWORD)
F:TaskDialog_ClickRadioButton(BYVAL hTaskDlg AS HWND, BYVAL nRadioButton AS DWORD)
F:TaskDialog_ClickVerification(BYVAL hTaskDlg AS HWND, BYVAL fChecked AS LONG, BYVAL fFocused AS LONG)
F:TaskDialog_EnableButton(BYVAL hTaskDlg AS HWND, BYVAL nButton AS LONG, BYVAL fEnable AS LONG)
F:TaskDialog_EnableRadioButton(BYVAL hTaskDlg AS HWND, BYVAL nRadioButton AS LONG, BYVAL fEnable AS LONG)
F:TaskDialog_NavigatePage(BYVAL hTaskDlg AS HWND, BYVAL pTaskConfig AS TASKDIALOGCONFIG PTR)
F:TaskDialog_SetButtonElevationRequiredState(BYVAL hTaskDlg AS HWND, BYVAL nButton AS LONG, BYVAL fElevation AS LONG)
F:TaskDialog_SetElementText(BYVAL hTaskDlg AS HWND, BYVAL eElement AS LONG, BYVAL pszNewText AS WSTRING PTR)
F:TaskDialog_SetMarqueeProgressBar(BYVAL hTaskDlg AS HWND, BYVAL fMarquee AS BOOLEAN)
F:TaskDialog_SetProgressBarMarquee(BYVAL hTaskDlg AS HWND, BYVAL fMarquee AS LONG, BYVAL nSpeed AS LONG)
F:TaskDialog_SetProgressBarPos(BYVAL hTaskDlg AS HWND, BYVAL nNewPos AS LONG) AS LONG
F:TaskDialog_SetProgressBarRange(BYVAL hTaskDlg AS HWND, BYVAL nMinRange AS SHORT, BYVAL nMaxRange AS SHORT) AS DWORD
F:TaskDialog_SetProgressBarState(BYVAL hTaskDlg AS HWND, BYVAL nNewState AS LONG) AS LONG
F:TaskDialog_UpdateElementText(BYVAL hTaskDlg AS HWND, BYVAL eElement AS LONG, BYVAL pszNewText AS WSTRING PTR)
F:TaskDialog_UpdateIcon(BYVAL hTaskDlg AS HWND, BYVAL nIconElement AS LONG, BYVAL idResource AS DWORD)
F:IPAddress_ClearAddress(BYVAL hIPM AS HWND)
F:IPAddress_GetAddress(BYVAL hIPM AS HWND, BYVAL pdwAddr AS DWORD PTR) AS LONG
F:IPAddress_IsBlank(BYVAL hIPM AS HWND)
F:IPAddress_SetAddress(BYVAL hIPM AS HWND, BYVAL dwAddr AS DWORD)
F:IPAddress_SetFocus(BYVAL hIPM AS HWND, BYVAL nField AS LONG)
F:IPAddress_SetRange(BYVAL hIPM AS HWND, BYVAL nField AS LONG, BYVAL loRange AS BYTE, BYVAL hiRange AS BYTE) AS BOOLEAN
F:ProgressBar_DeltaPos(BYVAL hProgress AS HWND, BYVAL nIncrement AS LONG) AS LONG
F:ProgressBar_GetHighLimit(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_GetLowLimit(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_GetMaxRange(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_GetMinRange(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_GetPos(BYVAL hProgress AS HWND) AS DWORD
F:ProgressBar_GetRange(BYVAL hProgress AS HWND, BYVAL fWhichLimit AS DWORD, BYVAL ppBRange AS PBRANGE PTR) AS LONG
F:ProgressBar_IncPos(BYVAL hProgress AS HWND, BYVAL nIncVal AS LONG) AS LONG
F:ProgressBar_SetBarColor(BYVAL hProgress AS HWND, BYVAL clrBar AS COLORREF) AS COLORREF
F:ProgressBar_SetBkColor(BYVAL hProgress AS HWND, BYVAL clrBk AS COLORREF) AS COLORREF
F:ProgressBar_SetMarquee(BYVAL hProgress AS HWND, BYVAL fOn AS LONG, BYVAL dwAnimationSpeed AS DWORD) AS LONG
F:ProgressBar_SetMarqueeOff(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_SetMarqueeOn(BYVAL hProgress AS HWND, BYVAL dwAnimationSpeed AS DWORD) AS LONG
F:ProgressBar_SetPos(BYVAL hProgress AS HWND, BYVAL nNewPos AS LONG) AS LONG
F:ProgressBar_SetRange(BYVAL hProgress AS HWND, BYVAL nMinRange AS WORD, BYVAL nMaxRange AS WORD) AS DWORD
F:ProgressBar_SetRange32(BYVAL hProgress AS HWND, BYVAL nMinRange AS LONG, BYVAL nMaxRange AS LONG) AS DWORD
F:ProgressBar_SetStep(BYVAL hProgress AS HWND, BYVAL nStepInc AS LONG) AS LONG
F:ProgressBar_StepIt(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_GetBarColor(BYVAL hProgress AS HWND) AS COLORREF
F:ProgressBar_GetBkColor(BYVAL hProgress AS HWND) AS COLORREF
F:ProgressBar_GetState(BYVAL hProgress AS HWND) AS LONG
F:ProgressBar_SetState(BYVAL hProgress AS HWND, BYVAL iState AS LONG) AS LONG
F:StatusBar_GetBorders(BYVAL hStatusBar AS HWND, BYVAL rgBorders AS LONG PTR) AS LONG
F:StatusBar_GetHeight(BYVAL hStatusBar AS HWND) AS LONG
F:StatusBar_GetIcon(BYVAL hStatusBar AS HWND, BYVAL nPart AS DWORD) AS HICON
F:StatusBar_GetParts(BYVAL hStatusBar AS HWND, BYVAL nParts AS DWORD, BYVAL rgRightCoords AS LONG PTR) AS LONG
F:StatusBar_GetPartsCount(BYVAL hStatusBar AS HWND) AS DWORD
F:StatusBar_GetRect(BYVAL hStatusBar AS HWND, BYVAL nPart AS DWORD, BYVAL lprc AS RECT PTR) AS LONG
F:StatusBar_GetTextDrawingMode(BYVAL hStatusBar AS HWND, BYVAL nPart AS DWORD) AS LONG
F:StatusBar_GetTextLength(BYVAL hStatusBar AS HWND, BYVAL nPart AS DWORD) AS LONG
F:StatusBar_GetTipText(BYVAL hStatusBar AS HWND, BYVAL nPart AS WORD, BYVAL pwszText AS WSTRING PTR, BYVAL wMaxLen AS WORD)
F:StatusBar_GetUnicodeFormat(BYVAL hStatusBar AS HWND) AS DWORD
F:StatusBar_IsSimple(BYVAL hStatusBar AS HWND) AS BOOLEAN
F:StatusBar_SetBkColor(BYVAL hStatusBar AS HWND, BYVAL clrBk AS COLORREF) AS COLORREF
F:StatusBar_SetFont(BYVAL hStatusBar AS HWND, BYVAL hFont AS DWORD, BYVAL fRedraw AS LONG = FALSE)
F:StatusBar_SetIcon(BYVAL hStatusBar AS HWND, BYVAL nPart AS LONG, BYVAL hIcon AS HICON) AS BOOLEAN
F:StatusBar_SetMinHeight(BYVAL hStatusBar AS HWND, BYVAL minHeight AS DWORD)
F:StatusBar_SetParts(BYVAL hStatusBar AS HWND, BYVAL dwParts AS DWORD, BYVAL rgWidths AS LONG PTR) AS BOOLEAN
F:StatusBar_SetText(BYVAL hStatusBar AS HWND, BYVAL nPart AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL uType AS DWORD = 0) AS BOOLEAN
F:StatusBar_SetTipText(BYVAL hStatusBar AS HWND, BYVAL nPart AS LONG, BYVAL pwszTipText AS WSTRING PTR)
F:StatusBar_SetUnicodeFormat(BYVAL hStatusBar AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:StatusBar_Simple(BYVAL hStatusBar AS HWND, BYVAL fSimple AS BOOLEAN)
F:StatusBar_GetText(BYVAL hStatusBar AS HWND, BYVAL nPart AS DWORD, BYVAL pwszText AS WSTRING PTR) AS DWORD
F:AfxGetStatusBarRect(BYVAL hStatusBar AS HWND, BYVAL nPart AS LONG) AS RECT
F:TabCtrl_InsertTab(BYVAL hwndTab AS HWND, BYVAL nTabIndex AS DWORD, BYVAL iImage AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0) AS LONG
F:TabCtrl_AddTab(BYVAL hwndTab AS HWND, BYVAL iImage AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL lParam AS LPARAM = 0) AS LONG
F:TabCtrl_GetText(BYVAL hwndTab AS HWND, BYVAL nTabIndex AS DWORD, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS BOOLEAN
F:TabCtrl_SetText(BYVAL hwndTab AS HWND, BYVAL nTabIndex AS DWORD, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:TabCtrl_GetImageIndex(BYVAL hwndTab AS HWND, BYVAL iItem AS DWORD) AS LONG
F:TabCtrl_SetImageIndex(BYVAL hwndTab AS HWND, BYVAL iItem AS DWORD, BYVAL iImage AS LONG) AS BOOLEAN
F:Trackbar_ClearSel(BYVAL hTrackbar AS HWND, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_ClearTics(BYVAL hTrackbar AS HWND, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_GetBuddy(BYVAL hTrackbar AS HWND, BYVAL fLocation AS LONG) AS HWND
F:Trackbar_GetChannelRect(BYVAL hTrackbar AS HWND, BYVAL lprc AS RECT PTR)
F:Trackbar_GetLineSize(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetNumTics(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetPageSize(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetPos(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetPTics(BYVAL hTrackbar AS HWND) AS DWORD
F:Trackbar_GetRangeMax(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetRangeMin(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetSelEnd(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetSelStart(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetThumbLength(BYVAL hTrackbar AS HWND) AS LONG
F:Trackbar_GetThumbRect(BYVAL hTrackbar AS HWND, BYVAL lprc AS RECT PTR)
F:Trackbar_GetTic(BYVAL hTrackbar AS HWND, BYVAL iTic AS DWORD) AS LONG
F:Trackbar_GetTicPos(BYVAL hTrackbar AS HWND, BYVAL iTic AS DWORD) AS LONG
F:Trackbar_GetTooltips(BYVAL hTrackbar AS HWND) AS HWND
F:Trackbar_GetUnicodeFormat(BYVAL hTrackbar AS HWND) AS DWORD
F:Trackbar_SetBuddy(BYVAL hTrackbar AS HWND, BYVAL fLocation AS LONG, BYVAL hwndBuddy AS HWND) AS HWND
F:Trackbar_SetLineSize(BYVAL hTrackbar AS HWND, BYVAL lLineSize AS LONG) AS LONG
F:Trackbar_SetPageSize(BYVAL hTrackbar AS HWND, BYVAL lPageSize AS LONG) AS LONG
F:Trackbar_SetPos(BYVAL hTrackbar AS HWND, BYVAL fPosition AS LONG, BYVAL lPosition AS LONG)
F:Trackbar_SetRange(BYVAL hTrackbar AS HWND, BYVAL lMinimum AS LONG, BYVAL lMaximum AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetRangeMax(BYVAL hTrackbar AS HWND, BYVAL lMaximum AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetRangeMin(BYVAL hTrackbar AS HWND, BYVAL lMinimum AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetSel(BYVAL hTrackbar AS HWND, BYVAL lMinimum AS LONG, BYVAL lMaximum AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetSelEnd(BYVAL hTrackbar AS HWND, BYVAL lEnd AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetSelStart(BYVAL hTrackbar AS HWND, BYVAL lStart AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Trackbar_SetThumbLength(BYVAL hTrackbar AS HWND, BYVAL iLength AS LONG)
F:Trackbar_SetTic(BYVAL hTrackbar AS HWND, BYVAL lPosition AS LONG) AS BOOLEAN
F:Trackbar_SetTicFreq(BYVAL hTrackbar AS HWND, BYVAL wFreq AS WORD)
F:Trackbar_SetTipSide(BYVAL hTrackbar AS HWND, BYVAL fLocation AS LONG) AS LONG
F:Trackbar_SetToolTips(BYVAL hTrackbar AS HWND, BYVAL hwndTT AS HWND)
F:Trackbar_SetUnicodeFormat(BYVAL hTrackbar AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:UpDown_GetAccel(BYVAL hUDM AS HWND, BYVAL cAccels AS DWORD, BYVAL paAccels AS UDACCEL PTR) AS LONG
F:UpDown_GetBase(BYVAL hUDM AS HWND) AS LONG
F:UpDown_GetBuddy(BYVAL hUDM AS HWND) AS HWND
F:UpDown_GetPos(BYVAL hUDM AS HWND) AS LONG
F:UpDown_GetPos32(BYVAL hUDM AS HWND, BYVAL pfError AS LONG PTR = NULL) AS LONG
F:UpDown_GetRange(BYVAL hUDM AS HWND) AS LONG
F:UpDown_GetRange32(BYVAL hUDM AS HWND, BYVAL pLow AS WORD PTR, BYVAL pHigh AS WORD PTR)
F:UpDown_GetUnicodeFormat(BYVAL hUDM AS HWND) AS DWORD
F:UpDown_SetAccel(BYVAL hUDM AS HWND, BYVAL cAccels AS DWORD, BYREF paAccels AS UDACCEL PTR) AS BOOLEAN
F:UpDown_SetBase(BYVAL hUDM AS HWND, BYVAL nBase AS LONG) AS LONG
F:UpDown_SetBuddy(BYVAL hUDM AS HWND, BYVAL hwndBuddy AS HWND) AS HWND
F:UpDown_SetPos(BYVAL hUDM AS HWND, BYVAL nPos AS SHORT) AS LONG
F:UpDown_SetPos32(BYVAL hUDM AS HWND, BYVAL nPos AS LONG) AS LONG
F:UpDown_SetRange(BYVAL hUDM AS HWND, BYVAL nUpper AS SHORT, BYVAL nLower AS SHORT)
F:UpDown_SetRange32(BYVAL hUDM AS HWND, BYVAL iLow AS LONG, BYVAL iHigh AS LONG)
F:UpDown_SetUnicodeFormat(BYVAL hUDM AS HWND, BYVAL fUnicode AS DWORD) AS DWORD
F:Tooltip_Activate(BYVAL hTooltip AS HWND, BYVAL fActivate AS BOOLEAN)
F:Tooltip_AddTool(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR) AS BOOLEAN
F:Tooltip_AdjustRect(BYVAL hTooltip AS HWND, BYVAL fLarger AS BOOLEAN, BYVAL lprc AS RECT PTR) AS BOOLEAN
F:Tooltip_DelTool(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_EnumTools(BYVAL hTooltip AS HWND, BYVAL iTool AS DWORD, BYVAL lpti AS TOOLINFOW PTR) AS BOOLEAN
F:Tooltip_GetBubbleSize(BYVAL hTooltip AS HWND, BYVAL lpTtm AS TOOLINFOW PTR) AS DWORD
F:Tooltip_GetCurrentTool(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR) AS BOOLEAN
F:Tooltip_GetDelayTime(BYVAL hTooltip AS HWND, BYVAL dwDuration AS DWORD) AS LONG
F:Tooltip_GetFont(BYVAL hTooltip AS HWND) AS HFONT
F:Tooltip_GetMargin(BYVAL hTooltip AS HWND, BYVAL lprc AS RECT PTR)
F:Tooltip_GetMaxTipWidth(BYVAL hTooltip AS HWND) AS LONG
F:Tooltip_GetText(BYVAL hTooltip AS HWND, BYVAL numChars AS DWORD, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_GetTipBkColor(BYVAL hTooltip AS HWND) AS COLORREF
F:Tooltip_GetTipTextColor(BYVAL hTooltip AS HWND) AS COLORREF
F:Tooltip_GetTitle(BYVAL hTooltip AS HWND, BYVAL pTTGetTitle AS TTGETTITLE PTR)
F:Tooltip_GetToolCount(BYVAL hTooltip AS HWND) AS LONG
F:Tooltip_GetToolInfo(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR) AS BOOLEAN
F:Tooltip_HitTest(BYVAL hTooltip AS HWND, BYVAL lphti AS TTHITTESTINFO PTR) AS BOOLEAN
F:Tooltip_NewToolRect(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_Pop(BYVAL hTooltip AS HWND)
F:Tooltip_Popup(BYVAL hTooltip AS HWND)
F:Tooltip_RelayEvent(BYVAL hTooltip AS HWND, BYVAL lpmsg AS tagMSG PTR) AS LONG
F:Tooltip_SetDelayTime(BYVAL hTooltip AS HWND, BYVAL dwDuration AS DWORD, BYVAL iTime AS SHORT)
F:Tooltip_SetFont(BYVAL hTooltip AS HWND, BYVAL hFont AS HFONT = NULL, BYVAL fRedraw AS BOOLEAN = FALSE)
F:Tooltip_SetMargin(BYVAL hTooltip AS HWND, BYVAL lprc AS RECT PTR)
F:Tooltip_SetMaxTipWidth(BYVAL hTooltip AS HWND, BYVAL iWidth AS LONG) AS LONG
F:Tooltip_SetTipBkColor(BYVAL hTooltip AS HWND, BYVAL clr AS COLORREF)
F:Tooltip_SetTipTextColor(BYVAL hTooltip AS HWND, BYVAL clr AS COLORREF)
F:Tooltip_SetTitle(BYVAL hTooltip AS HWND, BYVAL nIcon AS LONG, BYVAL pwszTitle AS WSTRING PTR) AS BOOLEAN
F:Tooltip_SetToolInfo(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_SetWindowTheme(BYVAL hTooltip AS HWND, BYVAL pwszTheme AS WSTRING PTR)
F:Tooltip_TrackActivate(BYVAL hTooltip AS HWND, BYVAL bActivate AS BOOLEAN, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_TrackPosition(BYVAL hTooltip AS HWND, BYVAL xPos AS LONG, BYVAL yPos AS LONG)
F:Tooltip_Update(BYVAL hTooltip AS HWND)
F:Tooltip_UpdateTipText(BYVAL hTooltip AS HWND, BYVAL lpti AS TOOLINFOW PTR)
F:Tooltip_WindowFromPoint(BYVAL hTooltip AS HWND, BYVAL lppt AS POINT PTR) AS HWND
F:AfxAddTooltip(BYVAL hwnd AS HWND, BYREF wszText AS CONST WSTRING = "", BYVAL bBalloon AS BOOLEAN = FALSE, BYVAL bCentered AS BOOLEAN = FALSE) AS HWND
F:AfxSetTooltipText(BYVAL hTooltip AS HWND, BYVAL hwnd AS HWND, BYREF wszText AS CONST WSTRING)
F:AfxDeleteTooltip(BYVAL hTooltip AS HWND, BYVAL hwnd AS HWND)
F:PropSheet_SetNextText(BYVAL hDlg AS HWND, BYVAL pwszText AS WSTRING PTR)
F:PropSheet_ShowWizButtons(BYVAL hDlg AS HWND, BYVAL dwFlag AS DWORD, BYVAL dwButton AS DWORD)
F:PropSheet_EnableWizButtons(BYVAL hDlg AS HWND, BYVAL dwState AS DWORD, BYVAL dwMask AS DWORD)
F:PropSheet_SetButtonText(BYVAL hDlg AS HWND, BYVAL dwButton AS DWORD, BYVAL pwszText AS WSTRING PTR)
F:AddUrlToFavorites(BYVAL hwnd AS HWND, BYVAL pszUrlW AS WSTRING PTR, BYVAL pszTitleW AS WSTRING PTR, BYVAL fDisplayUI AS LONG) AS HRESULT
F:DoAddToFavDlg(BYVAL hwnd AS HWND, BYVAL pszInitDir AS ZSTRING PTR, BYVAL cchInitDir AS UINT, BYVAL pszFile AS ZSTRING PTR, BYVAL cchFile AS UINT, BYVAL pidlBrowse AS LPITEMIDLIST) AS LONG
F:DoOrganizeFavDlg(BYVAL hwnd AS HWND, BYVAL pszInitDir AS ZSTRING PTR) AS LONG
F:LaunchConnectionDialog(BYVAL hParent AS HWND) AS LONG
F:LaunchInternetControlPanel(BYVAL hParent AS HWND) AS LONG
F:LaunchPrivacyDialog(BYVAL hParent AS HWND) AS LONG
F:LaunchSecurityDialog(BYVAL hParent AS HWND) AS LONG
F:GDIP_ARGB(BYVAL a AS UBYTE, BYVAL r AS UBYTE, BYVAL g AS UBYTE, BYVAL b AS UBYTE) AS COLORREF
F:GDIP_COLOR(BYVAL a AS UBYTE, BYVAL r AS UBYTE, BYVAL g AS UBYTE, BYVAL b AS UBYTE) AS COLORREF
F:GDIP_XRGB(BYVAL r AS UBYTE, BYVAL g AS UBYTE, BYVAL b AS UBYTE) AS COLORREF
F:GDIP_BGRA(BYVAL b AS UBYTE, BYVAL g AS UBYTE, BYVAL r AS UBYTE, BYVAL a AS UBYTE) AS COLORREF
F:GDIP_RGBA(BYVAL r AS UBYTE, BYVAL g AS UBYTE, BYVAL b AS UBYTE, BYVAL a AS UBYTE) AS COLORREF
F:GDIP_GetAlpha(BYVAL argbcolor AS COLORREF) AS BYTE
F:GDIP_GetRed(BYVAL argbcolor AS COLORREF) AS BYTE
F:GDIP_GetGreen(BYVAL argbcolor AS COLORREF) AS BYTE
F:GDIP_GetBlue(BYVAL argbcolor AS COLORREF) AS BYTE
F:GDIP_RECTF(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpRectF
F:GDIP_RECT(BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG) AS GpRect
F:GDIP_POINTF(BYVAL x AS SINGLE, BYVAL y AS SINGLE) AS GpPointF
F:GDIP_POINT(BYVAL x AS LONG, BYVAL y AS LONG) AS GpPoint
F:AfxGdipDllVersion() AS LONG
F:AfxGdipStatusStr(BYVAL status AS GpStatus) AS CWSTR
F:AfxGdipInit(BYVAL version AS UINT32 = 1) AS ULONG_PTR
F:AfxGdipShutdown(BYVAL token AS ULONG_PTR)
F:AfxGdipGetImageSizeFromFile(BYREF wszFileName AS WSTRING, BYVAL nWidth AS DWORD PTR, BYVAL nHeight AS DWORD PTR) AS LONG
F:AfxGdipImageFromFile2(BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL imageType AS LONG = IMAGE_ICON, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipImageFromBuffer(BYVAL pBuffer AS ANY PTR, BYVAL bufferSize AS SIZE_T_, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL imageType AS LONG = IMAGE_ICON, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipIconFromBuffer(BYVAL pBuffer AS ANY PTR, BYVAL bufferSize AS SIZE_T_, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE) AS HANDLE
F:AfxGdipBitmapFromBuffer(BYVAL pBuffer AS ANY PTR, BYVAL bufferSize AS SIZE_T_, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipImageFromFile(BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL imageType AS LONG = IMAGE_ICON, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipIconFromFile(BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE) AS HANDLE
F:AfxGdipBitmapFromFile(BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipAddIconFromFile(BYVAL hIml AS HIMAGELIST, BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE) AS LONG
F:AfxGdipImageFromRes(BYVAL hInstance AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL imageType AS LONG = IMAGE_ICON, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipIconFromRes(BYVAL hInstance AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE) AS HANDLE
F:AfxGdipBitmapFromRes(BYVAL hInstance AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL clrBackground AS ARGB = 0) AS HANDLE
F:AfxGdipAddIconFromRes(BYVAL hIml AS HIMAGELIST, BYVAL hInstance AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE) AS LONG
F:AfxGdipGetEncoderClsid(BYREF wszMimeType AS WSTRING) AS GUID
F:AfxGdipSaveImageToFile(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING, BYREF wszMimeType AS WSTRING) AS LONG
F:AfxGdipSaveImageToBmp(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING) AS LONG
F:AfxGdipSaveImageToJpeg(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING) AS LONG
F:AfxGdipSaveImageToPng(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING) AS LONG
F:AfxGdipSaveImageToGif(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING) AS LONG
F:AfxGdipSaveImageToTiff(BYVAL pImage AS GpImage PTR, BYREF wszFileName AS WSTRING) AS LONG
F:AfxGdipSaveHBITMAPToFile(BYVAL hbmp AS HBITMAP, BYREF wszFileName AS WSTRING, BYREF wszMimeType AS WSTRING = "#########") AS LONG
F:AfxGdipPrintHBITMAP(BYVAL hbmp AS HBITMAP, BYVAL bStretch AS BOOLEAN = FALSE, BYVAL nStretchMode AS LONG = InterpolationModeHighQualityBicubic) AS BOOLEAN
F:AfxGdipLoadTexture(BYVAL hInstance AS HINSTANCE, BYREF wszResourceName AS WSTRING, BYREF TextureWidth AS LONG, BYREF TextureHeight AS LONG, BYREF strTextureData AS STRING) AS LONG
F:AfxGlutTeapot(BYVAL grid AS LONG, BYVAL dbScale AS DOUBLE, BYVAL dwType AS DWORD)
F:AfxGlutWireTeapot(BYVAL dbSize AS DOUBLE)
F:AfxGlutSolidTeapot(BYVAL dbSize AS DOUBLE)
F:AfxGlutWireCube(BYVAL dSize AS DOUBLE)
F:AfxGlutSolidCube(BYVAL dSize AS DOUBLE)
F:AfxGlutCircleTable(sint() AS DOUBLE, cost() AS DOUBLE, BYVAL n AS LONG)
F:AfxGlutSolidSphere(BYVAL radius AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutWireSphere(BYVAL radius AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutSolidCone(BYVAL dbase AS DOUBLE, BYVAL height AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutWireCone(BYVAL dbase AS DOUBLE, BYVAL height AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutSolidCylinder(BYVAL radius AS DOUBLE, BYVAL height AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutWireCylinder(BYVAL radius AS DOUBLE, BYVAL height AS DOUBLE, BYVAL slices AS LONG, BYVAL stacks AS LONG)
F:AfxGlutDoughnut(BYVAL innerRadius AS SINGLE, BYVAL outerRadius AS SINGLE , BYVAL nsides AS LONG, BYVAL rings AS LONG)
F:AfxGlutWireTorus(BYVAL innerRadius AS DOUBLE, BYVAL outerRadius AS DOUBLE, BYVAL nsides AS LONG, BYVAL rings AS LONG)
F:AfxGlutSolidTorus(BYVAL innerRadius AS DOUBLE, BYVAL outerRadius AS DOUBLE, BYVAL nsides AS LONG, BYVAL rings AS LONG)
F:HUGE_VAL() AS DOUBLE
F:expm1(BYVAL x AS DOUBLE) AS DOUBLE
F:acosh(BYVAL x AS DOUBLE) AS DOUBLE
F:asinh(BYVAL x AS DOUBLE) AS DOUBLE
F:atanh(BYVAL x AS DOUBLE) AS DOUBLE
F:hypot3(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE, BYVAL z AS DOUBLE) AS DOUBLE
F:isinf(BYVAL x AS DOUBLE) AS LONG
F:fcmp(BYVAL x1 AS DOUBLE, BYVAL x2 AS DOUBLE, BYVAL epsilon AS DOUBLE) AS LONG
F:CSet(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS gsl_complex
F:CRect(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS gsl_complex
F:CPolar(BYVAL r AS DOUBLE, BYVAL theta AS DOUBLE) AS gsl_complex
F:CGetReal(BYREF z AS gsl_complex) AS DOUBLE
F:CGetImag(BYREF z AS gsl_complex) AS DOUBLE
F:CSetReal(BYREF z AS gsl_complex, BYVAL x AS DOUBLE)
F:CSetImag(BYREF z AS gsl_complex, BYVAL y AS DOUBLE)
F:CSwap(BYREF z1 AS gsl_complex, BYREF z2 AS gsl_complex)
F:CNeg(BYREF z AS gsl_complex) AS gsl_complex
F:CNegate(BYREF z AS gsl_complex) AS gsl_complex
F:CNegative(BYREF z AS gsl_complex) AS gsl_complex
F:CAddReal(BYREF z AS gsl_complex, BYVAL x AS DOUBLE) AS gsl_complex
F:CAddImag(BYREF z AS gsl_complex, BYVAL y AS DOUBLE) AS gsl_complex
F:CSubReal(BYREF z AS gsl_complex, BYVAL x AS DOUBLE) AS gsl_complex
F:CSubImag(BYREF z AS gsl_complex, BYVAL y AS DOUBLE) AS gsl_complex
F:CMulReal(BYREF z AS gsl_complex, BYVAL x AS DOUBLE) AS gsl_complex
F:CMulImag(BYREF z AS gsl_complex, BYVAL y AS DOUBLE) AS gsl_complex
F:CDivReal(BYREF z AS gsl_complex, BYVAL x AS DOUBLE) AS gsl_complex
F:CDivImag(BYREF z AS gsl_complex, BYVAL y AS DOUBLE) AS gsl_complex
F:CConj(BYREF z AS gsl_complex) AS gsl_complex
F:CConjugate(BYREF z AS gsl_complex) AS gsl_complex
F:CArg(BYREF z AS gsl_complex) AS DOUBLE
F:CArgument(BYREF z AS gsl_complex) AS DOUBLE
F:CAbs(BYREF z AS gsl_complex) AS DOUBLE
F:CAbs2(BYREF z AS gsl_complex) AS DOUBLE
F:CNorm(BYREF z AS gsl_complex) AS DOUBLE
F:CPhase(BYREF z AS gsl_complex) AS DOUBLE
F:CInverse(BYREF a AS gsl_complex) AS gsl_complex
F:CReciprocal(BYREF a AS gsl_complex) AS gsl_complex
F:CLogAbs(BYREF z AS gsl_complex) AS DOUBLE
F:CSqr(BYREF a AS gsl_complex) AS gsl_complex
F:CSqrReal(BYVAL x AS DOUBLE) AS gsl_complex
F:CExp(BYREF a AS gsl_complex) AS gsl_complex
F:CLog(BYREF a AS gsl_complex) AS gsl_complex
F:CLog10(BYREF a AS gsl_complex) AS gsl_complex
F:CLogb(BYREF a AS gsl_complex, BYREF b AS gsl_complex) AS gsl_complex
F:CLog_b(BYREF a AS gsl_complex, BYREF b AS gsl_complex) AS gsl_complex
F:CPow(BYREF a AS gsl_complex, BYREF b AS gsl_complex) AS gsl_complex
F:CPowReal(BYREF a AS gsl_complex, BYVAL b AS DOUBLE) AS gsl_complex
F:CSin(BYREF a AS gsl_complex) AS gsl_complex
F:CCos(BYREF a AS gsl_complex) AS gsl_complex
F:CSec(BYREF a AS gsl_complex) AS gsl_complex
F:CCsc(BYREF a AS gsl_complex) AS gsl_complex
F:CTan(BYREF a AS gsl_complex) AS gsl_complex
F:CCot(BYREF a AS gsl_complex) AS gsl_complex
F:CArcSinReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcSin(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCosReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcCos(BYREF a AS gsl_complex) AS gsl_complex
F:CArcSec(BYREF a AS gsl_complex) AS gsl_complex
F:CArcSecReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcCsc(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCscReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcTan(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCot(BYREF a AS gsl_complex) AS gsl_complex
F:CSinH(BYREF a AS gsl_complex) AS gsl_complex
F:CCosH(BYREF a AS gsl_complex) AS gsl_complex
F:CSecH(BYREF a AS gsl_complex) AS gsl_complex
F:CCscH(BYREF a AS gsl_complex) AS gsl_complex
F:CTanH(BYREF a AS gsl_complex) AS gsl_complex
F:CCotH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcSinH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCosH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCosHReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcSecH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCscH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcTanhReal(BYVAL a AS DOUBLE) AS gsl_complex
F:CArcTanH(BYREF a AS gsl_complex) AS gsl_complex
F:CArcCotH(BYREF a AS gsl_complex) AS gsl_complex
F:CSgn(BYREF z AS gsl_complex) AS LONG
F:CStr(BYREF z AS gsl_complex) AS STRING
F:CStrPolar(BYREF z AS gsl_complex) AS STRING
F:AfxCheckMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS DWORD
F:AfxUnCheckMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS DWORD
F:AfxToggleMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS DWORD
F:AfxIsMenuItemChecked(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemEnabled(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemDisabled(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemGrayed(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemHighlighted(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemSeparator(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemPopup(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxIsMenuItemOwnerDraw(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxGetMenuItemState(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS DWORD
F:AfxSetMenuItemState(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fState AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxEnableMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxDisableMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxGrayMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxHiliteMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxRemoveCloseMenu(BYVAL hwnd AS HWND) AS BOOLEAN
F:AfxRightJustifyMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD) AS BOOLEAN
F:AfxSetMenuItemBold(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD) AS BOOLEAN
F:AfxSetMenuItemText(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYREF wszText AS WSTRING, BYVAL fByPosition AS LONG = FALSE) AS BOOLEAN
F:AfxGetMenuItemTextLen(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG = FALSE) AS LONG
F:AfxGetMenuItemText(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS LONG, BYVAL pwszText AS WSTRING PTR, BYVAL cchTextMax AS LONG) AS BOOLEAN
F:AfxGetMenuFont(BYVAL plfw AS LOGFONTW PTR) AS BOOLEAN
F:AfxGetMenuFontPointSize() AS LONG
F:AfxGetMenuRect(BYVAL hwnd AS HWND, BYVAL hmenu AS HMENU, BYVAL prcmenu AS RECT PTR) AS LONG
F:AfxInitBitmapInfo(BYVAL pbmi AS BITMAPINFO PTR, BYVAL cbInfo AS ULONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL bpp AS WORD) AS BOOLEAN
F:AfxCreate32BitHBITMAP(BYVAL hDC AS HDC, BYVAL psize AS SIZE PTR, BYVAL ppvBits AS ANY PTR PTR, BYVAL phBmp AS HBITMAP PTR) AS BOOLEAN
F:AfxAddBitmapToMenuItem(BYVAL hMenu AS HMENU, BYVAL nMenuItem AS LONG, BYVAL fByPosition AS BOOLEAN, BYVAL hbmp AS HBITMAP) AS BOOLEAN
F:AfxConvertToPARGB32(BYVAL hDC AS HDC, BYVAL pargb AS DWORD PTR, BYVAL hbmp AS HBITMAP, BYVAL sizeImage AS SIZE, BYVAL cxRow AS LONG) AS BOOLEAN
F:AfxHasAlpha(BYVAL pargb AS DWORD PTR, BYVAL sizeImage AS SIZE, BYVAL cxRow AS LONG) AS BOOLEAN
F:AfxConvertBufferToPARGB32(BYVAL hPaintBuffer AS HPAINTBUFFER, BYVAL hDC AS HDC, BYVAL hIcon AS HICON, BYVAL sizeIcon AS SIZE) AS BOOLEAN
F:AfxAddIconToMenuItem(BYVAL hMenu AS HMENU, BYVAL uItem AS DWORD, BYVAL fByPosition AS BOOLEAN, BYVAL hIcon AS HICON, BYVAL fAutoDestroy AS BOOLEAN = TRUE, BYVAL phbmp AS HBITMAP PTR = NULL) AS BOOLEAN
F:AfxGetLocaleAbbrevDayName(BYVAL nDay AS LONG, BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleAbbrevMonthName(BYVAL nMonth AS LONG, BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleCountryName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleCurrencySymbol(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleDayName(BYVAL nDay AS LONG, BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleDecimalSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleDigitsGrouping(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleDisplayName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleEnglishCountryName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleEnglishCurrencyName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleEnglishDisplayName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleEnglishLanguageName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleInternationalMonetarySymbol(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleISO639LanguageName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleISO639LanguageName2(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleISO3166CountryName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleISO3166CountryName2(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleLanguageName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleListItemsSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleLongDateFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleMonetaryDecimalSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleMonetaryGrouping(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleMonetaryThousandsSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleMonthDayFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleMonthName(BYVAL nMonth AS LONG, BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNanString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNativeCountryName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNativeCurrencyName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNativeDigits(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNativeDisplayName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNativeLanguageName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNegativeInfinityString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleNegativeSign(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleOpenTypeLanguageTag(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalePermilleSymbol(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalePositiveInfinityString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalePositiveSign(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleScriptsList(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleShortDateFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleShortestDayName(BYVAL nDay AS LONG, BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleShortTimeFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleSortName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleThousandsSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleDateSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleTimeFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleTimeSeparator(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocaleYearMonthFormatString(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalizedCountryName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalizedDisplayName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetLocalizedLanguageName(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxGetSortLocale(BYVAL nLocale AS LONG = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxPathAddBackSlash(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathRemoveBackslash(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathAddExtension(BYREF wszPath AS CONST WSTRING, BYVAL pwszExt AS WSTRING PTR = NULL) AS CWSTR
F:AfxPathRemoveExtension(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathRenameExtension(BYREF wszPath AS CONST WSTRING, BYREF wszExt AS CONST WSTRING) AS CWSTR
F:AfxPathAppend(BYREF wszPath AS CONST WSTRING, BYREF wszMore AS CONST WSTRING) AS CWSTR
F:AfxPathBuildRoot(BYVAL nDrive AS LONG) AS CWSTR
F:AfxPathCanonicalize(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathCombine(BYREF wszDir AS CONST WSTRING, BYREF wszFile AS CONST WSTRING) AS CWSTR
F:AfxPathCommonPrefix(BYREF wszPath1 AS CONST WSTRING, BYREF wszPath2 AS CONST WSTRING) AS CWSTR
F:AfxPathCompactPath(BYVAL hDC AS HDC, BYREF wszPath AS CONST WSTRING, BYVAL dx AS DWORD) AS CWSTR
F:AfxPathCompactPathEx(BYREF wszPath AS CONST WSTRING, BYVAL cchMax AS DWORD) AS CWSTR
F:AfxPathCreateFromUrl(BYREF wszUrl AS CONST WSTRING) AS CWSTR
F:AfxPathMakePretty(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathQuoteSpaces(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathUnquoteSpaces(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathFileExists(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathFindExtension(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathFindFileName(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathFindNextComponent(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxPathSkipRoot(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathFindSuffixArray(BYREF wszPath AS WSTRING, BYVAL apwszSuffix AS WSTRING PTR PTR, BYVAL iArraySize AS LONG) AS CWSTR
F:AfxPathGetArgs(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathGetCharType(BYREF wszCh AS CONST WSTRING) AS UINT
F:AfxPathGetDriveNumber(BYREF wszPath AS CONST WSTRING) AS LONG
F:AfxPathIsContentType(BYREF wszPath AS CONST WSTRING, BYREF wszContentType AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsDirectory(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsDirectoryEmpty(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsFileSpec(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsHTMLFile(BYREF wszFile AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsLFNFileSpec(BYREF wszName AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsNetworkPath(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsPrefix(BYREF wszPrefix AS CONST WSTRING, BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsRelative(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsRoot(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsSameRoot(BYREF wszPath1 AS CONST WSTRING, BYREF wszPath2 AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsSystemFolder(BYREF wszPath AS CONST WSTRING, BYVAL dwAttrb AS DWORD) AS BOOLEAN
F:AfxPathIsUNC(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsUNCServer(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsUNCServerShare(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathIsURL(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathMakeSystemFolder(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathUnmakeSystemFolder(BYREF wszPath AS CONST WSTRING) AS BOOLEAN
F:AfxPathFindOnPath(BYREF wszFile AS CONST WSTRING, BYVAL ppwszOtherDirs AS WSTRING PTR PTR = NULL) AS CWSTR
F:AfxPathMatchSpec(BYREF wszFile AS CONST WSTRING, BYREF wszSpec AS CONST WSTRING) AS BOOLEAN
F:AfxPathRemoveArgs(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathRemoveBlanks(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathRemoveFileSpec(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathSearchAndQualify(BYREF wszPath AS CONST WSTRING, BYREF wszFullyQualifiedPath AS CONST WSTRING, BYVAL cchFullyQualifiedPath AS DWORD) AS BOOLEAN
F:AfxPathSetDlgItemPath(BYVAL hDlg AS HWND, BYVAL cID AS LONG, BYREF wszPath AS CONST WSTRING)
F:AfxPathStripPath(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathStripToRoot(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathUndecorate(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathUnExpandEnvStrings(BYREF wszPath AS CONST WSTRING) AS CWSTR
F:AfxPathParseIconLocation(BYREF wszIconFile AS CONST WSTRING) AS CWSTR
F:AfxPathRelativePathTo(BYREF wszFrom AS CONST WSTRING, BYVAL dwAttrFrom AS DWORD, BYREF wszTo AS CONST WSTRING, BYVAL dwAttrTo AS DWORD) AS CWSTR
F:AfxUrlApplyScheme(BYREF wszUrl AS WSTRING, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlCanonicalize(BYREF wszUrl AS WSTRING, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlCombine(BYREF wszBase AS WSTRING, BYREF wszRelative AS WSTRING, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlCompare(BYREF wszURL1 AS CONST WSTRING, BYREF wszURL2 AS CONST WSTRING, BYVAL fIgnoreSlash AS LONG) AS BOOLEAN
F:AfxUrlCreateFromPath(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxUrlEscape(BYREF wszURL AS WSTRING, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlEscapeSpaces(BYREF wszURL AS WSTRING) AS CWSTR
F:AfxUrlGetLocation(BYREF wszUrl AS CONST WSTRING) AS CWSTR
F:AfxUrlGetPart(BYREF wszUrl AS CONST WSTRING, BYVAL dwPart AS DWORD, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlHash(BYREF wszURL AS CONST WSTRING, BYVAL pbHash AS BYTE PTR, BYVAL cbHash AS DWORD) AS HRESULT
F:AfxUrlIs(BYREF wszURL AS CONST WSTRING, BYVAL nUrlIs AS URLIS) AS BOOLEAN
F:AfxUrlIsFileUrl(BYREF wszURL AS CONST WSTRING) AS BOOLEAN
F:AfxUrlIsNoHistory(BYREF wszURL AS CONST WSTRING) AS BOOLEAN
F:AfxUrlIsOpaque(BYREF wszURL AS CONST WSTRING) AS BOOLEAN
F:AfxUrlUnescape(BYREF wszURL AS WSTRING, BYVAL dwFlags AS DWORD) AS CWSTR
F:AfxUrlUnescapeInPlace(BYREF wszURL AS WSTRING, BYVAL dwFlags AS DWORD) AS HRESULT
F:AfxPathMatchSpecEx(BYREF wszFile AS CONST WSTRING, BYREF wszSpec AS CONST WSTRING, BYVAL dwFlags AS DWORD = 0) AS BOOLEAN
F:AfxUrlFixup(BYREF wszUrl AS CONST WSTRING) AS CWSTR
F:AfxGetDefaultPrinter() AS CWSTR
F:AfxGetDefaultPrinterDriver() AS CWSTR
F:AfxGetDefaultPrinterPort() AS CWSTR
F:AfxGetPrinterDC() AS HDC
F:AfxPrinterDialog(BYVAL hwndOwner AS HWND, BYREF flags AS DWORD, BYREF hdc AS HDC, BYREF nCopies AS WORD, BYREF nFromPage AS WORD, BYREF nToPage AS WORD, BYREF nMinPage AS WORD, BYREF nMaxPage AS WORD) AS BOOLEAN
F:AfxOpenPrintersFolder() AS HINSTANCE
F:AfxEnumPrinterPorts(BYVAL pwszServerName AS WSTRING PTR = NULL) AS CWSTR
F:AfxEnumLocalPrinterPorts() AS CWSTR
F:AfxEnumPrinterNames() AS CWSTR
F:AfxGetPrinterPort(BYREF wszPrinterName AS WSTRING) AS CWSTR
F:AfxGetPrinterFromPort(BYREF wszPortName AS WSTRING) AS CWSTR
F:AfxGetPrinterCollate(BYREF wszPrinterName AS WSTRING) AS BOOLEAN
F:AfxGetPrinterColorMode(BYREF wszPrinterName AS WSTRING) AS BOOLEAN
F:AfxGetPrinterDriverVersion(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterDuplexMode(BYREF wszPrinterName AS WSTRING) AS BOOLEAN
F:AfxGetPrinterMaxCopies(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterMediaReady(BYREF wszPrinterName AS WSTRING) AS CWSTR
F:AfxGetPrinterMaxPaperHeight(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterMaxPaperWidth(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterMinPaperHeight(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterMinPaperWidth(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterOrientationDegrees(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPaperNames(BYREF wszPrinterName AS WSTRING) AS CWSTR
F:AfxGetPrinterTrayNames(BYREF wszPrinterName AS WSTRING) AS CWSTR
F:AfxGetPrinterPaperSizes(BYREF wszPrinterName AS WSTRING) AS CWSTR
F:AfxGetPrinterRate(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterRatePPM(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterRateUnit(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterTrueType(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetDocumentProperties(BYREF wszPrinterName AS WSTRING, BYVAL dmField AS DWORD) AS LONG
F:AfxGetPrinterCollateStatus(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterCopies(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterOrientation(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPaperSize(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterQuality(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterScale(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterTray(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPaperLength(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPaperWidth(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterHorizontalResolution(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterVerticalResolution(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPhysicalHeight(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPhysicalOffsetX(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPhysicalOffsetY(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterPhysicalWidth(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterScalingFactorX(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxGetPrinterScalingFactorY(BYREF wszPrinterName AS WSTRING) AS LONG
F:AfxSetPrinterInfo(BYREF wszPrinterName AS WSTRING, BYVAL dmField AS DWORD, BYVAL nValue AS LONG) AS BOOLEAN
F:AfxSetPrinterColorMode(BYREF wszPrinterName AS WSTRING, BYVAL nMode AS LONG) AS BOOLEAN
F:AfxSetPrinterCopies(BYREF wszPrinterName AS WSTRING, BYVAL nCopies AS LONG) AS BOOLEAN
F:AfxSetPrinterDuplexMode(BYREF wszPrinterName AS WSTRING, BYVAL nDuplexMode AS LONG) AS BOOLEAN
F:AfxSetPrinterOrientation(BYREF wszPrinterName AS WSTRING, BYVAL nOrientation AS LONG) AS BOOLEAN
F:AfxSetPrinterPaperSize(BYREF wszPrinterName AS WSTRING, BYVAL nSize AS LONG) AS BOOLEAN
F:AfxSetPrinterQuality(BYREF wszPrinterName AS WSTRING, BYVAL nMode AS LONG) AS BOOLEAN
F:AfxSetPrinterTray(BYREF wszPrinterName AS WSTRING, BYVAL nTray AS LONG) AS BOOLEAN
F:AfxSetPrinterCollateStatus(BYREF wszPrinterName AS WSTRING, BYVAL nMode AS LONG) AS BOOLEAN
F:AfxSetPrinterScale(BYREF wszPrinterName AS WSTRING, BYVAL nScale AS LONG) AS BOOLEAN
F:RichEdit_AutoUrlDetect(BYVAL hRichEdit AS HWND, BYVAL fUrlDetect AS LONG) AS LONG
F:RichEdit_CanPaste(BYVAL hRichEdit AS HWND, BYVAL clipformat AS LONG) AS LONG
F:RichEdit_CanRedo(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_CanUndo(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_CharFromPos(BYVAL hRichEdit AS HWND, BYVAL lppl AS POINTL PTR) AS LONG
F:RichEdit_DisplayBand(BYVAL hRichEdit AS HWND, BYVAL lprc AS RECT PTR) AS LONG
F:RichEdit_EmptyUndoBuffer(BYVAL hRichEdit AS HWND)
F:RichEdit_ExGetSel(BYVAL hRichEdit AS HWND, BYVAL lpchr AS CHARRANGE PTR)
F:RichEdit_ExLimitText(BYVAL hRichEdit AS HWND, BYVAL dwLimit AS DWORD)
F:RichEdit_ExLineFromChar(BYVAL hRichEdit AS HWND, BYVAL iIndex AS LONG) AS LONG
F:RichEdit_ExSetSel(BYVAL hRichEdit AS HWND, BYVAL lpcr AS CHARRANGE PTR) AS DWORD
F:RichEdit_FindText(BYVAL hRichEdit AS HWND, BYVAL fOptions AS DWORD, BYVAL lpft AS FINDTEXTW PTR) AS LONG
F:RichEdit_FindTextEx(BYVAL hRichEdit AS HWND, BYVAL fOptions AS DWORD, BYVAL lpftexw AS FINDTEXTEXW PTR) AS LONG
F:RichEdit_FindWordBreak(BYVAL hRichEdit AS HWND, BYVAL fOperation AS DWORD, BYVAL dwStartPos AS DWORD) AS DWORD
F:RichEdit_FormatRange(BYVAL hRichEdit AS HWND, BYVAL fRender AS LONG, BYVAL lpfr AS FORMATRANGE PTR) AS DWORD
F:RichEdit_GetAutoUrlDetect(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetBidiOptions(BYVAL hRichEdit AS HWND, BYVAL lpbo AS BIDIOPTIONS PTR)
F:RichEdit_GetCharFormat(BYVAL hRichEdit AS HWND, BYVAL fOption AS DWORD, BYVAL lpcf AS CHARFORMATW PTR) AS DWORD
F:RichEdit_GetCTFModeBias(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetCTFOpenStatus(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetEditStyle(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetEventMask(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetFirstVisibleLine(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetHyphenateInfo(BYVAL hRichEdit AS HWND, BYVAL lphi AS HYPHENATEINFO PTR)
F:RichEdit_GetIMEColor(BYVAL hRichEdit AS HWND, BYVAL rgCmpclr AS COMPCOLOR PTR) AS LONG
F:RichEdit_GetIMECompMode(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetIMECompText(BYVAL hRichEdit AS HWND, BYVAL lpict AS IMECOMPTEXT PTR, BYVAL buffer AS ANY PTR) AS DWORD
F:RichEdit_GetIMEModeBias(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetIMEOptions(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetIMEProperty(BYVAL hRichEdit AS HWND, BYVAL figp AS DWORD) AS DWORD
F:RichEdit_GetLangOptions(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetLimitText(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetLine(BYVAL hRichEdit AS HWND, BYVAL which AS DWORD) AS CWSTR
F:RichEdit_GetLineCount(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetModify(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetOleInterface(BYVAL hRichEdit AS HWND, BYVAL ppObject AS IUnknown PTR PTR) AS LONG
F:RichEdit_GetOptions(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetPageRotate(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetParaFormat(BYVAL hRichEdit AS HWND, BYVAL pParaFmt AS PARAFORMAT PTR) AS DWORD
F:RichEdit_GetPasswordChar(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetPunctuation(BYVAL hRichEdit AS HWND, BYVAL punctp AS DWORD, BYVAL lppunct AS PUNCTUATION PTR) AS LONG
F:RichEdit_GetRect(BYVAL hRichEdit AS HWND, BYVAL prc AS RECT PTR)
F:RichEdit_GetRedoName(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetScrollPos(BYVAL hRichEdit AS HWND, BYVAL lppt AS POINT PTR) AS DWORD
F:RichEdit_GetSel(BYVAL hRichEdit AS HWND, BYVAL pdwStartPos AS DWORD PTR, BYVAL pdwEndPos AS DWORD PTR) AS LONG
F:RichEdit_GetSelText(BYVAL hRichEdit AS HWND) AS CWSTR
F:RichEdit_GetText(BYVAL hRichEdit AS HWND) AS CWSTR
F:RichEdit_GetTextEx(BYVAL hRichEdit AS HWND, BYVAL lpgtex AS GETTEXTEX PTR, BYVAL buffer AS ANY PTR) AS DWORD
F:RichEdit_GetTextLength(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetTextLengthEx(BYVAL hRichEdit AS HWND, BYVAL lpgtex AS GETTEXTLENGTHEX PTR) AS LONG
F:RichEdit_GetTextMode(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetTextRange(BYVAL hRichEdit AS HWND, BYVAL lptrg AS TEXTRANGE PTR) AS DWORD
F:RichEdit_GetThumb(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_GetTypographyOptions(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetUndoName(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetWordBreakProc(BYVAL hRichEdit AS HWND) AS LONG_PTR
F:RichEdit_GetWordBreakProcEx(BYVAL hRichEdit AS HWND) AS LONG_PTR
F:RichEdit_GetWordWrapMode(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_GetZoom(BYVAL hRichEdit AS HWND, BYVAL pzNum AS DWORD PTR, BYVAL pzDen AS DWORD PTR) AS LONG
F:RichEdit_HideSelection(BYVAL hRichEdit AS HWND, BYVAL fHide AS DWORD)
F:RichEdit_IsIME(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_LimitText(BYVAL hRichEdit AS HWND, BYVAL chMax AS DWORD)
F:RichEdit_LineFromChar(BYVAL hRichEdit AS HWND, BYVAL index AS DWORD) AS LONG
F:RichEdit_LineIndex(BYVAL hRichEdit AS HWND, BYVAL nLine AS LONG) AS LONG
F:RichEdit_LineLength(BYVAL hRichEdit AS HWND, BYVAL index AS DWORD) AS LONG
F:RichEdit_LineScroll(BYVAL hRichEdit AS HWND, BYVAL y AS LONG) AS LONG
F:RichEdit_PasteSpecial(BYVAL hRichEdit AS HWND, BYVAL clpfmt AS DWORD, BYVAL lprps AS REPASTESPECIAL PTR)
F:RichEdit_PosFromChar(BYVAL hRichEdit AS HWND, BYVAL pt AS POINTL PTR, BYVAL index as DWORD) AS DWORD
F:RichEdit_Reconversion(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_Redo(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_ReplaceSel(BYVAL hRichEdit AS HWND, BYVAL bCanBeUndone AS LONG, BYVAL pwszText AS WSTRING PTR)
F:RichEdit_RequestResize(BYVAL hRichEdit AS HWND)
F:RichEdit_Scroll(BYVAL hRichEdit AS HWND, BYVAL nAction AS LONG) AS LONG
F:RichEdit_ScrollCaret(BYVAL hRichEdit AS HWND)
F:RichEdit_SelectionType(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_SetBidiOptions(BYVAL hRichEdit AS HWND, BYVAL pOptions AS BIDIOPTIONS PTR) AS LONG
F:RichEdit_SetBkgndColor(BYVAL hRichEdit AS HWND, BYVAL pSysColor AS DWORD, BYVAL pBkColor AS DWORD) AS DWORD
F:RichEdit_SetCharFormat(BYVAL hRichEdit AS HWND, BYVAL chfmt AS DWORD, BYVAL pchfmt AS DWORD) AS LONG
F:RichEdit_SetCTFModeBias(BYVAL hRichEdit AS HWND, BYVAL nModeBias AS LONG) AS LONG
F:RichEdit_SetCTFOpenStatus(BYVAL hRichEdit AS HWND, BYVAL fTSFkbd AS LONG) AS DWORD
F:RichEdit_SetEditStyle(BYVAL hRichEdit AS HWND, BYVAL fStyle AS LONG, BYVAL fMask AS LONG) AS DWORD
F:RichEdit_SetEventMask(BYVAL hRichEdit AS HWND, BYVAL fMask AS LONG) AS LONG
F:RichEdit_SetFontSize(BYVAL hRichEdit AS HWND, BYVAL ptsize AS LONG) AS LONG
F:RichEdit_SetHyphenateInfo(BYVAL hRichEdit AS HWND, BYVAL phinfo AS HYPHENATEINFO PTR)
F:RichEdit_SetIMEColor(BYVAL hRichEdit AS HWND, BYVAL pcompcolor AS COMPCOLOR PTR) AS LONG
F:RichEdit_SetIMEModeBias(BYVAL hRichEdit AS HWND, BYVAL nModeBias AS LONG) AS LONG
F:RichEdit_SetIMEOptions(BYVAL hRichEdit AS HWND, BYVAL fCoop AS LONG, BYVAL fOptions AS LONG) AS LONG
F:RichEdit_SetLangOptions(BYVAL hRichEdit AS HWND, BYVAL lgoptions AS LONG) AS DWORD
F:RichEdit_SetLimitText(BYVAL hRichEdit AS HWND, BYVAL chMax AS DWORD)
F:RichEdit_SetMargins(BYVAL hRichEdit AS HWND, BYVAL nMargins AS LONG, BYVAL nWidth AS LONG)
F:RichEdit_SetModify(BYVAL hRichEdit AS HWND, BYVAL fModify AS LONG)
F:RichEdit_SetOleCallback(BYVAL hRichEdit AS HWND, BYVAL pCallback AS ANY PTR) AS LONG
F:RichEdit_SetOptions(BYVAL hRichEdit AS HWND, BYVAL fCoop AS LONG, BYVAL fOptions AS LONG) AS LONG
F:RichEdit_SetPageRotate(BYVAL hRichEdit AS HWND, BYVAL txtlayout AS LONG) AS LONG
F:RichEdit_SetPalette(BYVAL hRichEdit AS HWND, BYVAL newPalette AS HPALETTE)
F:RichEdit_SetParaFormat(BYVAL hRichEdit AS HWND, BYVAL pfmt AS PARAFORMAT PTR) AS LONG
F:RichEdit_SetPasswordChar(BYVAL hRichEdit AS HWND, BYVAL dwchar AS DWORD)
F:RichEdit_SetPunctuation(BYVAL hRichEdit AS HWND, BYVAL ptype AS LONG, BYVAL ppunct AS PUNCTUATION PTR) AS LONG
F:RichEdit_SetReadOnly(BYVAL hRichEdit AS HWND, BYVAL fReadOnly AS LONG) AS LONG
F:RichEdit_SetRect(BYVAL hRichEdit AS HWND, BYVAL fCoord AS LONG, BYVAL prect AS RECT PTR)
F:RichEdit_SetRectNP(BYVAL hRichEdit AS HWND, BYVAL fCoord AS LONG, BYVAL prect AS RECT PTR)
F:RichEdit_SetScrollPos(BYVAL hRichEdit AS HWND, BYVAL pt AS POINT PTR) AS DWORD
F:RichEdit_SetSel(BYVAL hRichEdit AS HWND, BYVAL nStart AS LONG, BYVAL nEnd AS LONG)
F:RichEdit_SetTabStops(BYVAL hRichEdit AS HWND, BYVAL nTabs AS LONG, BYVAL rgTabStops AS LONG_PTR) AS LONG
F:RichEdit_SetTargetDevice(BYVAL hRichEdit AS HWND, BYVAL hDC AS HDC, BYVAL lnwidth AS LONG) AS LONG
F:RichEdit_SetText(BYVAL hRichEdit AS HWND, BYVAL pwszText AS WSTRING PTR) AS LONG
F:RichEdit_SetTextExW(BYVAL hRichEdit AS HWND, BYVAL pstex AS SETTEXTEX PTR, BYVAL pwszText AS WSTRING PTR) AS DWORD
F:RichEdit_SetTextMode(BYVAL hRichEdit AS HWND, BYVAL pvalues AS LONG) AS LONG
F:RichEdit_SetTypographyOptions(BYVAL hRichEdit AS HWND, BYVAL pto AS LONG, BYVAL fMask AS LONG) AS LONG
F:RichEdit_SetUndoLimit(BYVAL hRichEdit AS HWND, BYVAL maxactions AS DWORD) AS DWORD
F:RichEdit_SetWordBreakProc(BYVAL hRichEdit AS HWND, BYVAL pfn AS EDITWORDBREAKPROC)
F:RichEdit_SetWordBreakProcEx(BYVAL hRichEdit AS HWND, BYVAL pfn AS EDITWORDBREAKPROC) AS DWORD
F:RichEdit_SetWordWrapMode(BYVAL hRichEdit AS HWND, BYVAL pvalues AS LONG) AS LONG
F:RichEdit_SetZoom(BYVAL hRichEdit AS HWND, BYVAL zNum AS DWORD, BYVAL zDen AS DWORD) AS LONG
F:RichEdit_ShowScrollBar(BYVAL hRichEdit AS HWND, BYVAL nScrollBar AS DWORD, BYVAL fShow AS LONG)
F:RichEdit_StopGroupTyping(BYVAL hRichEdit AS HWND) AS DWORD
F:RichEdit_StreamIn(BYVAL hRichEdit AS HWND, BYVAL psf AS LONG, BYVAL pedst AS EDITSTREAM PTR) AS DWORD
F:RichEdit_StreamOut(BYVAL hRichEdit AS HWND, BYVAL psf AS LONG, BYVAL pedst AS EDITSTREAM PTR) AS DWORD
F:RichEdit_Undo(BYVAL hRichEdit AS HWND) AS LONG
F:RichEdit_EnumFontFamProcW( BYVAL lpelf AS ENUMLOGFONTW PTR, BYVAL lpntm AS NEWTEXTMETRICW PTR, BYVAL FontType AS LONG, BYVAL lplf AS LOGFONTW PTR ) AS LONG
F:RichEdit_SetFontW( BYVAL hRichEdit AS HWND, BYREF wszFaceName AS WSTRING, BYVAL ptsize AS LONG ) AS LRESULT
F:RichEdit_LoadRtfFromFileCallback( BYVAL hFile AS HANDLE , BYVAL lpBuff AS BYTE PTR , BYVAL cb AS LONG , BYVAL pcb AS LONG PTR ) AS UINT
F:RichEdit_LoadRtfFromFileW( BYVAL hRichEdit AS HWND , BYREF wszFileName AS WSTRING ) AS BOOLEAN
F:RichEdit_LoadRtfFromResourceCallback( BYVAL pCustData AS AFX_RICHEDIT_CUSTOMDATA PTR , BYVAL lpBuff AS BYTE PTR , BYVAL cb AS LONG , BYVAL pcb AS LONG PTR ) AS DWORD
F:RichEdit_LoadRtfFromResourceW( BYVAL hRichEdit AS HWND , BYVAL hInstance AS HINSTANCE , BYREF wszResourceName AS WSTRING ) AS BOOLEAN
F:RichEdit_GetTextCallback( BYVAL dwCookie AS DWORD_PTR , BYVAL pbBuff AS BYTE PTR , BYVAL cb AS LONG , BYVAL pcb AS LONG PTR ) AS DWORD
F:RichEdit_GetRtfText(BYVAL hRichEdit AS HWND) AS STRING
F:AfxSpGetVoices() AS CWSTR
F:AfxSpSetVoice(BYREF wszVoice AS WSTRING) AS HRESULT
F:AfxStrUCase(BYVAL pwszStr AS WSTRING PTR, BYVAL pwszLocaleName AS WSTRING PTR = LOCALE_NAME_USER_DEFAULT, BYVAL dwMapFlags AS DWORD = 0) AS CWSTR
F:AfxStrLCase(BYVAL pwszStr AS WSTRING PTR, BYVAL pwszLocaleName AS WSTRING PTR = LOCALE_NAME_USER_DEFAULT, BYVAL dwMapFlags AS DWORD = 0) AS CWSTR
F:AfxUcode(BYREF ansiStr AS CONST STRING, BYVAL nCodePage AS LONG = 0) AS CWSTR
F:AfxAcode(BYVAL pwszStr AS WSTRING PTR, BYVAL nCodePage AS LONG = 0) AS STRING
F:AfxStrRemoveI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRemove(BYVAL nStart AS LONG = 1, BYREF wszMainStr AS CONST WSTRING, BYREF wszDelim1 AS CONST WSTRING, BYREF wszDelim2 AS CONST WSTRING, BYVAL fRemoveAll AS BOOLEAN = FALSE) AS CWSTR
F:AfxStrRemoveAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRemoveAnyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrReplace(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYREF wszReplaceWith AS WSTRING) AS CWSTR
F:AfxStrReplaceI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYREF wszReplaceWith AS CONST WSTRING) AS CWSTR
F:AfxStrReplaceAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYREF wszReplaceWith AS CONST WSTRING) AS CWSTR
F:AfxStrReplaceAnyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYREF wszReplaceWith AS CONST WSTRING) AS CWSTR
F:AfxStrReverse(BYREF wszMainStr AS CONST WSTRING) AS CWSTR
F:AfxStrExtractI(BYVAL nStart AS LONG = 1, BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrExtract(BYVAL nStart AS LONG = 1, BYREF wszMainStr AS CONST WSTRING, BYREF wszDelim1 AS CONST WSTRING, BYREF wszDelim2 AS CONST WSTRING) AS CWSTR
F:AfxStrExtractAny(BYVAL nStart AS LONG = 1, BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrExtractAnyI(BYVAL nStart AS LONG = 1, BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRemain(BYREF wszMainStr AS WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYVAL nStart AS LONG = 1) AS CWSTR
F:AfxStrRemainI(BYREF wszMainStr AS WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYVAL nStart AS LONG = 1) AS CWSTR
F:AfxStrRemainAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS WSTRING, BYVAL nStart AS LONG = 1) AS CWSTR
F:AfxStrRemainAnyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING, BYVAL nStart AS LONG = 1) AS CWSTR
F:AfxStrTally(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrTallyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrTallyAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrTallyAnyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrVerify(BYVAL nStart AS LONG, BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrVerifyI(BYVAL nStart AS LONG, BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS LONG
F:AfxStrLSet(BYREF wszMainStr AS CONST WSTRING, BYVAL nStringLength AS LONG, BYREF wszPadCharacter AS CONST WSTRING = " ") AS CWSTR
F:AfxStrRSet(BYREF wszMainStr AS CONST WSTRING, BYVAL nStringLength AS LONG, BYREF wszPadCharacter AS CONST WSTRING = " ") AS CWSTR
F:AfxStrCSet(BYREF wszMainStr AS CONST WSTRING, BYVAL nStringLength AS LONG, BYREF wszPadCharacter AS CONST WSTRING = " ") AS CWSTR
F:AfxStrPathName(BYREF wszOption AS CONST WSTRING, BYREF wszFileSpec AS WSTRING) AS CWSTR
F:AfxStrRepeat(BYVAL nCount AS LONG, BYREF wszMainStr AS CONST WSTRING) AS CWSTR
F:AfxStrClipLeft(BYREF wszMainStr AS CONST WSTRING, BYVAL nCount AS LONG) AS CWSTR
F:AfxStrClipRight(BYREF wszMainStr AS CONST WSTRING, BYVAL nCount AS LONG) AS CWSTR
F:AfxStrClipMid(BYREF wszMainStr AS CONST WSTRING, BYVAL nStart AS LONG, BYVAL nCount AS LONG) AS CWSTR
F:AfxStrWrap(BYREF wszMainStr AS CONST WSTRING, BYREF wszLeftChar AS CONST WSTRING, BYREF wszRightChar AS CONST WSTRING) AS CWSTR
F:AfxStrUnWrap(BYREF wszMainStr AS CONST WSTRING, BYREF wszLeftChar AS CONST WSTRING, BYREF wszRightChar AS CONST WSTRING) AS CWSTR
F:AfxStrDelete(BYREF wszMainStr AS CONST WSTRING, BYVAL nStart AS LONG, BYVAL nCount AS LONG) AS CWSTR
F:AfxStrInsert(BYREF wszMainStr AS CONST WSTRING, BYREF wszInsertString AS WSTRING, BYVAL nPosition AS LONG) AS CWSTR
F:AfxStrRetain(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRetainI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRetainAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxStrRetainAnyI(BYREF wszMainStr AS CONST WSTRING, BYREF wszMatchStr AS CONST WSTRING) AS CWSTR
F:AfxIsNumeric(BYREF c AS CONST WSTRING) AS BOOLEAN
F:AfxStrShrink(BYREF wszMainStr AS CONST WSTRING, BYREF wszMask AS CONST WSTRING = " ") AS CWSTR
F:AfxStrParseCount(BYREF wszMainStr AS CONST WSTRING, BYREF wszDelimiter AS CONST WSTRING = " ") AS LONG
F:AfxStrParseCountAny(BYREF wszMainStr AS CONST WSTRING, BYREF wszDelimiter AS CONST WSTRING = " ") AS LONG
F:AfxStrParse(BYREF wszMainStr AS CONST WSTRING, BYVAL nPosition AS LONG = 1, BYREF wszDelimiter AS CONST WSTRING = " ") AS CWSTR
F:AfxStrParseAny(BYREF wszMainStr AS CONST WSTRING, BYVAL nPosition AS LONG = 1, BYREF wszDelimiter AS CONST WSTRING = " ") AS CWSTR
F:AfxStrSpn(BYREF wszText AS CONST WSTRING, BYREF wszSet AS CONST WSTRING) AS LONG
F:AfxStrFormatByteSize(BYVAL ull AS ULONGLONG) AS CWSTR
F:AfxStrFormatKBSize(BYVAL ull AS ULONGLONG) AS CWSTR
F:AfxStrFromTimeInterval(BYVAL dwTimeMS AS DWORD, BYVAL digits AS LONG) AS CWSTR
F:AfxCryptBinaryToStringA(BYVAL pbBinary AS CONST UBYTE PTR, BYVAL cbBinary AS DWORD, BYVAL dwFlags AS DWORD, BYVAL pszString AS LPSTR, BYVAL pcchString AS DWORD PTR) AS WINBOOL
F:AfxCryptBinaryToStringW(BYVAL pbBinary AS CONST UBYTE PTR, BYVAL cbBinary AS DWORD, BYVAL dwFlags AS DWORD, BYVAL pszString AS LPWSTR, BYVAL pcchString AS DWORD PTR) AS WINBOOL
F:AfxBase64Encode(BYREF strData AS STRING) AS STRING
F:AfxCryptStringToBinaryA(BYVAL pszString AS LPCSTR, BYVAL cchString AS DWORD, BYVAL dwFlags AS DWORD, BYVAL pbBinary AS UBYTE PTR, BYVAL pcbBinary AS DWORD PTR, BYVAL pdwSkip AS DWORD PTR, BYVAL pdwFlags AS DWORD PTR) AS WINBOOL
F:AfxCryptStringToBinaryW(BYVAL pwszString AS LPCWSTR, BYVAL cchString AS DWORD, BYVAL dwFlags AS DWORD, BYVAL pbBinary AS UBYTE PTR, BYVAL pcbBinary AS DWORD PTR, BYVAL pdwSkip AS DWORD PTR, BYVAL pdwFlags AS DWORD PTR) AS WINBOOL
F:AfxBase64Decode(BYREF strData AS STRING) AS STRING
F:AfxLocalFileTime() AS FILETIME
F:AfxSystemFileTime() AS FILETIME
F:AfxLocalSystemTime() AS SYSTEMTIME
F:AfxSystemSystemTime() AS SYSTEMTIME
F:AfxLocalYear() AS WORD
F:AfxSystemYear() AS WORD
F:AfxLocalMonth() AS WORD
F:AfxSystemMonth() AS WORD
F:AfxLocalDay() AS WORD
F:AfxSystemDay() AS WORD
F:AfxLocalHour() AS WORD
F:AfxSystemHour() AS WORD
F:AfxMonthName(BYVAL nMonth AS LONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalMonthName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemMonthName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxShortMonthName(BYVAL nMonth AS LONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalShortMonthName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemShortMonthName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalDayName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemDayName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalDayShortName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemDayShortName(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalDayOfWeek() AS WORD
F:AfxSystemDayOfWeek() AS WORD
F:AfxLocalDayOfWeekName(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalDayOfWeekShortName(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalDateStr(BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxLocalTimeStr(BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxAstroDay(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxAstroDayOfWeek(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxGregorianToJulian(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxDateDiff(BYVAL nDay1 AS LONG, BYVAL nMonth1 AS LONG, BYVAL nYear1 AS LONG, BYVAL nDay2 AS LONG, BYVAL nMonth2 AS LONG, BYVAL nYear2 AS LONG) AS LONG
F:AfxDateAddDays(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG, BYVAL nDays AS LONG) AS LONG
F:AfxWeekOne(BYVAL nYear AS LONG) AS LONG
F:AfxWeekNumber(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxWeeksInYear(BYVAL nYear AS LONG) AS LONG
F:AfxIsLeapYear(BYVAL nYear AS LONG) AS BOOLEAN
F:AfxDaysInMonth(BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxWeeksInMonth(BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxDaysInYear(BYVAL nYear AS LONG) AS LONG
F:AfxIsFirstDayOfMonth() AS BOOLEAN
F:AfxIsLastDayOfMonth() AS BOOLEAN
F:AfxJulianDayOfWeek(BYVAL nJulian AS LONG) AS LONG
F:AfxJulianToGregorian(BYVAL nJulian AS LONG, BYREF wDay AS WORD, BYREF wMonth AS WORD, BYREF wYear AS WORD)
F:AfxJulianToGregorianStr(BYREF wszMask AS WSTRING, BYVAL nJulian AS LONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxDayOfYear(BYVAL nDay AS LONG, BYVAL nMonth AS LONG, BYVAL nYear AS LONG) AS LONG
F:AfxDaysBetween(BYVAL nDay1 AS LONG, BYVAL nMonth1 AS LONG, BYVAL nYear1 AS LONG, BYVAL nDay2 AS LONG, BYVAL nMonth2 AS LONG, BYVAL nYear2 AS LONG) AS LONG
F:AfxLongDate(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxShortDate(BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxQuadDateTime() AS ULONGLONG
F:AfxQuadDateToStr(BYREF wszMask AS WSTRING, BYVAL ullTime AS ULONGLONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxQuadTimeToStr(BYREF wszMask AS WSTRING, BYVAL ullTime AS ULONGLONG, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxTimeZoneIsDaylightSavingTime() AS BOOLEAN
F:AfxTimeZoneBias() AS DWORD
F:AfxTimeZoneDaylightBias() AS DWORD
F:AfxTimeZoneStandardName() AS CWSTR
F:AfxTimeZoneDaylightName() AS CWSTR
F:AfxTimeZoneDaylightDay() AS WORD
F:AfxTimeZoneDaylightDayOfWeek() AS WORD
F:AfxTimeZoneDaylightHour() AS WORD
F:AfxTimeZoneDaylightMonth() AS WORD
F:AfxLocalVariantTime() AS DATE_
F:AfxSystemTimeToVariantTime(BYREF ST AS SYSTEMTIME) AS DATE_
F:AfxVariantTimeToSystemTime(BYVAL dt AS DATE_) AS SYSTEMTIME
F:AfxFileTimeToVariantTime(BYREF FT AS FILETIME) AS DATE_
F:AfxVariantDateTimeToStr(BYVAL vbDate AS DATE_, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT, BYVAL dwFlags AS DWORD = 0) AS CWSTR
F:AfxVariantDateToStr(BYVAL vbDate AS DATE_, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxVariantTimeToStr(BYVAL vbDate AS DATE_, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxFileTimeToDateStr(BYREF FT AS FILETIME, BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxFileTimeToTimeStr(BYREF FT AS FILETIME, BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemTimeToDateStr(BYREF ST AS SYSTEMTIME, BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxSystemTimeToTimeStr(BYREF ST AS SYSTEMTIME, BYREF wszMask AS WSTRING, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CWSTR
F:AfxTime64ToFileTime(BYVAL t64 AS LONGLONG) AS FILETIME
F:AfxFileTimeToTime64(BYREF ft AS FILETIME) AS LONGLONG
F:AfxSystemTimeToTime64(BYREF st AS SYSTEMTIME) AS LONGLONG
F:AfxTime64ToSystemTime(BYVAL t64 AS LONGLONG) AS SYSTEMTIME
F:AfxGmtTime64(BYVAL t64 AS LONGLONG) AS tm
F:AfxLocalTime64(BYVAL t64 AS LONGLONG) AS tm
F:AfxMakeTime64(BYREF _tm AS tm) AS LONGLONG
F:AfxTime64() AS LONGLONG
F:AfxIsValidFILETIME(BYREF ft AS FILETIME) AS BOOLEAN
F:AfxMsg(BYREF cws AS CWSTR, BYREF wszCaption AS WSTRING = "", BYVAL uType AS DWORD = 0) AS LONG
F:AfxCommand(BYVAL nIndex AS LONG = -1) AS CWSTR
F:AfxGetWinErrMsg(BYVAL dwError AS DWORD) AS CWSTR
F:AfxDoEvents(BYVAL hwnd AS HWND = NULL)
F:AfxWindowsVersion() AS LONG
F:AfxWindowsPlatform() AS LONG
F:AfxWindowsBuild() AS LONG
F:AfxIsPlatformNT() AS BOOLEAN
F:AfxGetFileVersion(BYVAL pwszFileName AS WSTRING PTR) AS LONG
F:AfxComCtlVersion() AS LONG
F:AfxGetWinDir() AS CWSTR
F:AfxGetUserName() AS CWSTR
F:AfxGetComputerName() AS CWSTR
F:AfxGetExePath() AS CWSTR
F:AfxGetExePathName() AS CWSTR
F:AfxGetExeFileName() AS CWSTR
F:AfxGetExeFileNameX() AS CWSTR
F:AfxGetExeFileExt() AS CWSTR
F:AfxGetExeFullPath() AS CWSTR
F:AfxGetFileName(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetFileNameX(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetFileExt(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetCurDir() AS CWSTR
F:AfxGetLongPathName(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetShortPathName(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetPathName(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetFolderName(BYREF wszPath AS WSTRING) AS CWSTR
F:AfxGetSystemDllPath(BYREF wszDllName AS WSTRING) AS CWSTR
F:AfxGetPathFromProcessId(BYVAL dwProcessId AS DWORD) AS CWSTR
F:AfxGetPathFromWindowHandle(BYVAL hwnd AS HWND) AS CWSTR
F:AfxGetKnowFolderPath(BYVAL rfid AS CONST KNOWNFOLDERID CONST PTR, BYVAL dwFlags AS DWORD = 0, BYVAL hToken AS HANDLE = NULL) AS CWSTR
F:AfxGetSpecialFolderLocation(BYVAL nFolder AS LONG) AS CWSTR
F:AfxControlRunDLL(BYVAL hwnd AS HWND, BYVAL hInst AS HINSTANCE, BYVAL cmd AS WSTRING PTR, BYVAL nCmdShow AS LONG) AS BOOLEAN
F:AfxSaveTempFile(BYVAL pwszBuffer AS WSTRING PTR, BYREF wszExtension AS WSTRING) AS CWSTR
F:AfxGetInternetExplorerVersion() AS SINGLE
F:AfxGetDefaultBrowserPath() AS CWSTR
F:AfxGetDefaultBrowserName() AS CWSTR
F:AfxEnumThreadWndProc(BYVAL hwnd AS HWND, BYVAL lParam AS LPARAM) AS WINBOOL
F:AfxGetBrowserHandle(BYVAL pwszClassName AS WSTRING PTR) AS HWND
F:AfxGetInternetExplorerHandle() AS HWND
F:AfxGetFireFoxHandle() AS HWND
F:AfxGetGoogleChromeHandle() AS HWND
F:AfxGetDefaultMailClientPath() AS CWSTR
F:AfxGetDefaultMailClientName() AS CWSTR
F:AfxBrowseForFolderProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:AfxBrowseForFolder(BYVAL hwnd AS HWND, BYVAL pwszTitle AS WSTRING PTR = NULL, BYVAL pwszStartFolder AS WSTRING PTR = NULL, BYVAL nFlags AS LONG = 0) AS CWSTR
F:AfxOpenFileDialog( BYVAL hwndOwner AS HWND , BYREF wszTitle AS WSTRING , BYREF wszFile AS WSTRING , BYREF wszInitialDir AS WSTRING , BYREF wszFilter AS WSTRING , BYREF wszDefExt AS WSTRING , BYVAL pdwFlags AS DWORD PTR = NULL , BYVAL pdwBufLen AS DWORD PTR = NULL ) AS CWSTR
F:AfxSaveFileDialog( BYVAL hwndOwner AS HWND , BYREF wszTitle AS WSTRING , BYREF wszFileName AS WSTRING , BYREF wszInitialDir AS WSTRING , BYREF wszFilter AS WSTRING , BYREF wszDefExt AS WSTRING , BYVAL pdwFlags AS DWORD PTR = NULL ) AS CWSTR
F:AfxShowSysInfo(BYVAL hwnd AS HWND) AS BOOLEAN
F:AfxChooseColorDialog(BYVAL hParent AS HWND, BYVAL rgbDefaultColor AS COLORREF = 0, BYVAL lpCustColors AS COLORREF PTR = NULL) AS LONG
F:AfxGetMACAddress() AS STRING
F:AfxGetWindowClassName(BYVAL hwnd AS HWND) AS CWSTR
F:AfxGetWindowText(BYVAL hwnd AS HWND) AS CWSTR
F:AfxGetWindowTextLength(BYVAL hwnd AS HWND) AS LONG
F:AfxSetWindowText(BYVAL hwnd AS HWND, BYVAL pwszText AS WSTRING PTR) AS BOOLEAN
F:AfxGetWindowStyle(BYVAL hwnd AS HWND) AS DWORD
F:AfxGetWindowExStyle(BYVAL hwnd AS HWND) AS DWORD
F:AfxSetWindowStyle(BYVAL hwnd AS HWND, BYVAL dwStyle AS DWORD) AS DWORD
F:AfxSetWindowExStyle(BYVAL hwnd AS HWND, BYVAL dwExStyle AS DWORD) AS DWORD
F:AfxAddWindowStyle(BYVAL hwnd AS HWND, BYVAL dwStyle AS DWORD) AS DWORD
F:AfxAddWindowExStyle(BYVAL hwnd AS HWND, BYVAL dwExStyle AS DWORD) AS DWORD
F:AfxRemoveWindowStyle(BYVAL hwnd AS HWND, BYVAL dwStyle AS DWORD) AS DWORD
F:AfxRemoveWindowExStyle(BYVAL hwnd AS HWND, BYVAL dwExStyle AS DWORD) AS DWORD
F:AfxGetWindowRect(BYVAL hwnd AS HWND) AS RECT
F:AfxGetWindowWidth(BYVAL hwnd AS HWND) AS LONG
F:AfxGetWindowHeight(BYVAL hwnd AS HWND) AS LONG
F:AfxGetWindowClientRect(BYVAL hwnd AS HWND) AS RECT
F:AfxGetWindowClientWidth(BYVAL hwnd AS HWND) AS LONG
F:AfxGetWindowClientHeight(BYVAL hwnd AS HWND) AS LONG
F:AfxGetWorkAreaRect() AS RECT
F:AfxGetWorkAreaWidth() AS LONG
F:AfxGetWorkAreaHeight() AS LONG
F:AfxCenterWindow(BYVAL hwnd AS HWND = NULL, BYVAL hwndParent AS HWND = NULL)
F:AfxSetWindowClientSize(BYVAL hwnd AS HWND, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL rxRatio AS SINGLE = 1, BYVAL ryRatio AS SINGLE = 1)
F:AfxCenterControlH(BYVAL hCtrl AS HWND)
F:AfxCenterControlV(BYVAL hCtrl AS HWND)
F:AfxRedrawWindow(BYVAL hwnd AS HWND)
F:AfxRedrawNonClientArea(BYVAL hwnd AS HWND) AS BOOLEAN
F:AfxForwardSizeMessage(BYVAL hwnd AS HWND, BYVAL nResizeType AS DWORD, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG) AS LRESULT
F:AfxSetWindowLocation(BYVAL hwnd AS HWND, BYVAL nLeft AS LONG, BYVAL nTop AS LONG) AS BOOLEAN
F:AfxSetWindowSize(BYVAL hwnd AS HWND, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG) AS BOOLEAN
F:AfxShowWindowState(BYVAL hwnd AS HWND, BYVAL nShowState AS LONG) AS BOOLEAN
F:AfxSetWindowIcon(BYVAL hwnd AS HWND, BYVAL nIconType AS LONG, BYVAL hIcon AS HICON) AS HICON
F:AfxForceVisibleDisplay(BYVAL hwnd AS HWND)
F:AfxGetTopLevelWindow(BYVAL hwnd AS HWND) AS HWND
F:AfxGetTopLevelParent(BYVAL hwnd AS HWND) AS HWND
F:AfxGetFormHandle(BYVAL hwnd AS HWND) AS HWND
F:AfxGetControlHandle_ChildEnumProc(BYVAL hwnd AS HWND, BYVAL lParam AS LPARAM) AS LONG
F:AfxGetControlHandle(BYVAL hwnd AS HWND, BYVAL wCtrlID AS WORD) AS HWND
F:AfxGetTopEnabledWindow_EnumWindowsProc(BYVAL hWnd AS HWND, BYVAL lParam AS LPARAM) AS LONG
F:AfxGetTopEnabledWindow() AS HWND
F:AfxGethWndFromPID(BYVAL PID AS DWORD) AS HWND
F:AfxGetWindowLocation(BYVAL hwnd AS HWND, BYREF nLeft AS LONG, BYREF nTop AS LONG)
F:AfxSetDlgMsgResult(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL result AS LONG) AS BOOLEAN
F:AfxGetDisplayPixelsWidth() AS DWORD
F:AfxGetDisplayPixelsHeight() AS DWORD
F:AfxGetDisplayBitsPerPixel() AS DWORD
F:AfxGetDisplayFrequency() AS DWORD
F:AfxSetProcessDPIAware() AS BOOLEAN
F:AfxIsProcessDPIAware() AS BOOLEAN
F:AfxUseDpiScaling() AS BOOLEAN
F:AfxLogPixelsX() AS LONG
F:AfxLogPixelsY() AS LONG
F:AfxScaleRatioX() AS SINGLE
F:AfxScaleRatioY() AS SINGLE
F:AfxScaleX(BYVAL cx AS SINGLE) AS SINGLE
F:AfxScaleY(BYVAL cy AS SINGLE) AS SINGLE
F:AfxUnscaleX(BYVAL cx AS SINGLE) AS SINGLE
F:AfxUnscaleY(BYVAL cy AS SINGLE) AS SINGLE
F:AfxIsResolutionAtLeast(BYVAL cxMin AS LONG, BYVAL cyMin AS LONG) AS BOOLEAN
F:AfxIsDPIResolutionAtLeast(BYVAL cxMin AS LONG, BYVAL cyMin AS LONG) AS BOOLEAN
F:AfxGetMonitorLogicalWidth(BYVAL hwnd AS HWND = NULL) AS DWORD
F:AfxGetMonitorLogicalHeight(BYVAL hwnd AS HWND = NULL) AS DWORD
F:AfxGetMonitorHorizontalScaling(BYVAL hwnd AS HWND = NULL) AS DWORD
F:AfxGetMonitorVerticalScaling(BYVAL hwnd AS HWND = NULL) AS DWORD
F:AfxLoadIconMetric(BYVAL hinst AS HINSTANCE, BYVAL pszName AS PCWSTR, BYVAL lims AS LONG, BYVAL phico AS HICON PTR) AS HRESULT
F:AfxHiMetricToPixelsX(BYVAL hm AS LONG) AS LONG
F:AfxHiMetricToPixelsY(BYVAL hm AS LONG) AS LONG
F:AfxPixelsToHiMetricX(BYVAL cx AS LONG) AS LONG
F:AfxPixelsToHiMetricY(BYVAL cy AS LONG) AS LONG
F:AfxPixelsToPointsX(BYVAL pix AS LONG) AS LONG
F:AfxPixelsToPointsY(BYVAL pix AS LONG) AS LONG
F:AfxPointsToPixelsX(BYVAL pts AS LONG) AS LONG
F:AfxPointsToPixelsY(BYVAL pts AS LONG) AS LONG
F:AfxPixelsToTwipsX(BYVAL nPixels AS LONG) AS LONG
F:AfxPixelsToTwipsY(BYVAL nPixels AS LONG) AS LONG
F:AfxTwipsToPixelsX(BYVAL nTwips AS LONG) AS LONG
F:AfxTwipsToPixelsY(BYVAL nTwips AS LONG) AS LONG
F:AfxTwipsPerPixelX() AS LONG
F:AfxTwipsPerPixelY() AS LONG
F:AfxPointSizeToDip(BYVAL ptsize AS SINGLE) AS SINGLE
F:AfxClearClipboard() AS LONG
F:AfxGetClipboardData(BYVAL cfFormat AS DWORD) AS HGLOBAL
F:AfxSetClipboardData(BYVAL cfFormat AS DWORD, BYVAL hData AS HANDLE) AS HANDLE
F:AfxGetClipboardText() AS CWSTR
F:AfxSetClipboardText(BYREF wszText AS WSTRING) AS HANDLE
F:AfxGetWindowFont(BYVAL hwnd AS HWND) AS HFONT
F:AfxSetWindowFont(BYVAL hwnd AS HWND, BYVAL hFont AS HFONT, BYVAL fRedraw AS LONG = CTRUE)
F:AfxGetWindowsFontInfo(BYVAL nType AS LONG, BYVAL plfw AS LOGFONTW PTR) AS BOOLEAN
F:AfxGetWindowsFontPointSize(BYVAL nType AS LONG) AS LONG
F:AfxGetFontPointSize(BYVAL nHeight AS LONG) AS LONG
F:AfxGetFontHeight(BYVAL nPointSize AS LONG) AS LONG
F:AfxModifyFontFaceName(BYVAL hwnd AS HWND, BYREF wszNewFaceName AS WSTRING) AS HFONT
F:AfxModifyFontSettings(BYVAL hwnd AS HWND, BYVAL nSetting AS LONG, BYVAL nValue AS LONG) AS HFONT
F:AfxModifyFontHeight(BYVAL hwnd AS HWND, BYVAL nValue AS LONG) AS HFONT
F:AfxCreateFont(BYREF wszFaceName AS WSTRING, BYVAL lPointSize AS LONG, BYVAL DPI AS LONG = 96, BYVAL lWeight AS LONG = 0, BYVAL bItalic AS UBYTE = FALSE, BYVAL bUnderline AS UBYTE = FALSE, BYVAL bStrikeOut AS UBYTE = FALSE, BYVAL bCharSet AS UBYTE = DEFAULT_CHARSET) AS HFONT
F:AfxCreateDIBSection(BYVAL hDC AS HDC, BYVAL nWidth AS DWORD, BYVAL nHeight AS DWORD, BYVAL bpp AS LONG = 0, BYVAL ppvBits AS ANY PTR PTR = NULL) AS HBITMAP
F:AfxDibLoadImage(BYVAL pwszFileName AS WSTRING PTR) AS BITMAPFILEHEADER PTR
F:AfxDibSaveImage(BYVAL pwszFileName AS WSTRING PTR, BYVAL pbmfh AS BITMAPFILEHEADER PTR) AS BOOLEAN
F:AfxGetBitmapWidth(BYVAL hBitmap AS HBITMAP) AS LONG
F:AfxGetBitmapHeight(BYVAL hBitmap AS HBITMAP) AS LONG
F:AfxCaptureDisplay() AS HBITMAP
F:AfxDrawBitmap(BYVAL hDC AS HDC, BYVAL xStart AS LONG, BYVAL yStart AS LONG, BYVAL hBitmap AS HBITMAP) AS BOOLEAN
F:AfxFileExists(BYVAL pwszFileSpec AS WSTRING PTR) AS BOOLEAN
F:AfxDeleteFile(BYVAL pwszFileSpec AS WSTRING PTR) AS LONG
F:AfxFolderExists(BYVAL pwszFileSpec AS WSTRING PTR) AS BOOLEAN
F:AfxIsFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsFolder(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsSystemFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsHiddenFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsReadOnlyFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsTemporaryFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsNormalFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsCompressedFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsEncryptedFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsNotContentIndexedFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsOffLineFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsReparsePointFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxIsSparseFile(BYREF wszFileSpec AS WSTRING) AS BOOLEAN
F:AfxGetFileSize(BYREF wszFileSpec AS WSTRING) AS ULONGLONG
F:AfxGetFileCreationTime(BYREF wszFileSpec AS WSTRING, BYVAL bUTC AS BOOLEAN = TRUE) AS FILETIME
F:AfxGetFileLastAccessTime(BYREF wszFileSpec AS WSTRING, BYVAL bUTC AS BOOLEAN = TRUE) AS FILETIME
F:AfxGetFileLastWriteTime(BYREF wszFileSpec AS WSTRING, BYVAL bUTC AS BOOLEAN = TRUE) AS FILETIME
F:AfxFileScanA(BYREF wszFileName AS WSTRING, BYREF szDelimiter AS ZSTRING = CHR(13, 10)) AS DWORD
F:AfxFileScanW(BYREF wszFileName AS WSTRING, BYREF wszDelimiter AS WSTRING = CHR(13, 10)) AS DWORD
F:AfxIsUserAnAdmin() AS BOOLEAN
F:AfxGetBaseBoardSerialNumber(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetBiosSerialNumber(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetManufacturerSerialNumber(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetDiskDriveSerialNumber(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetAddressWidth(BYREF wszServerName AS WSTRING = " ") AS USHORT
F:AfxGetSystemType(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSArchitecture(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetPCSystemType(BYREF wszServerName AS WSTRING = " ") AS USHORT
F:AfxGetBootDevice(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSBuildNumber(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSBuildType(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCaption(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCodeSet(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCountryCode(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCSDVersion(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCSName(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSCurrentTimeZone(BYREF wszServerName AS WSTRING = " ") AS USHORT
F:AfxGetOSLocale(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSRegisteredUser(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSSystemDirectory(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSSystemDrive(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSVersion(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSOrganization(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSInstallDate(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSLastBootUpTime(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSLocalDateTime(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:AfxGetOSEncryptionLevel(BYREF wszServerName AS WSTRING = " ") AS ULONG
F:AfxGetOSFreePhysicalMemory(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetOSFreeSpaceInPagingFiles(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetOSFreeVirtualMemory(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetOSMaxNumberOfProcesses(BYREF wszServerName AS WSTRING = " ") AS ULONG
F:AfxGetOSMaxProcessMemorySize(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetOSNumberOfProcesses(BYREF wszServerName AS WSTRING = " ") AS ULONG
F:AfxGetOSNumberOfUsers(BYREF wszServerName AS WSTRING = " ") AS ULONG
F:AfxGetOSLanguage(BYREF wszServerName AS WSTRING = " ") AS ULONG
F:AfxGetOSTotalVirtualMemorySize(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetOSTotalVisibleMemorySize(BYREF wszServerName AS WSTRING = " ") AS ULONGLONG
F:AfxGetNetworkAdapterMACAddress(BYREF wszServerName AS WSTRING = " ") AS CWSTR
F:DWStrIsBstr(BYVAL pv aS ANY PTR) AS BOOLEAN
F:BSTRING.Append(BYVAL pwszStr AS WSTRING PTR)
F:BSTRING.Attach(BYVAL pbstrSrc AS BSTR)
F:BSTRING.Detach() AS BSTR
F:BSTRING.Copy() AS BSTR
F:BSTRING.bptr() AS BSTR
F:BSTRING.vptr() AS ANY PTR
F:BSTRING.sptr() AS WSTRING PTR
F:BSTRING.wstr() BYREF AS CONST WSTRING
F:BSTRING.wchar() AS WSTRING PTR
F:CAdoCommand.vptr() AS Afx_ADOCommand PTR PTR
F:CAdoCommand.Attach(BYVAL pCommand AS Afx_ADOCommand PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoCommand.Execute(BYVAL RecordsAffected AS LONG PTR = NULL, BYREF cvParameters AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYVAL Options AS LONG = adCmdUnspecified) AS Afx_ADORecordset PTR
F:CAdoCommand.Cancel() AS HRESULT
F:CAdoCommand.CreateParameter(BYREF cbsName AS CBSTR = "", BYVAL nType AS DataTypeEnum = 0, BYVAL Direction AS ParameterDirectionEnum = adParamInput, BYVAL Size AS LONG = 0, BYREF cvValue AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS Afx_ADOParameter PTR
F:CAdoCommand.GetErrorInfo(BYVAL nError AS HRESULT = 0) AS CBSTR
F:CAdoConnection.vptr() AS Afx_ADOConnection PTR PTR
F:CAdoConnection.Attach(BYVAL pCommand AS Afx_ADOConnection PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoConnection.Open(BYREF cbsConStr AS CBSTR = "", BYREF cbsUserID AS CBSTR = "", BYREF cbsPassword AS CBSTR = "", BYVAL Options AS LONG = adOptionUnspecified) AS HRESULT
F:CAdoConnection.Close() AS HRESULT
F:CAdoConnection.Execute(BYREF cbsCommandText AS CBSTR, BYVAL RecordsAffected AS LONG PTR = NULL, BYVAL Options AS LONG = -1) AS Afx_ADORecordset PTR
F:CAdoConnection.BeginTrans() AS LONG
F:CAdoConnection.CommitTrans() AS HRESULT
F:CAdoConnection.RollbackTrans() AS HRESULT
F:CAdoConnection.Cancel() AS HRESULT
F:CAdoConnection.OpenSchema(BYVAL Schema AS SchemaEnum, BYREF Restrictions AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYREF SchemaID AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS Afx_ADORecordset PTR
F:CAdoConnection.GetErrorInfo(BYVAL nError AS HRESULT = 0) AS CBSTR
F:CAdoBase.GetLastResult() AS HRESULT
F:CAdoBase.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:AfxAdoGetRuntimeErrorInfo(BYVAL wError AS WORD) AS CBSTR
F:AfxAdoGetErrorInfo(BYVAL pConnection AS AFX_ADOConnection PTR, BYVAL nError AS HRESULT = 0) AS CBSTR
F:CAdoError.vptr() AS Afx_ADOError PTR PTR
F:CAdoError.Attach(BYVAL pError AS Afx_ADOError PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoErrors.vptr() AS Afx_ADOErrors PTR PTR
F:CAdoErrors.Attach(BYVAL pErrors AS Afx_ADOErrors PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoErrors.NewEnum() AS Afx_IUnknown PTR
F:CAdoErrors.Refresh() AS HRESULT
F:CAdoErrors.Clear() AS HRESULT
F:CAdoField.vptr() AS Afx_ADOField PTR PTR
F:CAdoField.Attach(BYVAL pField AS Afx_ADOField PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoField.AppendChunk(BYREF cvData AS CVAR) AS HRESULT
F:CAdoField.GetChunk(BYVAL nLen AS LONG) AS CVAR
F:CAdoFields.vptr() AS Afx_ADOFields PTR PTR
F:CAdoFields.Attach(BYVAL pFields AS Afx_ADOFields PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoFields.Append(BYREF cbsName AS CBSTR, BYVAL nType AS DataTypeEnum, BYVAL DefinedSize AS ADO_LONGPTR = 0, BYVAL Attrib AS FieldAttributeEnum = 0, BYREF cvFieldValue AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS HRESULT
F:CAdoFields.Delete_(BYREF cvIndex AS CVAR) AS HRESULT
F:CAdoFields.NewEnum() AS Afx_IUnknown PTR
F:CAdoFields.Refresh() AS HRESULT
F:CAdoFields.Resync(BYVAL ResyncValues AS ResyncEnum = adResyncAllValues) AS HRESULT
F:CAdoFields.Update() AS HRESULT
F:CAdoFields.CancelUpdate() AS HRESULT
F:CAdoParameter.vptr() AS Afx_ADOParameter PTR PTR
F:CAdoParameter.Attach(BYVAL pParameter AS Afx_ADOParameter PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoParameter.AppendChunk(BYREF cvData AS CVAR) AS HRESULT
F:CAdoParameters.vptr() AS Afx_ADOParameters PTR PTR
F:CAdoParameters.Attach(BYVAL pParameters AS Afx_ADOParameters PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoParameters.NewEnum() AS Afx_IUnknown PTR
F:CAdoParameters.Refresh() AS HRESULT
F:CAdoParameters.Append(BYVAL pObject AS Afx_IDispatch PTR) AS HRESULT
F:CAdoParameters.Append(BYREF pParam AS CAdoParameter) AS HRESULT
F:CAdoParameters.Delete_(BYREF cvIndex AS CVAR) AS HRESULT
F:CAdoProperty.vptr() AS Afx_ADOProperty PTR PTR
F:CAdoProperty.Attach(BYVAL pProperty AS Afx_ADOProperty PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoProperties.vptr() AS Afx_ADOProperties PTR PTR
F:CAdoProperties.Attach(BYVAL pProperties AS Afx_ADOProperties PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoProperties.Refresh() AS HRESULT
F:CAdoProperties.NewEnum() AS Afx_IUnknown PTR
F:CAdoRecord.vptr() AS Afx_ADORecord PTR PTR
F:CAdoRecord.Attach(BYVAL pRecord AS Afx_ADORecord PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoRecord.Close() AS HRESULT
F:CAdoRecord.Cancel() AS HRESULT
F:CAdoRecord.GetChildren() AS Afx_ADORecordset PTR
F:CAdoRecord.Open(BYREF cvSource AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYREF cvActiveConnection AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYVAL nMode AS ConnectModeEnum = adModeUnknown, BYVAL CreateOptions AS RecordCreateOptionsEnum = adFailIfNotExists, BYREF cbsUserName AS CBSTR = "", BYREF cbsPassword AS CBSTR = "") AS HRESULT
F:CAdoRecord.MoveRecord(BYREF cbsSource AS CBSTR = "", BYREF cbsDestination AS CBSTR = "", BYREF cbsUserName AS CBSTR = "", BYREF cbsPassword AS CBSTR = "", BYVAL Options AS MoveRecordOptionsEnum = adMoveUnspecified, BYVAL Async AS BOOLEAN = FALSE) AS CBSTR
F:CAdoRecord.CopyRecord(BYREF cbsSource AS CBSTR = "", BYREF cbsDestination AS CBSTR = "", BYREF cbsUserName AS CBSTR = "", BYREF cbsPassword AS CBSTR = "", BYVAL Options AS MoveRecordOptionsEnum = adMoveUnspecified, BYVAL Async AS BOOLEAN = FALSE) AS CBSTR
F:CAdoRecord.DeleteRecord(BYREF cbsSource AS CBSTR = "", BYVAL Async AS BOOLEAN = FALSE) AS HRESULT
F:CAdoRecord.GetErrorInfo(BYVAL nError AS HRESULT = 0) AS CBSTR
F:CAdoRecordset.vptr() AS Afx_ADORecordset PTR PTR
F:CAdoRecordset.Open(BYREF cvSource AS CVAR, BYREF cActiveConnection AS CAdoConnection, BYVAL nCursorType AS CursorTypeEnum = adOpenUnspecified, BYVAL nLockType AS LockTypeEnum = adLockUnspecified, BYVAL nOptions AS LONG = adCmdUnspecified) AS HRESULT
F:CAdoRecordset.Open(BYREF cvSource AS CVAR, BYREF cvActiveConnection AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYVAL nCursorType AS CursorTypeEnum = adOpenUnspecified, BYVAL nLockType AS LockTypeEnum = adLockUnspecified, BYVAL nOptions AS LONG = adCmdUnspecified) AS HRESULT
F:CAdoRecordset.Open(BYREF cvSource AS CVAR, BYVAL pActiveConnection AS CAdoConnection PTR, BYVAL nCursorType AS CursorTypeEnum = adOpenUnspecified, BYVAL nLockType AS LockTypeEnum = adLockUnspecified, BYVAL nOptions AS LONG = adCmdUnspecified) AS HRESULT
F:CAdoRecordset.Open(BYVAL nCursorType AS CursorTypeEnum = adOpenUnspecified, BYVAL nLockType AS LockTypeEnum = adLockUnspecified, BYVAL nOptions AS LONG = adCmdUnspecified) AS HRESULT
F:CAdoRecordset.Attach(BYVAL pRecordset AS AFX_ADORecordset PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CAdoRecordset.ActiveCommand() AS Afx_ADOCommand PTR
F:CAdoRecordset.GetString(BYVAL StringFormat AS StringFormatEnum = adClipString, BYVAL NumRows AS LONG = adReadAll, BYREF cbsColumnDelimeter AS CBSTR = "", BYREF cbsRowDelimeter AS CBSTR = "", BYREF cbsNullExpr AS CBSTR = "") AS CBSTR
F:CAdoRecordset.Move(BYVAL NumRecords AS LONG, BYVAL start AS BookmarkEnum = adBookmarkCurrent) AS HRESULT
F:CAdoRecordset.Move(BYVAL NumRecords AS LONG, BYREF cvStart AS CVAR) AS HRESULT
F:CAdoRecordset.MoveNext() AS HRESULT
F:CAdoRecordset.MovePrevious() AS HRESULT
F:CAdoRecordset.MoveFirst() AS HRESULT
F:CAdoRecordset.MoveLast() AS HRESULT
F:CAdoRecordset.Resync(BYVAL AffectRecords AS AffectEnum = adAffectAll, BYVAL ResyncValues AS ResyncEnum = adResyncAllValues) AS HRESULT
F:CAdoRecordset.Requery(BYVAL Options AS LONG = adOpenUnspecified) AS HRESULT
F:CAdoRecordset.NextRecordset(BYVAL RecordsAffected AS LONG PTR = NULL) AS Afx_AdoRecordset PTR
F:CAdoRecordset.Supports(BYVAL CursorOptions AS CursorOptionEnum) AS BOOLEAN
F:CAdoRecordset.UpdateBatch(BYVAL AffectRecords AS AffectEnum = adAffectAll) AS HRESULT
F:CAdoRecordset.CancelBatch(BYVAL AffectRecords AS AffectEnum = adAffectAll) AS HRESULT
F:CAdoRecordset.CancelUpdate() AS HRESULT
F:CAdoRecordset.Close() AS HRESULT
F:CAdoRecordset.Clone(BYVAL nLockType AS LockTypeEnum = adLockUnspecified) AS Afx_AdoRecordset PTR
F:CAdoRecordset.Cancel() AS HRESULT
F:CAdoRecordset.Delete_(BYVAL AffectRecords AS AffectEnum = adAffectCurrent) AS HRESULT
F:CAdoRecordset.Save(BYREF cvDestination AS CVAR, BYVAL PersistFormat AS PersistFormatEnum = adPersistADTG) AS HRESULT
F:CAdoRecordset.Save(BYVAL pDestination AS Afx_AdoStream PTR, BYVAL PersistFormat AS PersistFormatEnum = adPersistADTG) AS HRESULT
F:CAdoRecordset.CompareBookmarks(BYREF cvBookmark1 AS CVAR, BYREF cvBookmark2 AS CVAR) AS CompareEnum
F:CAdoRecordset.Find(BYREF cbsCriteria AS CBSTR, BYREF cvStart AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYVAL SkipRecords AS LONG = 0, BYVAL SearchDirection AS SearchDirectionEnum = adSearchForward) AS HRESULT
F:CAdoRecordset.GetRows(BYVAL Rows AS LONG = adGetRowsRest, BYREF cvStart AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYREF cvFields AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS SAFEARRAY PTR
F:CAdoRecordset.Seek(BYREF cvKeyValues AS CVAR, BYVAL SeekOption AS SeekEnum = adSeekFirstEQ) AS HRESULT
F:CAdoRecordset.AddNew(BYREF cvFieldList AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYREF cvValues AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS HRESULT
F:CAdoRecordset.Update(BYREF cvFieldList AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYREF cvValues AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND)) AS HRESULT
F:CAdoRecordset.GetErrorInfo(BYVAL nError AS HRESULT = 0) AS CBSTR
F:CAdoStream.vptr() AS Afx_ADOStream PTR PTR
F:CAdoStream.Attach(BYVAL pStream AS Afx_ADOStream PTR, BYVAL fAddRef AS BOOLEAN = FALSE)
F:CAdoStream.Read(BYVAL NumBytes AS LONG = adReadAll) AS CVAR
F:CAdoStream.Read(BYVAL NumBytes AS LONG = adReadAll, BYREF cvValue AS CVAR) AS HRESULT
F:CAdoStream.Open(BYREF cvSource AS CVAR = TYPE<VARIANT>(VT_ERROR,0,0,0,DISP_E_PARAMNOTFOUND), BYVAL nMode AS ConnectModeEnum = adModeUnknown, BYVAL Options AS StreamOpenOptionsEnum = adOpenStreamUnspecified, BYREF cbsUserName AS CBSTR = "", BYREF cbsPassword AS CBSTR = "") AS HRESULT
F:CAdoStream.Close() AS HRESULT
F:CAdoStream.SkipLine() AS HRESULT
F:CAdoStream.Write(BYREF cvBuffer AS CVAR) AS HRESULT
F:CAdoStream.WriteText(BYREF cbsData AS CBSTR, BYVAL Options AS StreamWriteEnum = adWriteChar) AS HRESULT
F:CAdoStream.SetEOS() AS HRESULT
F:CAdoStream.CopyTo(BYVAL pDestStream AS Afx_ADOStream PTR, BYVAL CharNumber AS LONG = adReadAll) AS HRESULT
F:CAdoStream.Flush() AS HRESULT
F:CAdoStream.SaveToFile(BYREF cbsFileName AS CBSTR, BYVAL Options AS SaveOptionsEnum = adSaveCreateNotExist) AS HRESULT
F:CAdoStream.LoadFromFile(BYREF cbsFileName AS CBSTR) AS HRESULT
F:CAdoStream.ReadText(BYVAL NumChars AS LONG = adReadAll) AS CBSTR
F:CAdoStream.ReadText(BYVAL NumChars AS LONG = adReadAll, BYREF cbsText AS CBSTR) AS HRESULT
F:CAdoStream.Cancel() AS HRESULT
F:CAtlCon.WinInit() AS BOOLEAN
F:CAtlCon.Init() AS BOOLEAN
F:CAtlCon.AddControl(BYVAL pWindow AS CWindow PTR, BYVAL cID AS INTEGER, BYREF wszName AS WSTRING = "", BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYVAL nWidth AS LONG = 0, BYVAL nHeight AS LONG = 0, BYVAL dwStyle AS DWORD = WS_VISIBLE OR WS_CHILD OR WS_TABSTOP, BYVAL dwExStyle AS DWORD = 0) AS HWND
F:CAtlCon.AddControl(BYVAL pWindow AS CWindow PTR, BYVAL cID AS INTEGER, BYREF wszProgID AS WSTRING, BYREF wszLicKey AS WSTRING, BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYVAL nWidth AS LONG = 0, BYVAL nHeight AS LONG = 0, BYVAL dwStyle AS DWORD = WS_VISIBLE OR WS_CHILD OR WS_TABSTOP, BYVAL dwExStyle AS DWORD = 0) AS HWND
F:CAtlCon.AddControl(BYVAL pWindow AS CWindow PTR, BYVAL cID AS INTEGER, BYREF wszLibName AS CONST WSTRING, BYREF rclsid AS CONST CLSID, BYREF riid AS CONST IID, BYREF wszLicKey AS WSTRING = "", BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYVAL nWidth AS LONG = 0, BYVAL nHeight AS LONG = 0, BYVAL dwStyle AS DWORD = WS_VISIBLE OR WS_CHILD OR WS_TABSTOP, BYVAL dwExStyle AS DWORD = 0) AS HWND
F:CAtlCon.AttachControl(BYVAL pControl AS IUnknown PTR, BYVAL hCtl AS HWND) AS HRESULT
F:CAtlCon.AtlVersion() AS DWORD
F:CAtlCon.HiMetricToPixel(BYREF SizeInHiMetric AS SIZEL) AS SIZEL
F:CAtlCon.PixelToHiMetric(BYREF SizeInPix AS SIZEL) AS SIZEL
F:CAtlCon.GetHost(BYVAL hwnd AS .HWND) AS IUnknown PTR
F:CAtlCon.GetControl(BYVAL hwnd AS .HWND) AS IUnknown PTR
F:CAtlCon.GetDispatch(BYVAL hwnd AS .HWND) AS IDispatch PTR
F:CAtlCon.Advise(BYVAL punkCP AS IUnknown PTR, BYVAL punk AS IUnknown PTR, BYVAL riid AS IID PTR, BYREF dwCookie AS DWORD) AS HRESULT
F:CAtlCon.Unadvise(BYVAL punkCP AS IUnknown PTR, BYVAL riid AS IID PTR, BYVAL dwCookie AS DWORD) AS HRESULT
F:CWebCtx.hWindow() AS HWND
F:CWebCtx.BrowserPtr() AS Afx_IWebBrowser2 PTR
F:CWebCtx.Navigate(BYVAL pwszUrl AS WSTRING PTR, BYVAL Flags AS VARIANT PTR = NULL, BYVAL TargetFrameName AS VARIANT PTR = NULL, BYVAL PostData AS VARIANT PTR = NULL, BYVAL Headers AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.Navigate(BYVAL pvUrl AS VARIANT PTR, BYVAL Flags AS VARIANT PTR = NULL, BYVAL TargetFrameName AS VARIANT PTR = NULL, BYVAL PostData AS VARIANT PTR = NULL, BYVAL Headers AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.WaitForPageLoad(BYVAL dbTimeout AS DOUBLE = 10) AS tagREADYSTATE
F:CWebCtx.SetFocus() AS HRESULT
F:CWebCtx.GoBack() AS HRESULT
F:CWebCtx.GoForward() AS HRESULT
F:CWebCtx.GoHome() AS HRESULT
F:CWebCtx.GoSearch() AS HRESULT
F:CWebCtx.Refresh() AS HRESULT
F:CWebCtx.Refresh2(BYVAL nLevel AS RefreshConstants) AS HRESULT
F:CWebCtx.PrintPreview() AS HRESULT
F:CWebCtx.PrintPage(BYVAL bPromptUser AS BOOLEAN = TRUE) AS HRESULT
F:CWebCtx.PageSetUp() AS HRESULT
F:CWebCtx.PageProperties() AS HRESULT
F:CWebCtx.SaveAs() AS HRESULT
F:CWebCtx.Find() AS HRESULT
F:CWebCtx.ShowSource() AS HRESULT
F:CWebCtx.InternetOptions() AS HRESULT
F:CWebCtx.Stop() AS HRESULT
F:CWebCtx.QueryStatusWB(BYVAL cmdID AS OLECMDID) AS OLECMDF
F:CWebCtx.ExecWB(BYVAL cmdID AS OLECMDID, BYVAL cmdexecopt AS OLECMDEXECOPT, BYVAL pvaIn AS VARIANT PTR = NULL, BYVAL pvaOut AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.WriteHtml(BYREF cwsHtml AS CWSTR, BYVAL cr AS BOOLEAN = FALSE) AS HRESULT
F:CWebCtx.GetBodyInnerText() AS CWSTR
F:CWebCtx.GetBodyInnerHtml() AS CWSTR
F:CWebCtx.GetActiveElementId() AS CWSTR
F:CWebCtx.GetElementValueById(BYREF cwsId AS CWSTR) AS VARIANT
F:CWebCtx.SetElementValueById(BYREF cwsId AS CWSTR, BYVAL vValue AS VARIANT) AS HRESULT
F:CWebCtx.GetElementInnerHtmlById(BYREF cwsId AS CWSTR) AS CWSTR
F:CWebCtx.SetElementInnerHtmlById(BYREF cwsId AS CWSTR, BYREF cwsHtml AS CWSTR) AS HRESULT
F:CWebCtx.SetElementFocusById(BYREF cwsId AS CWSTR) AS HRESULT
F:AtlControlWindow(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS HWND
F:AtlControlUnknown(BYVAL hwnd AS HWND) AS Afx_IUnknown PTR
F:AtlControlDispatch(BYVAL hwnd AS HWND) AS Afx_IDispatch PTR
F:AtlControlObject(BYVAL hwnd AS HWND) AS Afx_IDispatch PTR
F:AtlBrowserDispatch(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS Afx_IWebBrowser2 PTR
F:AtlBrowserObject(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS Afx_IWebBrowser2 PTR
F:AtlCWebCtx(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS CWebCtx PTR
F:AtlCreateFontDisp( BYREF wszFontName AS WSTRING, BYVAL cySize AS LONGLONG, BYVAL fWeight AS SHORT, BYVAL fCharset AS SHORT, BYVAL fItalic AS WINBOOL, BYVAL fUnderline AS WINBOOL, BYVAL fStrikethrough AS WINBOOL ) AS IFontDisp PTR
F:AtlForwardMessage(BYVAL hctl AS HWND, BYVAL pMsg AS tagMsg PTR) AS BOOLEAN
F:AtlWaitForPageLoad(BYVAL hCtl AS HWND, BYVAL dbTimeout AS DOUBLE = 10) AS tagREADYSTATE
F:CAxHost.RegisterClass() AS ATOM
F:CAxHost.CreateContainer(BYVAL pWindow AS CWindow PTR, BYVAL cID AS LONG_PTR, BYREF wszProgID AS WSTRING, BYREF wszLibName AS WSTRING, BYREF rclsid AS const CLSID, BYREF riid AS const IID, BYREF wszLicKey AS WSTRING, BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYVAL nWidth AS LONG = 0, BYVAL nHeight AS LONG = 0, BYVAL dwStyle AS DWORD = 0, BYVAL dwExStyle AS DWORD = 0, BYVAL pAmbientDisp AS CAXHOST_AMBIENTDISP PTR = NULL)
F:CAxHost.hWindow() AS HANDLE
F:CAxHost.CtrlID() AS LONG
F:CAxHost.OcxDispPtr() AS IDispatch PTR
F:CAxHost.OcxDispObj() AS IDispatch PTR
F:CAxHost.Advise(BYVAL pEvtObj AS IDispatch PTR, BYVAL riid AS IID PTR) AS HRESULT
F:CAxHost.Advise(BYVAL pEvtObj AS IDispatch PTR, BYREF riid AS CONST IID) AS HRESULT
F:CAxHost.Advise(BYVAL pEvtObj AS IDispatch PTR, BYREF riid AS IID) AS HRESULT
F:CAxHost.Advise(BYVAL pEvtObj AS Afx_IDispatch PTR, BYVAL riid AS IID PTR) AS HRESULT
F:CAxHost.Advise(BYVAL pEvtObj AS Afx_IDispatch PTR, BYREF riid AS CONST IID) AS HRESULT
F:CAxHost.Advise(BYVAL pEvtObj AS Afx_IDispatch PTR, BYREF riid AS IID) AS HRESULT
F:CAxHost.Unadvise() AS HRESULT
F:CAxHost.PixelsToHiMetric(BYVAL SizeInPix AS SIZEL PTR, BYVAL SizeInHiMetric AS SIZEL PTR)
F:CAxHost.OleCreateFontDisp( BYREF wszFontName AS WSTRING, BYVAL cySize AS LONGLONG, BYVAL fWeight AS SHORT = FW_NORMAL, BYVAL fItalic AS WINBOOL = FALSE, BYVAL fUnderline AS WINBOOL = FALSE, BYVAL fStrikethrough AS WINBOOL = FALSE, BYVAL fCharset AS SHORT = DEFAULT_CHARSET ) AS IFontDisp PTR
F:CAxHost.OleCreateFont( BYREF wszFontName AS WSTRING, BYVAL cySize AS LONGLONG, BYVAL fWeight AS SHORT = FW_NORMAL, BYVAL fItalic AS WINBOOL = FALSE, BYVAL fUnderline AS WINBOOL = FALSE, BYVAL fStrikethrough AS WINBOOL = FALSE, BYVAL fCharset AS SHORT = DEFAULT_CHARSET ) AS IFont PTR
F:CAxHost.GuidFromStr(BYVAL pwszGuidText AS WSTRING PTR = NULL) AS GUID
F:CAxHost.GuidText(BYVAL classID AS CLSID PTR) AS STRING
F:CAxHost.GuidText(BYVAL riid AS REFIID) AS STRING
F:CAxHost.GuidText(BYVAL classID AS CLSID) AS STRING
F:CAxHost.CreateObject(BYREF wszProgID AS WSTRING) AS IDispatch PTR
F:CAxHost.CreateObject(BYREF wszProgID AS WSTRING, BYREF wszLicKey AS WSTRING) AS IDispatch PTR
F:CAxHost.CreateObject(BYREF classID AS CONST CLSID, BYREF riid AS CONST IID) AS IDispatch PTR
F:CAxHost.CreateObject(BYREF classID AS CONST CLSID, BYREF riid AS CONST IID, BYREF wszLicKey AS WSTRING) AS IDispatch PTR
F:CAxHost.CreateObject(BYREF wszLibName AS CONST WSTRING, BYREF rclsid AS CONST CLSID, BYREF riid AS CONST IID, BYREF wszLicKey AS WSTRING = "") AS IDispatch PTR
F:CAxHost.CAxHostProc(BYVAL hWnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CAxHost.GetInterfaceName(BYVAL riid AS REFIID) AS STRING
F:CAxHost.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:AfxCAxHostWindow(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS HWND
F:AfxCAxHostPtr(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS CAxHost PTR
F:AfxCAxHostDispPtr(BYVAL hwnd AS HWND) AS IDispatch PTR
F:AfxCAxHostDispObj(BYVAL hwnd AS HWND) AS IDispatch PTR
F:AfxCAxHostForwardMessage(BYVAL hctl AS HWND, BYVAL pMsg AS tagMsg PTR) AS BOOLEAN
F:CAxHost_IDispatch.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IDispatch.AddRef() AS ULONG
F:CAxHost_IDispatch.Release() AS DWORD
F:CAxHost_IDispatch.GetTypeInfoCount(BYVAL pctInfo AS UINT PTR) AS HRESULT
F:CAxHost_IDispatch.GetTypeInfo(BYVAL iTInfo AS UINT, BYVAL lcid AS LCID, BYVAL ppTInfo AS ITypeInfo PTR PTR) AS HRESULT
F:CAxHost_IDispatch.GetIDsOfNames(BYVAL riid AS CONST IID CONST PTR, BYVAL rgszNames AS LPOLESTR PTR, BYVAL cNames AS UINT, BYVAL lcid AS LCID, BYVAL rgDispId AS DISPID PTR) AS HRESULT
F:CAxHost_IDispatch.Invoke(BYVAL dispIdMember AS DISPID, BYVAL riid AS CONST IID CONST PTR, BYVAL lcid AS LCID, BYVAL wFlags AS WORD, BYVAL pDispParams AS DISPPARAMS PTR, BYVAL pVarResult AS VARIANT PTR, BYVAL pExcepInfo AS EXCEPINFO PTR, BYVAL puArgErr AS UINT PTR) AS HRESULT
F:CAxHost_IOleClientSite.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IOleClientSite.AddRef() AS ULONG
F:CAxHost_IOleClientSite.Release() AS DWORD
F:CAxHost_IOleClientSite.SaveObject() AS HRESULT
F:CAxHost_IOleClientSite.GetMoniker(BYVAL dwAssign AS DWORD, BYVAL dwWhichMoniker AS DWORD, BYVAL ppmk AS LPMONIKER PTR) AS HRESULT
F:CAxHost_IOleClientSite.GetContainer(BYVAL ppContainer AS LPOLECONTAINER PTR) AS HRESULT
F:CAxHost_IOleClientSite.ShowObject() AS HRESULT
F:CAxHost_IOleClientSite.OnShowWindow(BYVAL fShow AS BOOL) AS HRESULT
F:CAxHost_IOleClientSite.RequestNewObjectLayout() AS HRESULT
F:CAxHost_IOleControlSite.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IOleControlSite.AddRef() AS ULONG
F:CAxHost_IOleControlSite.Release() AS DWORD
F:CAxHost_IOleControlSite.OnControlInfoChanged() AS HRESULT
F:CAxHost_IOleControlSite.LockInPlaceActive(BYVAL fLock AS LONG) AS HRESULT
F:CAxHost_IOleControlSite.GetExtendedControl(BYVAL ppDisp AS IDispatch PTR PTR) AS HRESULT
F:CAxHost_IOleControlSite.TransformCoords(BYVAL pPtlHimetric AS POINTL PTR, BYVAL pPtfContainer AS POINTF PTR, BYVAL dwFlags AS DWORD) AS HRESULT
F:CAxHost_IOleControlSite.TranslateAccelerator(BYVAL pMsg AS LPMSG, BYVAL grfModifiers AS DWORD) AS HRESULT
F:CAxHost_IOleControlSite.OnFocus(BYVAL fGotFocus AS LONG) AS HRESULT
F:CAxHost_IOleControlSite.ShowPropertyFrame() AS HRESULT
F:CAxHost_IOleInPlaceFrame.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IOleInPlaceFrame.AddRef() AS ULONG
F:CAxHost_IOleInPlaceFrame.Release() AS DWORD
F:CAxHost_IOleInPlaceFrame.GetWindow(BYVAL phwnd AS HWND PTR) AS HRESULT
F:CAxHost_IOleInPlaceFrame.ContextSensitiveHelp(BYVAL fEnterMode AS BOOL) AS HRESULT
F:CAxHost_IOleInPlaceFrame.GetBorder(BYVAL lprectBorder AS LPRECT) AS HRESULT
F:CAxHost_IOleInPlaceFrame.RequestBorderSpace(BYVAL pborderwidths AS LPCBORDERWIDTHS) AS HRESULT
F:CAxHost_IOleInPlaceFrame.SetBorderSpace(BYVAL pborderwidths AS LPCBORDERWIDTHS) AS HRESULT
F:CAxHost_IOleInPlaceFrame.SetActiveObject(BYVAL pActiveObject AS LPOLEINPLACEACTIVEOBJECT, BYVAL pszObjName AS LPCOLESTR) AS HRESULT
F:CAxHost_IOleInPlaceFrame.InsertMenus(BYVAL hmenuShared AS HMENU, BYVAL lpMenuWidths AS LPOLEMENUGROUPWIDTHS) AS HRESULT
F:CAxHost_IOleInPlaceFrame.SetMenu(BYVAL hmenuShared AS HMENU, BYVAL holemenu AS HOLEMENU, BYVAL hwndActiveObject AS HWND) AS HRESULT
F:CAxHost_IOleInPlaceFrame.RemoveMenus(BYVAL hmenuShared AS HMENU) AS HRESULT
F:CAxHost_IOleInPlaceFrame.SetStatusText(BYVAL pszStatusText AS LPCOLESTR) AS HRESULT
F:CAxHost_IOleInPlaceFrame.EnableModeless(BYVAL fEnable AS BOOL) AS HRESULT
F:CAxHost_IOleInPlaceFrame.TranslateAccelerator(BYVAL lpmsg AS LPMSG, BYVAL wID AS WORD) AS HRESULT
F:CAxHost_IOleInPlaceSite.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IOleInPlaceSite.AddRef() AS ULONG
F:CAxHost_IOleInPlaceSite.Release() AS ULONG
F:CAxHost_IOleInPlaceSite.GetWindow(BYVAL phwnd AS HWND PTR) AS HRESULT
F:CAxHost_IOleInPlaceSite.ContextSensitiveHelp(BYVAL fEnterMode AS WINBOOL) AS HRESULT
F:CAxHost_IOleInPlaceSite.CanInPlaceActivate() AS HRESULT
F:CAxHost_IOleInPlaceSite.OnInPlaceActivate() AS HRESULT
F:CAxHost_IOleInPlaceSite.OnUIActivate() AS HRESULT
F:CAxHost_IOleInPlaceSite.GetWindowContext(BYVAL ppFrame AS IOleInPlaceFrame PTR PTR, BYVAL ppDoc as IOleInPlaceUIWindow PTR PTR, BYVAL lprcPosRect AS LPRECT, BYVAL lprcClipRect AS LPRECT, BYVAL lpFrameInfo AS LPOLEINPLACEFRAMEINFO) AS HRESULT
F:CAxHost_IOleInPlaceSite.Scroll(BYVAL scrollExtant AS SIZE) AS HRESULT
F:CAxHost_IOleInPlaceSite.OnUIDeactivate(BYVAL fUndoable AS WINBOOL) AS HRESULT
F:CAxHost_IOleInPlaceSite.OnInPlaceDeactivate() AS HRESULT
F:CAxHost_IOleInPlaceSite.DiscardUndoState() AS HRESULT
F:CAxHost_IOleInPlaceSite.DeactivateAndUndo() AS HRESULT
F:CAxHost_IOleInPlaceSite.OnPosRectChange(BYVAL lprcPosRect AS LPCRECT) AS HRESULT
F:AfxAxHostQueryService( BYVAL punk AS IUnknown PTR , BYVAL guidService AS REFGUID , BYVAL riid AS REFGUID , BYVAL ppvOut AS LPVOID PTR ) AS HRESULT
F:CAxHost_IServiceProvider.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CAxHost_IServiceProvider.AddRef() AS ULONG
F:CAxHost_IServiceProvider.Release() AS DWORD
F:CAxHost_IServiceProvider.QueryService(BYVAL guidService AS const GUID const PTR, BYVAL riid AS const IID const PTR, BYVAL ppvObject AS ANY PTR PTR) AS HRESULT
F:CDocHostUIHandler2.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CDocHostUIHandler2.AddRef() AS ULONG
F:CDocHostUIHandler2.Release() AS ULONG
F:CDocHostUIHandler2.ShowContextMenu(BYVAL dwID AS DWORD, BYVAL ppt AS POINT PTR, BYVAL pcmdtReserved AS IUnknown PTR, BYVAL pdispReserved AS IDispatch PTR) AS HRESULT
F:CDocHostUIHandler2.GetHostInfo(BYVAL pInfo AS DOCHOSTUIINFO PTR) AS HRESULT
F:CDocHostUIHandler2.ShowUI(BYVAL dwID AS DWORD, BYVAL pActiveObject AS IOleInPlaceActiveObject PTR, BYVAL pCommandTarget AS IOleCommandTarget PTR, BYVAL pFrame AS IOleInPlaceFrame PTR, BYVAL pDoc AS IOleInPlaceUIWindow PTR) AS HRESULT
F:CDocHostUIHandler2.HideUI() AS HRESULT
F:CDocHostUIHandler2.UpdateUI() AS HRESULT
F:CDocHostUIHandler2.EnableModeless(BYVAL fEnable AS WINBOOL) AS HRESULT
F:CDocHostUIHandler2.OnDocWindowActivate(BYVAL fActivate AS WINBOOL) AS HRESULT
F:CDocHostUIHandler2.OnFrameWindowActivate(BYVAL fActivate AS WINBOOL) AS HRESULT
F:CDocHostUIHandler2.ResizeBorder(BYVAL prcBorder AS LPCRECT, BYVAL pUIWindow AS IOleInPlaceUIWindow PTR, BYVAL frameWindow AS WINBOOL) AS HRESULT
F:CDocHostUIHandler2.TranslateAccelerator(BYVAL lpMsg AS LPMSG, BYVAL pguidCmdGroup AS const GUID PTR, BYVAL nCmdID AS DWORD) AS HRESULT
F:CDocHostUIHandler2.GetOptionKeyPath(BYVAL pchKey AS LPOLESTR PTR, BYVAL dw AS DWORD) AS HRESULT
F:CDocHostUIHandler2.GetDropTarget(BYVAL pDropTarget AS IDropTarget PTR, BYVAL ppDropTarget AS IDropTarget PTR PTR) AS HRESULT
F:CDocHostUIHandler2.GetExternal(BYVAL ppDispatch AS IDispatch PTR PTR) AS HRESULT
F:CDocHostUIHandler2.TranslateUrl(BYVAL dwTranslate AS DWORD, BYVAL pchURLIn AS LPWSTR, BYVAL ppchURLOut AS LPWSTR PTR) AS HRESULT
F:CDocHostUIHandler2.FilterDataObject(BYVAL pDO AS IDataObject PTR, BYVAL ppDORet AS IDataObject PTR PTR) AS HRESULT
F:CDocHostUIHandler2.GetOverrideKeyPath(BYVAL pchKey AS LPOLESTR PTR, BYVAL dw AS DWORD) AS HRESULT
F:CHTMLDocumentEvents2.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CHTMLDocumentEvents2.AddRef() AS ULONG
F:CHTMLDocumentEvents2.Release() AS ULONG
F:CHTMLDocumentEvents2.GetTypeInfoCount(BYVAL pctInfo AS UINT PTR) AS HRESULT
F:CHTMLDocumentEvents2.GetTypeInfo(BYVAL iTInfo AS UINT, BYVAL lcid AS LCID, BYVAL ppTInfo AS ITypeInfo PTR PTR) AS HRESULT
F:CHTMLDocumentEvents2.GetIDsOfNames(BYVAL riid AS CONST IID CONST PTR, BYVAL rgszNames AS LPOLESTR PTR, BYVAL cNames AS UINT, BYVAL lcid AS LCID, BYVAL rgDispId AS DISPID PTR) AS HRESULT
F:CHTMLDocumentEvents2.Invoke(BYVAL dispIdMember AS DISPID, BYVAL riid AS CONST IID CONST PTR, BYVAL lcid AS LCID, BYVAL wFlags AS WORD, BYVAL pDispParams AS DISPPARAMS PTR, BYVAL pVarResult AS VARIANT PTR, BYVAL pExcepInfo AS EXCEPINFO PTR, BYVAL puArgErr AS UINT PTR) AS HRESULT
F:CWebBrowserEvents.QueryInterface(BYVAL riid AS REFIID, BYVAL ppvObj AS LPVOID PTR) AS HRESULT
F:CWebBrowserEvents.AddRef() AS ULONG
F:CWebBrowserEvents.Release() AS ULONG
F:CWebBrowserEvents.GetTypeInfoCount(BYVAL pctInfo AS UINT PTR) AS HRESULT
F:CWebBrowserEvents.GetTypeInfo(BYVAL iTInfo AS UINT, BYVAL lcid AS LCID, BYVAL ppTInfo AS ITypeInfo PTR PTR) AS HRESULT
F:CWebBrowserEvents.GetIDsOfNames(BYVAL riid AS CONST IID CONST PTR, BYVAL rgszNames AS LPOLESTR PTR, BYVAL cNames AS UINT, BYVAL lcid AS LCID, BYVAL rgDispId AS DISPID PTR) AS HRESULT
F:CWebBrowserEvents.Invoke(BYVAL dispIdMember AS DISPID, BYVAL riid AS CONST IID CONST PTR, BYVAL lcid AS LCID, BYVAL wFlags AS WORD, BYVAL pDispParams AS DISPPARAMS PTR, BYVAL pVarResult AS VARIANT PTR, BYVAL pExcepInfo AS EXCEPINFO PTR, BYVAL puArgErr AS UINT PTR) AS HRESULT
F:CWebCtx.AxHostPtr() AS CAxHost PTR
F:CWebCtx.BrowserPtr() AS Afx_IWebBrowser2 PTR
F:CWebCtx.hWindow() AS HWND
F:CWebCtx.CtrlID() AS LONG
F:CWebCtx.Navigate(BYVAL pwszUrl AS WSTRING PTR, BYVAL Flags AS VARIANT PTR = NULL, BYVAL TargetFrameName AS VARIANT PTR = NULL, BYVAL PostData AS VARIANT PTR = NULL, BYVAL Headers AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.Navigate(BYVAL vUrl AS VARIANT PTR, BYVAL Flags AS VARIANT PTR = NULL, BYVAL TargetFrameName AS VARIANT PTR = NULL, BYVAL PostData AS VARIANT PTR = NULL, BYVAL Headers AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.WaitForPageLoad(BYVAL dbTimeout AS DOUBLE = 10) AS tagREADYSTATE
F:CWebCtx.Advise() AS HRESULT
F:CWebCtx.Unadvise() AS HRESULT
F:CWebCtx.SetUIHandler() AS HRESULT
F:CWebCtx.SetEventProc(BYVAL pwszEventName AS WSTRING PTR, BYVAL pProc AS ANY PTR) AS HRESULT
F:CWebCtx.SetUIEventProc(BYVAL pwszEventName AS WSTRING PTR, BYVAL pProc AS ANY PTR) AS HRESULT
F:CWebCtx.SetFocus() AS HRESULT
F:CWebCtx.WriteHtml(BYREF cwsHtml AS CWSTR, BYVAL cr AS BOOLEAN = FALSE) AS HRESULT
F:CWebCtx.GetBodyInnerText() AS CWSTR
F:CWebCtx.GetBodyInnerHtml() AS CWSTR
F:CWebCtx.GetActiveElementId() AS CWSTR
F:CWebCtx.GetElementValueById(BYREF cwsId AS CWSTR) AS VARIANT
F:CWebCtx.SetElementValueById(BYREF cwsId AS CWSTR, BYVAL vValue AS VARIANT) AS HRESULT
F:CWebCtx.GetElementInnerHtmlById(BYREF cwsId AS CWSTR) AS CWSTR
F:CWebCtx.SetElementInnerHtmlById(BYREF cwsId AS CWSTR, BYREF cwsHtml AS CWSTR) AS HRESULT
F:CWebCtx.SetElementFocusById(BYREF cwsId AS CWSTR) AS HRESULT
F:CWebCtx.GoBack() AS HRESULT
F:CWebCtx.GoForward() AS HRESULT
F:CWebCtx.GoHome() AS HRESULT
F:CWebCtx.GoSearch() AS HRESULT
F:CWebCtx.Refresh() AS HRESULT
F:CWebCtx.Refresh2(BYVAL nLevel AS RefreshConstants) AS HRESULT
F:CWebCtx.Stop() AS HRESULT
F:CWebCtx.QueryStatusWB(BYVAL cmdID AS OLECMDID) AS OLECMDF
F:CWebCtx.ExecWB(BYVAL cmdID AS OLECMDID, BYVAL cmdexecopt AS OLECMDEXECOPT, BYVAL pvaIn AS VARIANT PTR = NULL, BYVAL pvaOut AS VARIANT PTR = NULL) AS HRESULT
F:CWebCtx.PrintPreview() AS HRESULT
F:CWebCtx.PrintPage(BYVAL bPromptUser AS BOOLEAN = TRUE) AS HRESULT
F:CWebCtx.PageSetUp() AS HRESULT
F:CWebCtx.PageProperties() AS HRESULT
F:CWebCtx.SaveAs() AS HRESULT
F:CWebCtx.Find() AS HRESULT
F:CWebCtx.ShowSource() AS HRESULT
F:CWebCtx.InternetOptions() AS HRESULT
F:AfxGetBrowserPtr(BYVAL hwnd AS HWND, BYVAL cID AS WORD) AS Afx_IWebBrowser2 PTR
F:AfxWriteHtml(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsHtml AS CWSTR, BYVAL cr AS BOOLEAN = FALSE) AS HRESULT
F:AfxGetActiveElementId(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR) AS CWSTR
F:AfxGetElementValueById(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsId AS CWSTR) AS VARIANT
F:AfxSetElementValueById(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsId AS CWSTR, BYVAL vValue AS VARIANT) AS HRESULT
F:AfxGetElementInnerHtmlById(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsId AS CWSTR) AS CWSTR
F:AfxSetElementInnerHtmlById(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsId AS CWSTR, BYREF cwsHtml AS CWSTR) AS HRESULT
F:AfxSetElementFocusById(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR, BYREF cwsId AS CWSTR) AS HRESULT
F:AfxGetBodyInnerText(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR) AS CWSTR
F:AfxGetBodyInnerHtml(BYVAL pWebBrowser AS Afx_IWebBrowser2 PTR) AS CWSTR
F:CCbColor.CCbColorProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CCbColor.hWindow() AS HWND
F:CCbColor.GetQBColor(BYVAL hwnd AS HWND, BYVAL c AS LONG, BYVAL dlg AS LONG) AS COLORREF
F:CCbColorEx.CCbColorExProc( BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM, BYVAL uIdSubclass AS UINT_PTR, BYVAL dwRefData AS DWORD_PTR ) AS LRESULT
F:CCbColorEx.hWindow() AS HWND
F:CCbColorEx.GetQBColor(BYVAL hwnd AS HWND, BYVAL c AS LONG, BYVAL dlg AS LONG) AS COLORREF
F:CCDAudio.GetLastError() AS MCIERROR
F:CCDAudio.SetError(BYVAL dwError AS MCIERROR) AS MCIERROR
F:CCDAudio.GetErrorString(BYVAL dwError AS MCIERROR = 0) AS CWSTR
F:CCDAudio.Open() AS MCIERROR
F:CCDAudio.Close() AS MCIERROR
F:CCDAudio.IsReady() AS BOOLEAN
F:CCDAudio.IsMediaInserted() AS BOOLEAN
F:CCDAudio.IsPaused() AS BOOLEAN
F:CCDAudio.IsStopped() AS BOOLEAN
F:CCDAudio.IsPlaying() AS BOOLEAN
F:CCDAudio.IsSeeking() AS BOOLEAN
F:CCDAudio.OpenDoor() AS MCIERROR
F:CCDAudio.CloseDoor() AS MCIERROR
F:CCDAudio.Play() AS MCIERROR
F:CCDAudio.PlayFrom(BYVAL nTrack AS LONG) AS MCIERROR
F:CCDAudio.PlayFromTo(BYVAL nStartTrack AS LONG, BYVAL nEndTrack AS LONG) AS MCIERROR
F:CCDAudio.Stop() AS MCIERROR
F:CCDAudio.Pause() AS MCIERROR
F:CCDAudio.GetTracksCount() AS LONG
F:CCDAudio.GetCurrentTrack() AS LONG
F:CCDAudio.GetTrackLengthString(BYVAL nTrack AS LONG) AS CWSTR
F:CCDAudio.GetTrackLength(BYVAL nTrack AS LONG) AS LONG
F:CCDAudio.GetAllTracksLengthString() AS CWSTR
F:CCDAudio.GetAllTracksLength() AS LONG
F:CCDAudio.GetCurrentPosString() AS CWSTR
F:CCDAudio.GetCurrentPos() AS LONG
F:CCDAudio.ToStart() AS MCIERROR
F:CCDAudio.ToEnd() AS MCIERROR
F:CCDAudio.Forward() AS BOOLEAN
F:CCDAudio.Backward() AS BOOLEAN
F:CCDAudio.GetTrackStartTimeString(BYVAL nTrack AS LONG) AS CWSTR
F:CCDAudio.GetTrackStartTime(BYVAL nTrack AS LONG) AS LONG
F:CCDOMessage.GetLastResult() AS HRESULT
F:CCDOMessage.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CCDOMessage.ConfigValue(BYREF cvField AS CVAR, BYREF cvValue AS CVAR) AS HRESULT
F:CCDOMessage.ConfigUpdate() AS HRESULT
F:CCDOMessage.BCC(BYREF cbsBCC AS CBSTR) AS HRESULT
F:CCDOMessage.CC(BYREF cbsCC AS CBSTR) AS HRESULT
F:CCDOMessage.From(BYREF cbsFrom AS CBSTR) AS HRESULT
F:CCDOMessage.Sender(BYREF cbsSender AS CBSTR) AS HRESULT
F:CCDOMessage.Recipients(BYREF cbsTo AS CBSTR) AS HRESULT
F:CCDOMessage.ReplyTo(BYREF cbsReplyTo AS CBSTR) AS HRESULT
F:CCDOMessage.Keywords(BYREF cbsKeywords AS CBSTR) AS HRESULT
F:CCDOMessage.Organization(BYREF cbsOrganization AS CBSTR) AS HRESULT
F:CCDOMessage.Subject(BYREF cbsSubject AS CBSTR) AS HRESULT
F:CCDOMessage.TextBody(BYREF cbsTextBody AS CBSTR) AS HRESULT
F:CCDOMessage.HTMLBody(BYREF cbsHTMLBody AS CBSTR) AS HRESULT
F:CCDOMessage.DSNOptions(BYVAL pDSNOptions AS CdoDSNOptions) AS HRESULT
F:CCDOMessage.MimeFormatted(BYVAL pMimeFormatted AS VARIANT_BOOL) AS HRESULT
F:CCDOMessage.MDNRequested(BYVAL pMDNRequested AS VARIANT_BOOL) AS HRESULT
F:CCDOMessage.AddAttachment(BYREF cbsURL AS CBSTR, BYREF cbsUserName AS CBSTR = "", BYREF cbsPassword AS CBSTR = "") AS HRESULT
F:CCDOMessage.Send() AS HRESULT
F:CCDOMessage.FollowUpTo(BYREF cbsFollowUpTo AS CBSTR) AS HRESULT
F:CCDOMessage.Newsgroups(BYREF cbsNewsgroups AS CBSTR) AS HRESULT
F:CCDOMessage.Post() AS HRESULT
F:CCLRHost.CreateDomain(BYREF wszFriendlyName AS WSTRING, BYVAL pIdentityArray AS IUnknown PTR) AS Afx__AppDomain PTR
F:CCLRHost.UnloadDomain(BYVAL pDomain AS Afx__AppDomain PTR) AS HRESULT
F:CCLRHost.CreateInstance(BYREF AssemblyName AS CBSTR, BYREF typeName AS CBSTR) AS IDispatch PTR
F:CCLRHost.CreateInstance(BYVAL pDomain AS Afx__AppDomain PTR, BYREF AssemblyName AS CBSTR, BYREF typeName AS CBSTR) AS IDispatch PTR
F:CCLRHost.CreateInstanceFrom(BYREF AssemblyName AS CBSTR, BYREF typeName AS CBSTR) AS IDispatch PTR
F:CCLRHost.CreateInstanceFrom(BYVAL pDomain AS Afx__AppDomain PTR, BYREF AssemblyName AS CBSTR, BYREF typeName AS CBSTR) AS IDispatch PTR
F:CComplex.IsInf(BYVAL x AS DOUBLE) AS LONG
F:CComplex.IsInfinity(BYVAL x AS DOUBLE) AS LONG
F:CComplex.ArcCosH(BYVAL x AS DOUBLE) AS DOUBLE
F:CComplex.ArcTanH(BYVAL x AS DOUBLE) AS DOUBLE
F:CComplex.CSwap(BYREF z AS CComplex)
F:CComplex.CAdd(BYREF z AS CComplex) AS CComplex
F:CComplex.CAdd(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CAddReal(BYVAL x AS DOUBLE) AS CComplex
F:CComplex.CAddImag(BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CSub(BYREF z AS CComplex) AS CComplex
F:CComplex.CSub(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CSubReal(BYVAL x AS DOUBLE) AS CComplex
F:CComplex.CSubImag(BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CMul(BYREF z AS CComplex) AS CComplex
F:CComplex.CMul(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CMulReal(BYVAL x AS DOUBLE) AS CComplex
F:CComplex.CMulImag(BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CDiv(BYREF z AS CComplex) AS CComplex
F:CComplex.CDiv(BYVAL x AS DOUBLE, BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CDivReal(BYVAL x AS DOUBLE) AS CComplex
F:CComplex.CDivImag(BYVAL y AS DOUBLE) AS CComplex
F:CComplex.CConjugate() AS CComplex
F:CComplex.CConj() AS CComplex
F:CComplex.CArg() AS DOUBLE
F:CComplex.CArgument() AS DOUBLE
F:CComplex.CPhase() AS DOUBLE
F:CComplex.CAbs() AS DOUBLE
F:CComplex.CMagnitude() AS DOUBLE
F:CComplex.CAbs2() AS DOUBLE
F:CComplex.CNorm() AS DOUBLE
F:CComplex.CLogAbs() AS DOUBLE
F:CComplex.CReciprocal() AS CComplex
F:CComplex.CInverse() AS CComplex
F:CComplex.CFromPolarCoordinates(BYVAL magnitude AS DOUBLE, BYVAL phase AS DOUBLE) AS CComplex
F:CComplex.CSqr() AS CComplex
F:CComplex.CSqrt() AS CComplex
F:CComplex.CSqr(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CSqrt(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CExp() AS CComplex
F:CComplex.CLog() AS CComplex
F:CComplex.CLog(BYVAL baseValue AS DOUBLE) AS CComplex
F:CComplex.CLog10() AS CComplex
F:CComplex.CPow(BYREF power AS CComplex) AS CComplex
F:CComplex.CPow(BYVAL power AS DOUBLE) AS CComplex
F:CComplex.CSin() AS CComplex
F:CComplex.CCos() AS CComplex
F:CComplex.CSec() AS CComplex
F:CComplex.CCsc() AS CComplex
F:CComplex.CTan() AS CComplex
F:CComplex.CCot() AS CComplex
F:CComplex.CArcSinReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CASinReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcSin() AS CComplex
F:CComplex.CASin() AS CComplex
F:CComplex.CArcCosReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CACosReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcCos() AS CComplex
F:CComplex.CACos() AS CComplex
F:CComplex.CArcSecReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CASecReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcSec() AS CComplex
F:CComplex.CASec() AS CComplex
F:CComplex.CArcCscReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CACscReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcCsc() AS CComplex
F:CComplex.CACsc() AS CComplex
F:CComplex.CArcTan() AS CComplex
F:CComplex.CATan() AS CComplex
F:CComplex.CArcCot() AS CComplex
F:CComplex.CACot() AS CComplex
F:CComplex.CSinH() AS CComplex
F:CComplex.CCosH() AS CComplex
F:CComplex.CSecH() AS CComplex
F:CComplex.CCscH() AS CComplex
F:CComplex.CTanH() AS CComplex
F:CComplex.CCotH() AS CComplex
F:CComplex.CArcSinH() AS CComplex
F:CComplex.CASinH() AS CComplex
F:CComplex.CArcCosHReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CACosHReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcCosH() AS CComplex
F:CComplex.CACosH() AS CComplex
F:CComplex.CArcSecH() AS CComplex
F:CComplex.CASecH() AS CComplex
F:CComplex.CArcCscH() AS CComplex
F:CComplex.CACscH() AS CComplex
F:CComplex.CArcTanHReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CATanHReal(BYVAL value AS DOUBLE) AS CComplex
F:CComplex.CArcTanH() AS CComplex
F:CComplex.CATanH() AS CComplex
F:CComplex.CArcCotH() AS CComplex
F:CComplex.CACotH() AS CComplex
F:CComplex.CSgn() AS LONG
F:CCur.SetInteger(BYVAL nInteger AS LONGLONG) AS HRESULT
F:CCur.SetFraction(BYVAL nFraction AS SHORT) AS HRESULT
F:CCur.SetValues(BYVAL nInteger AS LONGLONG, BYVAL nFraction AS SHORT) AS HRESULT
F:CCur.Round(BYVAL nDecimals AS LONG) AS CCUR
F:CCur.GetInteger() AS LONGLONG
F:CCur.GetFraction() AS SHORT
F:CCur.ToVar() AS VARIANT
F:CCur.FormatCurrency(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS STRING
F:CCur.FormatCurrencyW(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS CBSTR
F:CCur.FormatNumber(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS STRING
F:CCur.FormatNumberW(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS CBSTR
F:CDec.DecAbs() AS CDec
F:CDec.DecFix() AS CDec
F:CDec.DecInt() AS CDec
F:CDec.DecRound(BYVAL nDecimals AS LONG) AS CDec
F:CDec.ToVar() AS VARIANT
F:CDec.Scale() AS UBYTE
F:CDec.Sign() AS UBYTE
F:CDec.IsSigned() AS BOOLEAN
F:CDec.IsUnsigned() AS BOOLEAN
F:CDicObj.DispPtr() AS ANY PTR
F:CDicObj.GetLastResult() AS HRESULT
F:CDicObj.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CDicObj.Add(BYREF cvKey AS CVAR, BYREF cvItem AS CVAR) AS HRESULT
F:CDicObj.Count() AS LONG
F:CDicObj.Exists(BYREF cvKey AS CVAR) AS BOOLEAN
F:CDicObj.Items() AS CVAR
F:CDicObj.Keys() AS CVAR
F:CDicObj.Remove(BYREF cvKey AS CVAR) AS HRESULT
F:CDicObj.RemoveAll() AS HRESULT
F:CDicObj.NewEnum() AS IUnknown PTR
F:CDicObj.HashVal(BYREF cvKey AS CVAR) AS CVAR
F:CDispInvoke.DispPtr() AS IDispatch PTR
F:CDispInvoke.DispObj() AS IDispatch PTR
F:CDispInvoke.vptr() AS IDIspatch PTR PTR
F:CDispInvoke.Attach(BYVAL pdisp AS IDispatch PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CDispInvoke.Attach(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CDispInvoke.Detach() AS IDispatch PTR
F:CDispInvoke.Detach(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CDispInvoke.GetLastResult() AS HRESULT
F:CDispInvoke.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CDispInvoke.GetLcid() AS LCID
F:CDispInvoke.SetLcid(BYVAL _lcid AS LCID)
F:CDispInvoke.GetArgErr() AS UINT
F:CDispInvoke.GetErrorCode() AS SCODE
F:CDispInvoke.GetVarResult() AS CVAR
F:CDispInvoke.GetDescription() AS CWSTR
F:CDispInvoke.GetSource() AS CWSTR
F:CDispInvoke.GetHelpFile() AS CWSTR
F:CDispInvoke.DispInvoke(BYVAL wFlags AS WORD, BYVAL dispIdMember AS DISPID, BYVAL prgArgs AS VARIANT PTR = NULL, BYVAL cArgs AS UINT = 0, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS HRESULT
F:CDispInvoke.DispInvoke(BYVAL wFlags AS WORD, BYVAL pwszName AS WSTRING PTR, BYVAL prgArgs AS VARIANT PTR = NULL, BYVAL cArgs AS UINT = 0, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS HRESULT
F:CDispInvoke.Get(BYVAL dispID AS DISPID, BYVAL prgArgs AS VARIANT PTR = NULL, BYVAL cArgs AS UINT = 0, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS HRESULT
F:CDispInvoke.Get(BYVAL pwszName AS WSTRING PTR, BYVAL prgArgs AS VARIANT PTR = NULL, BYVAL cArgs AS UINT = 0, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS HRESULT
F:CDispInvoke.Get(BYVAL dispID AS DISPID) AS CVAR
F:CDispInvoke.Get(BYVAL pwszName AS WSTRING PTR) AS CVAR
F:CDispInvoke.Get(BYVAL dispID AS DISPID, BYREF cvArg AS CVAR) AS CVAR
F:CDispInvoke.Get(BYVAL pwszName AS WSTRING PTR, BYREF cvArg AS CVAR) AS CVAR
F:CDispInvoke.Get(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS CVAR
F:CDispInvoke.Get(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS CVAR
F:CDispInvoke.Set(BYVAL dispID AS DISPID, BYREF cvArg AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL pwszName AS WSTRING PTR, BYREF cvArg AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS HRESULT
F:CDispInvoke.Set(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL dispID AS DISPID, BYREF cvArg AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL dispID AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL pwszName AS WSTRING PTR, BYREF cvArg AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS HRESULT
F:CDispInvoke.SetRef(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS HRESULT
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR, BYREF cvArg15 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL dispId AS DISPID, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR, BYREF cvArg15 AS CVAR, BYREF cvArg16 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR, BYREF cvArg15 AS CVAR) AS CVAR
F:CDispInvoke.Invoke(BYVAL pwszName AS WSTRING PTR, BYREF cvArg1 AS CVAR, BYREF cvArg2 AS CVAR, BYREF cvArg3 AS CVAR, BYREF cvArg4 AS CVAR, BYREF cvArg5 AS CVAR, BYREF cvArg6 AS CVAR, BYREF cvArg7 AS CVAR, BYREF cvArg8 aS CVAR, BYREF cvArg9 AS CVAR, BYREF cvArg10 AS CVAR, BYREF cvArg11 AS CVAR, BYREF cvArg12 AS CVAR, BYREF cvArg13 AS CVAR, BYREF cvArg14 AS CVAR, BYREF cvArg15 AS CVAR, BYREF cvArg16 AS CVAR) AS CVAR
F:CDSAudio.Load(BYREF wszFileName AS WSTRING) AS HRESULT
F:CDSAudio.Run() AS HRESULT
F:CDSAudio.Pause() AS HRESULT
F:CDSAudio.Stop() AS LONG
F:CDSAudio.WaitForCompletion(BYVAL msTimeout AS LONG, BYREF EvCode AS LONG) AS HRESULT
F:CDSAudio.GetVolume() AS LONG
F:CDSAudio.SetVolume(BYVAL nVol AS LONG) AS HRESULT
F:CDSAudio.GetBalance() AS LONG
F:CDSAudio.SetBalance(BYVAL nBalance AS LONG) AS HRESULT
F:CDSAudio.GetDuration() AS LONGLONG
F:CDSAudio.GetCurrentPosition() AS LONGLONG
F:CDSAudio.SetPositions(BYREF pCurrent AS LONGLONG, BYREF pStop AS LONGLONG, BYVAL bAbsolutePositioning AS BOOLEAN) AS HRESULT
F:CDSAudio.SetNotifyWindow(BYVAL hwnd AS HWND, BYVAL lMsg AS LONG, BYVAL lInstanceData AS LONG_PTR) AS HRESULT
F:CDSAudio.GetEvent(BYREF lEventCode AS LONG, BYREF lParam1 AS LONG_PTR, BYREF lParam2 AS LONG_PTR, BYVAL msTimeout AS LONG = 0) AS HRESULT
F:CFileSys.GetLastResult() AS HRESULT
F:CFileSys.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CFileSys.DriveExists(BYREF cbsDrive AS CBSTR) AS BOOLEAN
F:CFileSys.FolderExists(BYREF cbsFolderSpec AS CBSTR) AS BOOLEAN
F:CFileSys.IsDriveReady(BYREF cbsDrive AS CBSTR) AS BOOLEAN
F:CFileSys.FileExists(BYREF cbsFileSpec AS CBSTR) AS BOOLEAN
F:CFileSys.GetDriveName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetFolderName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetFolderShortPath(BYREF cbsFolder AS CBSTR) AS CBSTR
F:CFileSys.GetFolderShortName(BYREF cbsFolder AS CBSTR) AS CBSTR
F:CFileSys.GetFileName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetExtensionName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetBaseName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetAbsolutePathName(BYREF cbsPathSpec AS CBSTR) AS CBSTR
F:CFileSys.GetTempName() AS CBSTR
F:CFileSys.GetDriveShareName(BYREF cbsDrive AS CBSTR) AS CBSTR
F:CFileSys.GetDriveFileSystem(BYREF cbsDrive AS CBSTR) AS CBSTR
F:CFileSys.GetDriveType(BYREF cbsDrive AS CBSTR) AS DRIVETYPECONST
F:CFileSys.GetFolderType(BYREF cbsFolder AS CBSTR) AS CBSTR
F:CFileSys.GetFileType(BYREF cbsFile AS CBSTR) AS CBSTR
F:CFileSys.GetFileVersion(BYREF cbsFile AS CBSTR) AS CBSTR
F:CFileSys.GetParentFolderName(BYREF cbsFolder AS CBSTR) AS CBSTR
F:CFileSys.SetFolderName(BYREF cbsFolder AS CBSTR, BYREF cbsName AS CBSTR) AS HRESULT
F:CFileSys.GetFolderDriveLetter(BYREF cbsFolder AS CBSTR) AS CBSTR
F:CFileSys.BuildPath(BYREF cbsPath AS CBSTR, BYREF cbsName AS CBSTR) AS CBSTR
F:CFileSys.GetSerialNumber(BYREF cbsDrive AS CBSTR) AS LONG
F:CFileSys.GetVolumeName(BYREF cbsDrive AS CBSTR) AS CBSTR
F:CFileSys.SetVolumeName(BYREF cbsDrive AS CBSTR, BYREF cbsName AS CBSTR) AS HRESULT
F:CFileSys.GetNumDrives() AS LONG
F:CFileSys.GetNumSubFolders(BYREF cbsFolder AS CBSTR) AS LONG
F:CFileSys.GetNumFiles(BYREF cbsFolder AS CBSTR) AS LONG
F:CFileSys.IsRootFolder(BYREF cbsFolder AS CBSTR) AS BOOLEAN
F:CFileSys.DriveLetters() AS CBSTR
F:CFileSys.GetStandardStream(BYVAL StandardStreamType AS STANDARDSTREAMTYPES, BYVAL bUnicode AS VARIANT_BOOL = FALSE) AS Afx_ITextStream PTR
F:CFileSys.GetFileSize(BYREF cbsFile AS CBSTR) AS LONG
F:CFileSys.SetFileName(BYREF cbsFile AS CBSTR, BYREF cbsName AS CBSTR) AS HRESULT
F:CFileSys.GetFileShortPath(BYREF cbsFile AS CBSTR) AS CBSTR
F:CFileSys.GetFileShortName(BYREF cbsFile AS CBSTR) AS CBSTR
F:CFileSys.GetFileAttributes(BYREF cbsFile AS CBSTR) AS FILEATTRIBUTE
F:CFileSys.SetFileAttributes(BYREF cbsFile AS CBSTR, BYVAL lAttr AS FILEATTRIBUTE) AS HRESULT
F:CFileSys.GetFileDateCreated(BYREF cbsFile AS CBSTR) AS DATE_
F:CFileSys.GetFileDateLastModified(BYREF cbsFile AS CBSTR) AS DATE_
F:CFileSys.GetFileDateLastAccessed(BYREF cbsFile AS CBSTR) AS DATE_
F:CFileSys.GetFolderSize(BYREF cbsFolder AS CBSTR) AS LONG
F:CFileSys.GetFolderAttributes(BYREF cbsFolder AS CBSTR) AS FILEATTRIBUTE
F:CFileSys.SetFolderAttributes(BYREF cbsFolder AS CBSTR, BYVAL lAttr AS FILEATTRIBUTE) AS HRESULT
F:CFileSys.GetFolderDateCreated(BYREF cbsFolder AS CBSTR) AS DATE_
F:CFileSys.GetFolderDateLastModified(BYREF cbsFolder AS CBSTR) AS DATE_
F:CFileSys.GetFolderDateLastAccessed(BYREF cbsFolder AS CBSTR) AS DATE_
F:CFileSys.GetDriveAvailableSpace(BYREF cbsDrive AS CBSTR) AS DOUBLE
F:CFileSys.GetDriveFreeSpace(BYREF cbsDrive AS CBSTR) AS DOUBLE
F:CFileSys.GetDriveTotalSize(BYREF cbsDrive AS CBSTR) AS DOUBLE
F:CFileSys.CreateFolder(BYREF cbsFolder AS CBSTR) AS Afx_IFolder PTR
F:CFileSys.DeleteFolder(BYREF cbsFolder AS CBSTR, BYVAL bForce AS VARIANT_BOOL = FALSE) AS HRESULT
F:CFileSys.MoveFolder(BYREF cbsSource AS CBSTR, BYREF cbsDestination AS CBSTR) AS HRESULT
F:CFileSys.CopyFolder(BYREF cbsSource AS CBSTR, BYREF cbsDestination AS CBSTR, BYVAL OverWriteFiles AS VARIANT_BOOL = -1) AS HRESULT
F:CFileSys.CopyFile(BYREF cbsSource AS CBSTR, BYREF cbsDestination AS CBSTR, BYVAL OverWriteFiles AS VARIANT_BOOL = -1) AS HRESULT
F:CFileSys.DeleteFile(BYREF cbsFileSpec AS CBSTR, BYVAL bForce AS VARIANT_BOOL = FALSE) AS HRESULT
F:CFileSys.MoveFile(BYREF cbsSource AS CBSTR, BYREF cbsDestination AS CBSTR) AS HRESULT
F:CFileTimeSpan.SetTimeSpan(BYVAL nspan AS LONGLONG)
F:CFileTimeSpan.GetTimeSpan() AS LONGLONG
F:CFileTimeSpan.Day() AS ULONGLONG
F:CFileTimeSpan.Hour() AS ULONGLONG
F:CFileTimeSpan.Minute() AS ULONGLONG
F:CFileTimeSpan.Second() AS ULONGLONG
F:CFileTimeSpan.MilliSecond() AS ULONGLONG
F:CFileTimeSpan.Week() AS ULONGLONG
F:CFileTime.GetTime() AS ULONGLONG
F:CFileTime.SetTime(BYVAL nTime AS ULONGLONG)
F:CFileTime.GetCurrentTime() AS CFileTime
F:CFileTime.UTCToLocal() AS CFileTime
F:CFileTime.LocalToUTC() AS CFileTime
F:CFileTime.Day() AS ULONGLONG
F:CFileTime.Hour() AS ULONGLONG
F:CFileTime.Minute() AS ULONGLONG
F:CFileTime.Second() AS ULONGLONG
F:CFileTime.MilliSecond() AS ULONGLONG
F:CFileTime.Week() AS ULONGLONG
F:CFileTime.GetAsFileTime() AS FILETIME
F:CFileTime.GetAsSystemTime() AS SYSTEMTIME
F:CFileTime.Format(BYREF wszFmt AS WSTRING) AS CWSTR
F:CFindFile.FindFile(BYREF wszFileSpec AS WSTRING) AS LONG_PTR
F:CFindFile.FindNext() AS LONG
F:CFindFile.FileAttributes() AS DWORD
F:CFindFile.IsDots() AS BOOLEAN
F:CFindFile.IsFile() AS BOOLEAN
F:CFindFile.IsFolder() AS BOOLEAN
F:CFindFile.IsSystemFile() AS BOOLEAN
F:CFindFile.IsHiddenFile() AS BOOLEAN
F:CFindFile.IsReadOnlyFile() AS BOOLEAN
F:CFindFile.IsTemporaryFile() AS BOOLEAN
F:CFindFile.IsNormalFile() AS BOOLEAN
F:CFindFile.IsCompressedFile() AS BOOLEAN
F:CFindFile.IsEncryptedFile() AS BOOLEAN
F:CFindFile.IsNotContentIndexedFile() AS BOOLEAN
F:CFindFile.IsOffLineFile() AS BOOLEAN
F:CFindFile.IsReparsePointFile() AS BOOLEAN
F:CFindFile.IsSparseFile() AS BOOLEAN
F:CFindFile.MatchesMask(BYVAL dwMask AS DWORD) AS BOOLEAN
F:CFindFile.FileName() AS CWSTR
F:CFindFile.FileNameX() AS CWSTR
F:CFindFile.ShortFileName() AS CWSTR
F:CFindFile.FileExt() AS CWSTR
F:CFindFile.FilePath() AS CWSTR
F:CFindFile.FileURL() AS CWSTR
F:CFindFile.Root() AS CWSTR
F:CFindFile.FileSize() AS ULONGLONG
F:CFindFile.CreationTime() AS FILETIME
F:CFindFile.LastAccessTime() AS FILETIME
F:CFindFile.LastWriteTime() AS FILETIME
F:CGpBase.RefCount(BYVAL bIncrement AS BOOLEAN) AS LONG
F:CGpBase.GetLastStatus() AS GpStatus
F:CGpBase.SetStatus(BYVAL status AS GpStatus) AS GpStatus
F:CGpImage.GetEncoderParameterListSize(BYVAL clsidEncoder AS GUID PTR) AS UINT
F:CGpImage.GetEncoderParameterList(BYVAL clsidEncoder AS GUID PTR, BYVAL uSize AS UINT, BYVAL buffer AS EncoderParameters PTR) AS GpStatus
F:CGpImage.Save(BYVAL pwszFileName AS WSTRING PTR, BYVAL clsidEncoder AS GUID PTR, BYVAL encoderParams AS EncoderParameters PTR) AS GpStatus
F:CGpImage.Save(BYVAL pStream AS IStream PTR, BYVAL clsidEncoder AS GUID PTR, BYVAL encoderParams AS EncoderParameters PTR) AS GpStatus
F:CGpImage.SaveAdd(BYVAL encoderParams AS EncoderParameters PTR) AS GpStatus
F:CGpImage.SaveAdd(BYVAL pNewImage AS CGpImage PTR, BYVAL encoderParams AS EncoderParameters PTR) AS GpStatus
F:CGpImage.GetType() AS ImageType
F:CGpImage.GetPhysicalDimension(BYVAL psize AS SizeF PTR) AS GpStatus
F:CGpImage.GetBounds(BYVAL srcRect AS RectF PTR, BYVAL srcUnit AS GpUnit PTR) AS GpStatus
F:CGpImage.GetWidth() AS UINT
F:CGpImage.GetHeight() AS UINT
F:CGpImage.GetHorizontalResolution() AS SINGLE
F:CGpImage.GetVerticalResolution() AS SINGLE
F:CGpImage.GetFlags() AS UINT
F:CGpImage.GetRawFormat(BYVAL guidformat AS GUID PTR) AS GpStatus
F:CGpImage.GetPixelFormat() AS PixelFormat
F:CGpImage.GetPaletteSize() AS INT_
F:CGpImage.GetPalette(BYVAL pal AS ColorPalette PTR, BYVAL nSize AS INT_) AS GpStatus
F:CGpImage.SetPalette(BYVAL pal AS ColorPalette PTR) AS GpStatus
F:CGpImage.GetFrameDimensionsCount() AS UINT
F:CGpImage.GetFrameDimensionsList(BYVAL dimensionIDs AS GUID PTR, BYVAL nCount AS UINT) AS GpStatus
F:CGpImage.GetFrameCount(BYVAL dimensionID AS GUID PTR) AS UINT
F:CGpImage.SelectActiveFrame(BYVAL dimensionID AS GUID PTR, BYVAL frameIndex AS UINT) AS GpStatus
F:CGpImage.RotateFlip(BYVAL rotateFlipType AS RotateFlipType) AS GpStatus
F:CGpImage.GetPropertyCount() AS UINT
F:CGpImage.GetPropertyIdList(BYVAL numOfProperty AS UINT, BYVAL list AS PROPID PTR) AS GpStatus
F:CGpImage.GetPropertyItemSize(BYVAL propId AS PROPID) AS UINT
F:CGpImage.GetPropertyItem(BYVAL propId AS PROPID, BYVAL propSize AS UINT, BYVAL buffer AS PropertyItem PTR) AS GpStatus
F:CGpImage.GetPropertySize(BYVAL totalBufferSize AS UINT PTR, BYVAL numProperties AS UINT PTR) AS GpStatus
F:CGpImage.GetAllPropertyItems(BYVAL totalBufferSize AS UINT, BYVAL numProperties AS UINT, BYVAL allItems AS PropertyItem PTR) AS GpStatus
F:CGpImage.RemovePropertyItem(BYVAL propId AS PROPID) AS GpStatus
F:CGpImage.SetPropertyItem(BYVAL pitem AS PropertyItem PTR) AS GpStatus
F:CGpImage.FindFirstItem(BYVAL pitem AS ImageItemData PTR) AS GpStatus
F:CGpImage.FindNextItem(BYVAL pitem AS ImageItemData PTR) AS GpStatus
F:CGpImage.GetItemData(BYVAL pitem AS ImageItemData PTR) AS GpStatus
F:CGpImage.Clone(BYVAL pCloneImage AS CGpImage PTR) AS GpStatus
F:CGpImage.GetThumbnailImage(BYVAL thumbWidth AS UINT, BYVAL thumbHeight AS UINT, BYVAL pThumbnail AS CGpImage PTR, BYVAL pCallback AS ANY PTR = NULL, BYVAL callbackData AS ANY PTR = NULL) AS GpStatus
F:CGpBitmap.GetHBITMAP(BYVAL colorBackground AS ARGB, BYVAL hbmReturn AS HBITMAP PTR) AS GpStatus
F:CGpBitmap.GetHICON(BYVAL hiconReturn AS HICON PTR) AS GpStatus
F:CGpBitmap.Clone(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL pxFormat AS PixelFormat, BYVAL pCloneBitmap AS CGpBitmap PTR) AS GpStatus
F:CGpBitmap.Clone(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL pxFormat AS PixelFormat, BYVAL pCloneBitmap AS CGpBitmap PTR) AS GpStatus
F:CGpBitmap.Clone(BYVAL rcf AS GpRectF PTR, BYVAL pxFormat AS PixelFormat, BYVAL pCloneBitmap AS CGpBitmap PTR) AS GpStatus
F:CGpBitmap.Clone(BYVAL rc AS GpRect PTR, BYVAL pxFormat AS PixelFormat, BYVAL pCloneBitmap AS CGpBitmap PTR) AS GpStatus
F:CGpBitmap.LockBits(BYVAL rc AS GpRect PTR, BYVAL flags AS UINT, BYVAL pxFormat AS PixelFormat, BYVAL lockedBitmapData AS BitmapData PTR) AS GpStatus
F:CGpBitmap.UnlockBits(BYVAL lockedBitmapData AS BitmapData PTR) AS GpStatus
F:CGpBitmap.GetPixel(BYVAL x AS LONG, BYVAL y AS LONG, BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpBitmap.SetPixel(BYVAL x AS LONG, BYVAL y AS LONG, BYVAL colour AS ARGB) AS GpStatus
F:CGpBitmap.SetResolution(BYVAL xdpi AS SINGLE, BYVAL ydpi AS SINGLE) AS GpStatus
F:CGpBitmap.InitializePalette(BYVAL colourPalette AS ColorPalette PTR, BYVAL nPaletteType AS PaletteType, BYVAL optimalColors AS INT_, BYVAL useTransparentColor AS BOOL, BYVAL pBitmap AS CGpBitmap PTR) AS GpStatus
F:CGpBitmap.ConvertFormat(BYVAL pxFormat AS PixelFormat, BYVAL nDitherType AS DitherType, BYVAL nPaletteType AS PaletteType, BYVAL colourPalette AS ColorPalette PTR, BYVAL alphaThresholdPercent AS SINGLE) AS GpStatus
F:CGpBitmap.GetHistogram(BYVAL nFormat AS HistogramFormat, BYVAL NumberOfEntries AS UINT, BYVAL channel0 AS UINT PTR, BYVAL channel1 AS UINT PTR, BYVAL channel2 AS UINT PTR, BYVAL channel3 AS UINT PTR) AS GpStatus
F:CGpBitmap.GetHistogramSize(BYVAL nFormat AS HistogramFormat, BYVAL NumberOfEntries AS UINT PTR) AS GpStatus
F:CGpMetafile.GetMetafileHeader(BYVAL hEmf AS HENHMETAFILE, BYVAL mh AS MetafileHeader PTR) AS GpStatus
F:CGpMetafile.GetMetafileHeader(BYVAL pwsFileName AS WSTRING PTR, BYVAL mh AS MetafileHeader PTR) AS GpStatus
F:CGpMetafile.GetMetafileHeader(BYVAL pStream AS IStream PTR, BYVAL mh AS MetafileHeader PTR) AS GpStatus
F:CGpMetafile.GetMetafileHeader(BYVAL mh AS MetafileHeader PTR) AS GpStatus
F:CGpMetafile.GetHENHMETAFILE() AS HENHMETAFILE
F:CGpMetafile.PlayRecord(BYVAL recordType AS EmfPlusRecordType, BYVAL flags AS UINT, BYVAL dataSize AS UINT, BYVAL pData AS BYTE PTR) AS GpStatus
F:CGpMetafile.SetDownLevelRasterizationLimit(BYVAL metafileRasterizationLimitDpi AS UINT) AS GpStatus
F:CGpMetafile.GetDownLevelRasterizationLimit() AS UINT
F:CGpMetafile.EmfToWmfBits(BYVAL hEmf AS HENHMETAFILE, BYVAL cbData16 AS UINT, BYVAL pData16 AS BYTE PTR, BYVAL iMapMode AS INT_ = MM_ANISOTROPIC, BYVAL eFlags AS INT_ = EmfToWmfBitsFlagsDefault) AS GpStatus
F:CGpBrush.Clone(BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpBrush.GetType() AS GpBrushType
F:CGpSolidBrush.GetColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpSolidBrush.GetColor() AS ARGB
F:CGpSolidBrush.SetColor(BYVAL colour AS ARGB) AS GpStatus
F:CGpTextureBrush.SetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpTextureBrush.GetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpTextureBrush.ResetTransform() AS GpStatus
F:CGpTextureBrush.MultiplyTransform(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpTextureBrush.TranslateTransform(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpTextureBrush.ScaleTransform(BYVAL sx AS SINGLE, BYVAL sy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpTextureBrush.RotateTransform(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpTextureBrush.SetWrapMode(BYVAL nWrapMode AS WrapMode) AS GpStatus
F:CGpTextureBrush.GetWrapMode() AS WrapMode
F:CGpTextureBrush.GetImage(BYVAL pImage AS CGpImage PTR) AS GpStatus
F:CGpLinearGradientBrush.SetLinearColors(BYVAL color1 AS ARGB, BYVAL color2 AS ARGB) AS GpStatus
F:CGpLinearGradientBrush.GetLinearColors(BYVAL colors AS ARGB PTR) AS GpStatus
F:CGpLinearGradientBrush.GetRectangle(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpLinearGradientBrush.GetRectangle(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpLinearGradientBrush.SetGammaCorrection(BYVAL useGammaCorrection AS BOOL) AS GpStatus
F:CGpLinearGradientBrush.GetGammaCorrection() AS BOOLEAN
F:CGpLinearGradientBrush.GetBlendCount() AS INT_
F:CGpLinearGradientBrush.SetBlend(BYVAL blendFactors AS SINGLE PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpLinearGradientBrush.GetBlend(BYVAL blendFactors AS SINGLE PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpLinearGradientBrush.GetInterpolationColorCount() AS INT_
F:CGpLinearGradientBrush.SetInterpolationColors(BYVAL presetColors AS ARGB PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpLinearGradientBrush.GetInterpolationColors(BYVAL presetColors AS ARGB PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpLinearGradientBrush.SetBlendBellShape(BYVAL focus AS SINGLE, BYVAL scale AS SINGLE = 1.0) AS GpStatus
F:CGpLinearGradientBrush.SetBlendTriangularShape(BYVAL focus AS SINGLE, BYVAL scale AS SINGLE = 1.0) AS GpStatus
F:CGpLinearGradientBrush.SetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpLinearGradientBrush.GetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpLinearGradientBrush.ResetTransform() AS GpStatus
F:CGpLinearGradientBrush.MultiplyTransform(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpLinearGradientBrush.TranslateTransform(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpLinearGradientBrush.ScaleTransform(BYVAL sx AS SINGLE, BYVAL sy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpLinearGradientBrush.RotateTransform(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpLinearGradientBrush.SetWrapMode(BYVAL nWrapMode AS WrapMode) AS GpStatus
F:CGpLinearGradientBrush.GetWrapMode() AS WrapMode
F:CGpPathGradientBrush.GetCenterColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpPathGradientBrush.SetCenterColor(BYVAL colour AS ARGB) AS GpStatus
F:CGpPathGradientBrush.GetPointCount() AS INT_
F:CGpPathGradientBrush.GetSurroundColorCount() AS INT_
F:CGpPathGradientBrush.GetSurroundColors(BYVAL colors AS ARGB PTR, BYVAL nCount AS INT_ PTR) AS GpStatus
F:CGpPathGradientBrush.SetSurroundColors(BYVAL colors AS ARGB PTR, BYVAL nCount AS INT_ PTR) AS GpStatus
F:CGpPathGradientBrush.GetGraphicsPath(BYVAL pGraphPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpPathGradientBrush.SetGraphicsPath(BYVAL pGraphPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpPathGradientBrush.GetCenterPoint(BYVAL pt AS GpPointF PTR) AS GpStatus
F:CGpPathGradientBrush.GetCenterPoint(BYVAL pt AS GpPoint PTR) AS GpStatus
F:CGpPathGradientBrush.SetCenterPoint(BYVAL pt AS GpPointF PTR) AS GpStatus
F:CGpPathGradientBrush.SetCenterPoint(BYVAL pt AS GpPoint PTR) AS GpStatus
F:CGpPathGradientBrush.GetRectangle(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpPathGradientBrush.GetRectangle(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpPathGradientBrush.SetGammaCorrection(BYVAL useGammaCorrection AS BOOL) AS GpStatus
F:CGpPathGradientBrush.GetGammaCorrection() AS BOOLEAN
F:CGpPathGradientBrush.GetBlendCount() AS INT_
F:CGpPathGradientBrush.GetBlend(BYVAL blendFactors AS SINGLE PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPathGradientBrush.SetBlend(BYVAL blendFactors AS SINGLE PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPathGradientBrush.GetInterpolationColorCount() AS INT_
F:CGpPathGradientBrush.SetInterpolationColors(BYVAL presetColors AS ARGB PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPathGradientBrush.GetInterpolationColors(BYVAL presetColors AS ARGB PTR, BYVAL blendPositions AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPathGradientBrush.SetBlendBellShape(BYVAL focus AS SINGLE, BYVAL scale AS SINGLE = 1.0) AS GpStatus
F:CGpPathGradientBrush.SetBlendTriangularShape(BYVAL focus AS SINGLE, BYVAL scale AS SINGLE = 1.0) AS GpStatus
F:CGpPathGradientBrush.GetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpPathGradientBrush.SetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpPathGradientBrush.ResetTransform() AS GpStatus
F:CGpPathGradientBrush.MultiplyTransform(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPathGradientBrush.TranslateTransform(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPathGradientBrush.ScaleTransform(BYVAL sx AS SINGLE, BYVAL sy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPathGradientBrush.RotateTransform(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPathGradientBrush.GetFocusScales(BYVAL xScale AS SINGLE PTR, BYVAL yScale AS SINGLE PTR) AS GpStatus
F:CGpPathGradientBrush.SetFocusScales(BYVAL xScale AS SINGLE, BYVAL yScale AS SINGLE) AS GpStatus
F:CGpPathGradientBrush.GetWrapMode() AS WrapMode
F:CGpPathGradientBrush.SetWrapMode(BYVAL nWrapMode AS WrapMode) AS GpStatus
F:CGpHatchBrush.GetHatchStyle() AS HatchStyle
F:CGpHatchBrush.GetForegroundColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpHatchBrush.GetBackgroundColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpFont.GetLogFontA(BYVAL pGraphics AS CGpGraphics PTR, BYVAL pfA AS LOGFONTA PTR) AS GpStatus
F:CGpFont.GetLogFontW(BYVAL pGraphics AS CGpGraphics PTR, BYVAL pfW AS LOGFONTW PTR) AS GpStatus
F:CGpFont.Clone(BYVAL pCloneFont AS CGpFont PTR) AS GpStatus
F:CGpFont.IsAvailable() AS BOOLEAN
F:CGpFont.GetFamily(BYVAL pFamily AS CGpFontFamily PTR) AS GpStatus
F:CGpFont.GetStyle() AS INT_
F:CGpFont.GetSize() AS SINGLE
F:CGpFont.GetUnit() AS GpUnit
F:CGpFont.GetHeight(BYVAL pGraphics AS CGpGraphics PTR) AS SINGLE
F:CGpFont.GetHeight(BYVAL dpi AS SINGLE) AS SINGLE
F:CGpFontFamily.Clone(BYVAL pFontFamily AS CGpFontFamily PTR) AS GpStatus
F:CGpFontFamily.GenericSansSerif(BYVAL pFontFamily AS CGpFontFamily PTR) AS GpStatus
F:CGpFontFamily.GenericSerif(BYVAL pFontFamily AS CGpFontFamily PTR) AS GpStatus
F:CGpFontFamily.GenericMonospace(BYVAL pFontFamily AS CGpFontFamily PTR) AS GpStatus
F:CGpFontFamily.GetFamilyName(BYVAL pwszName AS WSTRING PTR, BYVAL language AS LANGID = LANG_NEUTRAL) AS GpStatus
F:CGpFontFamily.IsAvailable() AS BOOLEAN
F:CGpFontFamily.IsStyleAvailable(BYVAL nStyle AS INT_) AS BOOLEAN
F:CGpFontFamily.GetEmHeight(BYVAL nStyle AS INT_) AS UINT16
F:CGpFontFamily.GetCellAscent(BYVAL nStyle AS INT_) AS UINT16
F:CGpFontFamily.GetCellDescent(BYVAL nStyle AS INT_) AS UINT16
F:CGpFontFamily.GetLineSpacing(BYVAL nStyle AS INT_) AS UINT16
F:CGpFontCollection.GetFamilyCount() AS INT_
F:CGpFontCollection.GetFamilies(BYVAL numSought AS INT_, BYVAL gpfamilies AS CGpFontFamily PTR, BYVAL numFound AS INT_ PTR) AS GpStatus
F:CGpPrivateFontCollection.AddFontFile(BYVAL pwszFileName AS WSTRING PTR) AS GpStatus
F:CGpPrivateFontCollection.AddMemoryFont(BYVAL pMemory AS ANY PTR, BYVAL length AS INT_) AS GpStatus
F:CGpGraphics.FromHDC(BYVAL hdc AS HDC) AS GpStatus
F:CGpGraphics.FromHDC(BYVAL hdc AS HDC, BYVAL hDevice AS HANDLE) AS GpStatus
F:CGpGraphics.FromHWND(BYVAL hwnd AS HWND, BYVAL icm AS BOOLEAN = FALSE) AS GpStatus
F:CGpGraphics.FromImage(BYVAL pImage AS CGpImage PTR) AS GpStatus
F:CGpGraphics.Flush(BYVAL intention AS FlushIntention = FlushIntentionFlush)
F:CGpGraphics.GetHDC() AS HDC
F:CGpGraphics.ReleaseHDC(BYVAL hdc AS HDC)
F:CGpGraphics.SetRenderingOrigin(BYVAL x AS INT_, BYVAL y AS INT_) AS GpStatus
F:CGpGraphics.GetRenderingOrigin(BYVAL x AS LONG PTR, BYVAL y AS LONG PTR) AS GpStatus
F:CGpGraphics.SetCompositingMode(BYVAL nCompositingMode AS CompositingMode) AS GpStatus
F:CGpGraphics.GetCompositingMode() AS CompositingMode
F:CGpGraphics.SetCompositingQuality(BYVAL nQuality AS CompositingQuality) AS GpStatus
F:CGpGraphics.GetCompositingQuality() AS CompositingQuality
F:CGpGraphics.SetTextRenderingHint(BYVAL newMode AS TextRenderingHint) AS GpStatus
F:CGpGraphics.GetTextRenderingHint() AS TextRenderingHint
F:CGpGraphics.SetTextContrast(BYVAL contrast AS UINT) AS GpStatus
F:CGpGraphics.GetTextContrast() AS UINT
F:CGpGraphics.GetInterpolationMode() AS InterpolationMode
F:CGpGraphics.SetInterpolationMode(BYVAL interpolationMode AS LONG) AS GpStatus
F:CGpGraphics.GetSmoothingMode() AS SmoothingMode
F:CGpGraphics.SetSmoothingMode(BYVAL smoothingMode AS LONG) AS GpStatus
F:CGpGraphics.GetPixelOffsetMode() AS PixelOffsetMode
F:CGpGraphics.SetPixelOffsetMode(BYVAL nMode AS PixelOffsetMode) AS GpStatus
F:CGpGraphics.SetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpGraphics.ResetTransform() AS GpStatus
F:CGpGraphics.MultiplyTransform(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpGraphics.TranslateTransform(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpGraphics.ScaleTransform(BYVAL sx AS SINGLE, BYVAL sy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpGraphics.RotateTransform(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpGraphics.GetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpGraphics.SetPageUnit(BYVAL unit AS GpUnit) AS GpStatus
F:CGpGraphics.SetPageScale(BYVAL nScale AS SINGLE) AS GpStatus
F:CGpGraphics.GetPageUnit() AS GpUnit
F:CGpGraphics.GetPageScale() AS SINGLE
F:CGpGraphics.GetDpiX() AS SINGLE
F:CGpGraphics.GetDpiY() AS SINGLE
F:CGpGraphics.TransformPoints(BYVAL destSpace AS CoordinateSpace, BYVAL srcSpace AS CoordinateSpace, BYVAL pts AS GpPointF PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.TransformPoints(BYVAL destSpace AS CoordinateSpace, BYVAL srcSpace AS CoordinateSpace, BYVAL pts AS GpPoint PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.GetNearestColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpGraphics.DrawLine(BYVAL pPen AS CGpPen PTR, BYVAL x1 AS SINGLE, BYVAL y1 AS SINGLE, BYVAL x2 AS SINGLE, BYVAL y2 AS SINGLE) AS GpStatus
F:CGpGraphics.DrawLine(BYVAL pPen AS CGpPen PTR, BYVAL x1 AS INT_, BYVAL y1 AS INT_, BYVAL x2 AS INT_, BYVAL y2 AS INT_) AS GpStatus
F:CGpGraphics.DrawLine(BYVAL pPen AS CGpPen PTR, BYVAL pt1 AS GpPointF PTR, BYVAL pt2 AS GpPointF PTR) AS GpStatus
F:CGpGraphics.DrawLine(BYVAL pPen AS CGpPen PTR, BYVAL pt1 AS GpPoint PTR, BYVAL pt2 AS GpPoint PTR) AS GpStatus
F:CGpGraphics.DrawLines(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.DrawLines(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.DrawArc(BYVAL pPen AS CGpPen PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawArc(BYVAL pPen AS CGpPen PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawArc(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRectF PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawArc(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRect PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawBezier(BYVAL pPen AS CGpPen PTR, BYVAL x1 AS SINGLE, BYVAL y1 AS SINGLE, BYVAL x2 AS SINGLE, BYVAL y2 AS SINGLE, BYVAL x3 AS SINGLE, BYVAL y3 AS SINGLE, BYVAL x4 AS SINGLE, BYVAL y4 AS SINGLE) AS GpStatus
F:CGpGraphics.DrawBezier(BYVAL pPen AS CGpPen PTR, BYVAL x1 AS INT_, BYVAL y1 AS INT_, BYVAL x2 AS INT_, BYVAL y2 AS INT_, BYVAL x3 AS INT_, BYVAL y3 AS INT_, BYVAL x4 AS INT_, BYVAL y4 AS INT_) AS GpStatus
F:CGpGraphics.DrawBezier(BYVAL pPen AS CGpPen PTR, BYVAL pt1 AS GpPointF PTR, BYVAL pt2 AS GpPointF PTR, BYVAL pt3 AS GpPointF PTR, BYVAL pt4 AS GpPointF PTR) AS GpStatus
F:CGpGraphics.DrawBezier(BYVAL pPen AS CGpPen PTR, BYVAL pt1 AS GpPoint PTR, BYVAL pt2 AS GpPoint PTR, BYVAL pt3 AS GpPoint PTR, BYVAL pt4 AS GpPoint PTR) AS GpStatus
F:CGpGraphics.DrawBeziers(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawBeziers(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawRectangle(BYVAL pPen AS CGpPen PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.DrawRectangle(BYVAL pPen AS CGpPen PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.DrawRectangle(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.DrawRectangle(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.DrawRectangles(BYVAL pPen AS CGpPen PTR, BYVAL rects AS GpRectF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawRectangles(BYVAL pPen AS CGpPen PTR, BYVAL rects AS GpRect PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawEllipse(BYVAL pPen AS CGpPen PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.DrawEllipse(BYVAL pPen AS CGpPen PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.DrawEllipse(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.DrawEllipse(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.DrawPie(BYVAL pPen AS CGpPen PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawPie(BYVAL pPen AS CGpPen PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawPie(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRectF PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawPie(BYVAL pPen AS CGpPen PTR, BYVAL rc AS GpRect PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.DrawPolygon(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.DrawPolygon(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS LONG) AS GpStatus
F:CGpGraphics.DrawPath(BYVAL pPen AS CGpPen PTR, BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL offset AS INT_, BYVAL numberOfSegments AS INT_, BYVAL tension AS SINGLE = 0.5) AS GpStatus
F:CGpGraphics.DrawCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL offset AS INT_, BYVAL numberOfSegments AS INT_, BYVAL tension AS SINGLE = 0.5) AS GpStatus
F:CGpGraphics.DrawClosedCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawClosedCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawClosedCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphics.DrawClosedCurve(BYVAL pPen AS CGpPen PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphics.Clear(BYVAL colour AS ARGB) AS GpStatus
F:CGpGraphics.FillRectangle(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.FillRectangle(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.FillRectangle(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.FillRectangle(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.FillRectangles(BYVAL pBrush AS CGpBrush PTR, BYVAL rects AS GpRectF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillRectangles(BYVAL pBrush AS CGpBrush PTR, BYVAL rects AS GpRect PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillPolygon(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillPolygon(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillPolygon(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL nFillMode AS FillMode) AS GpStatus
F:CGpGraphics.FillPolygon(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL nFillMode AS FillMode) AS GpStatus
F:CGpGraphics.FillEllipse(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.FillEllipse(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.FillEllipse(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.FillEllipse(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.FillPie(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.FillPie(BYVAL pBrush AS CGpBrush PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.FillPie(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRectF PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.FillPie(BYVAL pBrush AS CGpBrush PTR, BYVAL rc AS GpRect PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphics.FillPath(BYVAL pBrush AS CGpBrush PTR, BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpGraphics.FillClosedCurve(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillClosedCurve(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.FillClosedCurve(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPointF PTR, BYVAL nCount AS LONG, BYVAL nFillMode AS FillMode, BYVAL tension AS SINGLE = 0.5) AS GpStatus
F:CGpGraphics.FillClosedCurve(BYVAL pBrush AS CGpBrush PTR, BYVAL pts AS GpPoint PTR, BYVAL nCount AS LONG, BYVAL nFillMode AS FillMode, BYVAL tension AS SINGLE = 0.5) AS GpStatus
F:CGpGraphics.FillRegion(BYVAL pBrush AS CGpBrush PTR, BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL rcf AS GpRectF PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRect AS GpRectF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL origin as GpPointF PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL origin AS GpPointF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.DrawString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRect AS GpRectF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL boundingBox AS GpRectF PTR, BYREF codepointsFitted AS INT_ = 0, BYREF linesFilled AS INT_ = 0) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRectSize AS GpSizeF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL size AS GpSizeF PTR, BYREF codepointsFitted AS INT_ = 0, BYREF linesFilled AS INT_ = 0) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL origin AS GpPointF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL boundingBox AS GpRectF PTR) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRect AS GpRectF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL boundingBox AS GpRectF PTR) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRect AS GpRectF PTR, BYVAL boundingBox AS GpRectF PTR) AS GpStatus
F:CGpGraphics.MeasureString(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL origin AS GpPointF PTR, BYVAL boundingBox AS GpRectF PTR) AS GpStatus
F:CGpGraphics.MeasureCharacterRanges(BYVAL pwszString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL layoutRect AS GpRectF PTR, BYVAL pStringFormat AS CGpStringFormat PTR, BYVAL regionCount AS INT_, BYVAL regions AS CGpRegion PTR) AS GpStatus
F:CGpGraphics.DrawDriverString(BYVAL pText AS UINT16 PTR, BYVAL length AS INT_, BYVAL pFont AS CGpFont PTR, BYVAL pBrush AS CGpBrush PTR, BYVAL positions AS ANY PTR, BYVAL flags AS INT_, BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpGraphics.MeasureDriverString(BYVAL pText AS UINT16 PTR, BYVAL length AS LONG, BYVAL pFont AS CGpFont PTR, BYVAL positions AS ANY PTR, BYVAL flags AS LONG, BYVAL pMatrix AS CGpMatrix PTR, BYVAL boundingBox AS GpRectF PTR) AS GpStatus
F:CGpGraphics.DrawCachedBitmap(BYVAL pCachedBitmap AS CGpCachedBitmap PTR, BYVAL x AS LONG, BYVAL y AS LONG) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL pt AS GpPointF PTR) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL pt AS GpPoint PTR) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS INT_, BYVAL y AS INT_) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destPoints AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destPoints AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL srcx AS SINGLE, BYVAL srcy AS SINGLE, BYVAL srcwidth AS SINGLE, BYVAL srcheight AS SINGLE, BYVAL srcUnit AS gpUnit) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL x AS INT_, BYVAL y AS INT_, BYVAL srcx AS INT_, BYVAL srcy AS INT_, BYVAL srcwidth AS INT_, BYVAL srcheight AS INT_, BYVAL srcUnit AS gpUnit) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destRect AS GpRectF PTR, BYVAL srcx AS SINGLE, BYVAL srcy AS SINGLE, BYVAL srcwidth AS SINGLE, BYVAL srcheight AS SINGLE, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destRect AS GpRect PTR, BYVAL srcx AS INT_, BYVAL srcy AS INT_, BYVAL srcwidth AS INT_, BYVAL srcheight AS INT_, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destx AS SINGLE, BYVAL desty AS SINGLE, BYVAL destWidth AS SINGLE, BYVAL destHeight AS SINGLE, BYVAL srcx AS SINGLE, BYVAL srcy AS SINGLE, BYVAL srcwidth AS SINGLE, BYVAL srcheight AS SINGLE, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destx AS INT_, BYVAL desty AS INT_, BYVAL destWidth AS INT_, BYVAL destHeight AS INT_, BYVAL srcx AS INT_, BYVAL srcy AS INT_, BYVAL srcwidth AS INT_, BYVAL srcheight AS INT_, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destPoints AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL srcx AS SINGLE, BYVAL srcy AS SINGLE, BYVAL srcwidth AS SINGLE, BYVAL srcheight AS SINGLE, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destPoints AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL srcx AS INT_, BYVAL srcy AS INT_, BYVAL srcwidth AS INT_, BYVAL srcheight AS INT_, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL, BYVAL pcallback AS DrawImageAbort = NULL, BYVAL pcallbackData AS ANY PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destRect AS GpRectF PTR, BYVAL sourceRect AS GpRectF PTR, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destRect AS GpRect PTR, BYVAL sourceRect AS GpRect PTR, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destx AS SINGLE, BYVAL desty AS SINGLE, BYVAL destWidth AS SINGLE, BYVAL destHeight AS SINGLE, BYVAL srcx AS SINGLE, BYVAL srcy AS SINGLE, BYVAL srcWidth AS SINGLE, BYVAL srcHeight AS SINGLE, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL) AS GpStatus
F:CGpGraphics.DrawImage(BYVAL pImage AS CGpImage PTR, BYVAL destx AS INT_, BYVAL desty AS INT_, BYVAL destWidth AS INT_, BYVAL destHeight AS INT_, BYVAL srcx AS INT_, BYVAL srcy AS INT_, BYVAL srcWidth AS INT_, BYVAL srcHeight AS INT_, BYVAL srcUnit AS GpUnit, BYVAL pImageAttributes AS CGpImageAttributes PTR = NULL) AS GpStatus
F:CGpGraphics.SetClip(BYVAL pGraphics AS CGpGraphics PTR, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL rc AS GpRectF PTR, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL rc AS GpRect PTR, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL pPath AS CGpGraphicsPath PTR, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL pRegion AS CGpRegion PTR, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.SetClip(BYVAL hRgn AS HRGN, BYVAL nCombineMode AS CombineMode = CombineModeReplace) AS GpStatus
F:CGpGraphics.IntersectClip(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpGraphics.IntersectClip(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.IntersectClip(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.IntersectClip(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.IntersectClip(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpGraphics.ExcludeClip(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpGraphics.ExcludeClip(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.ExcludeClip(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphics.ExcludeClip(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphics.ExcludeClip(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpGraphics.ResetClip() AS GpStatus
F:CGpGraphics.TranslateClip(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE) AS GpStatus
F:CGpGraphics.GetClip(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpGraphics.GetClipBounds(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.GetClipBounds(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.IsClipEmpty() AS BOOLEAN
F:CGpGraphics.GetVisibleClipBounds(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpGraphics.GetVisibleClipBounds(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphics.IsVisibleClipEmpty() AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL pt AS GpPointF PTR) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL pt AS GpPoint PTR) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL x AS INT_, BYVAL y AS INT_) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL rcf AS GpRectF PTR) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL rc AS GpRect PTR) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS BOOLEAN
F:CGpGraphics.IsVisible(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS BOOLEAN
F:CGpGraphics.Save() AS GraphicsState
F:CGpGraphics.Restore(BYVAL gstate AS GraphicsState) AS GpStatus
F:CGpGraphics.BeginContainer() AS GraphicsContainer
F:CGpGraphics.BeginContainer(BYVAL destrect AS GpRectF PTR, BYVAL srcrect AS GpRectF PTR, BYVAL nUnit AS GpUnit) AS GraphicsContainer
F:CGpGraphics.BeginContainer(BYVAL destrect AS GpRect PTR, BYVAL srcrect AS GpRect PTR, BYVAL nUnit AS GpUnit) AS GraphicsContainer
F:CGpGraphics.EndContainer(BYVAL state AS GraphicsContainer) AS GpStatus
F:CGpGraphics.AddMetafileComment(BYVAL pdata AS BYTE PTR, BYVAL sizeData AS UINT) AS GpStatus
F:CGpGraphics.GetHalftonePalette() AS HPALETTE
F:CGpImageAttributes.Clone(BYVAL pCloneImgAttr AS CGpImageAttributes PTR) AS GpStatus
F:CGpImageAttributes.SetToIdentity(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.Reset(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetColorMatrix(BYVAL pColorMatrix AS ColorMatrix PTR, BYVAL nMode AS ColorMatrixFlags = ColorMatrixFlagsDefault, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearColorMatrix(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetColorMatrices(BYVAL pColorMatrix AS ColorMatrix PTR, BYVAL pGrayMatrix AS ColorMatrix PTR, BYVAL nMode AS ColorAdjustType = ColorMatrixFlagsDefault, BYVAL nType AS LONG = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearColorMatrices(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetThreshold(BYVAL threshold AS SINGLE, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearThreshold(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetGamma(BYVAL gamma AS SINGLE, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearGamma(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetNoOp(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearNoOp(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetColorKey(BYVAL colorLow AS ARGB, BYVAL colorHigh AS ARGB, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearColorKey(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetOutputChannel(BYVAL channelFlags AS LONG, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearOutputChannel(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetOutputChannelColorProfile(BYVAL pwszColorProfileFilename AS WSTRING PTR, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearOutputChannelColorProfile(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetRemapTable(BYVAL mapSize AS UINT, BYVAL map AS ANY PTR, BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.SetBrushRemapTable(BYVAL mapSize AS UINT, BYVAL map AS ANY PTR) AS GpStatus
F:CGpImageAttributes.ClearRemapTable(BYVAL nType AS ColorAdjustType = ColorAdjustTypeDefault) AS GpStatus
F:CGpImageAttributes.ClearBrushRemapTable() AS GpStatus
F:CGpImageAttributes.SetWrapMode(BYVAL nWrap AS WrapMode, BYVAL colour AS ARGB = &HFF000000, BYVAL clamp AS BOOL = FALSE) AS GpStatus
F:CGpImageAttributes.GetAdjustedPalette(BYVAL pColorPalette AS ColorPalette PTR, BYVAL colorAdjustType AS LONG) AS GpStatus
F:CGpCustomLineCap.SetStrokeCaps(BYVAL startCap AS LineCap, BYVAL endCap AS LineCap) AS GpStatus
F:CGpCustomLineCap.GetStrokeCaps(BYVAL startCap AS LineCap PTR, BYVAL endCap AS LineCap PTR) AS GpStatus
F:CGpCustomLineCap.SetStrokeCap(BYVAL strokeCap AS LineCap) AS GpStatus
F:CGpCustomLineCap.SetStrokeJoin(BYVAL nLineJoin AS LineJoin) AS GpStatus
F:CGpCustomLineCap.GetStrokeJoin() AS LineJoin
F:CGpCustomLineCap.SetBaseCap(BYVAL baseCap AS LineCap) AS GpStatus
F:CGpCustomLineCap.GetBaseCap() AS LineCap
F:CGpCustomLineCap.SetBaseInset(BYVAL inset AS SINGLE) AS GpStatus
F:CGpCustomLineCap.GetBaseInset() AS SINGLE
F:CGpCustomLineCap.SetWidthScale(BYVAL widthScale AS SINGLE) AS GpStatus
F:CGpCustomLineCap.GetWidthScale() AS SINGLE
F:CGpCustomLineCap.Clone(BYVAL pCustomLineCap AS CGpCustomLineCap PTR) AS GpStatus
F:CGpAdjustableArrowCap.SetHeight(BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpAdjustableArrowCap.GetHeight() AS SINGLE
F:CGpAdjustableArrowCap.SetWidth(BYVAL nWidth AS SINGLE) AS GpStatus
F:CGpAdjustableArrowCap.GetWidth() AS SINGLE
F:CGpAdjustableArrowCap.SetMiddleInset(BYVAL middleInset AS SINGLE) AS GpStatus
F:CGpAdjustableArrowCap.GetMiddleInset() AS SINGLE
F:CGpAdjustableArrowCap.SetFillState(BYVAL bIsFilled AS BOOL) AS GpStatus
F:CGpAdjustableArrowCap.IsFilled() AS BOOLEAN
F:CGpMatrix.GetElements(BYVAL m AS SINGLE PTR) AS GpStatus
F:CGpMatrix.SetElements(BYVAL m11 AS SINGLE, BYVAL m12 AS SINGLE, BYVAL m21 AS SINGLE, BYVAL m22 AS SINGLE, BYVAL dx AS SINGLE, BYVAL dy AS SINGLE) AS GpStatus
F:CGpMatrix.OffsetX() AS SINGLE
F:CGpMatrix.OffsetY() AS SINGLE
F:CGpMatrix.Reset() AS GpStatus
F:CGpMatrix.Multiply(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.Translate(BYVAL nOffsetX AS SINGLE, BYVAL nOffsetY AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.Scale(BYVAL scaleX AS SINGLE, BYVAL scaleY AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.Rotate(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.RotateAt(BYVAL angle AS SINGLE, BYVAL center AS GpPointF PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.Shear(BYVAL shearX AS SINGLE, BYVAL shearY AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpMatrix.Invert() AS GpStatus
F:CGpMatrix.TransformPoints(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_ = 1) AS GpStatus
F:CGpMatrix.TransformPoints(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_ = 1) AS GpStatus
F:CGpMatrix.TransformVectors(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_ = 1) AS GpStatus
F:CGpMatrix.TransformVectors(BYVAL pts AS GpPoint pTR, BYVAL nCount AS INT_ = 1) AS GpStatus
F:CGpMatrix.IsInvertible() AS BOOLEAN
F:CGpMatrix.IsIdentity() AS BOOLEAN
F:CGpMatrix.Equals(BYVAL pMatrix AS CGpMatrix PTR) AS BOOLEAN
F:CGpMatrix.Clone(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpGraphicsPath.Clone(BYVAL pCloneGraphicsPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpGraphicsPath.Reset() AS GpStatus
F:CGpGraphicsPath.GetFillMode() AS FillMode
F:CGpGraphicsPath.SetFillMode(BYVAL nFillmode AS FillMode) AS GpStatus
F:CGpGraphicsPath.GetPathData(BYVAL pPathData AS ANY PTR) AS GpStatus
F:CGpGraphicsPath.StartFigure() AS GpStatus
F:CGpGraphicsPath.CloseFigure() AS GpStatus
F:CGpGraphicsPath.CloseAllFigures() AS GpStatus
F:CGpGraphicsPath.SetMarker() AS GpStatus
F:CGpGraphicsPath.ClearMarkers() AS GpStatus
F:CGpGraphicsPath.Reverse() AS GpStatus
F:CGpGraphicsPath.GetLastPoint(BYVAL lastPoint AS GpPointF PTR) AS GpStatus
F:CGpGraphicsPath.AddLine(BYVAL x1 AS SINGLE, BYVAL y1 AS SINGLE, BYVAL x2 AS SINGLE, BYVAL y2 AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddLine(BYVAL x1 AS INT_, BYVAL y1 AS INT_, BYVAL x2 AS INT_, BYVAL y2 AS INT_) AS GpStatus
F:CGpGraphicsPath.AddLine(BYVAL pt1 AS GpPointF PTR, BYVAL pt2 AS GpPointF PTR) AS GpStatus
F:CGpGraphicsPath.AddLine(BYVAL pt1 AS GpPoint PTR, BYVAL pt2 AS GpPoint PTR) AS GpStatus
F:CGpGraphicsPath.AddLines(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddLines(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddArc(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddArc(BYVAL rcf AS GpRectF PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddArc(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddArc(BYVAL rc AS GpRect PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddBezier(BYVAL x1 AS SINGLE, BYVAL y1 AS SINGLE, BYVAL x2 AS SINGLE, BYVAL y2 AS SINGLE, BYVAL x3 AS SINGLE, BYVAL y3 AS SINGLE, BYVAL x4 AS SINGLE, BYVAL y4 AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddBezier(BYVAL x1 AS INT_, BYVAL y1 AS INT_, BYVAL x2 AS INT_, BYVAL y2 AS INT_, BYVAL x3 AS INT_, BYVAL y3 AS INT_, BYVAL x4 AS INT_, BYVAL y4 AS INT_) AS GpStatus
F:CGpGraphicsPath.AddBezier(BYVAL pt1 AS GpPointF PTR, BYVAL pt2 AS GpPointF PTR, BYVAL pt3 AS GpPointF PTR, BYVAL pt4 AS GpPointF PTR) AS GpStatus
F:CGpGraphicsPath.AddBezier(BYVAL pt1 AS GpPoint PTR, BYVAL pt2 AS GpPoint PTR, BYVAL pt3 AS GpPoint PTR, BYVAL pt4 AS GpPoint PTR) AS GpStatus
F:CGpGraphicsPath.AddBeziers(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddBeziers(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL offset AS INT_, BYVAL numberOfSegments AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddCurve(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL offset AS INT_, BYVAL numberOfSegments AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddClosedCurve(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddClosedCurve(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddClosedCurve(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddClosedCurve(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_, BYVAL tension AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddRectangle(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddRectangle(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphicsPath.AddRectangle(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpGraphicsPath.AddRectangle(BYVAL rcf AS GpRect PTR) AS GpStatus
F:CGpGraphicsPath.AddRectangles(BYVAL rects AS GpRectF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddRectangles(BYVAL rects AS GpRect PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddEllipse(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddEllipse(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_) AS GpStatus
F:CGpGraphicsPath.AddEllipse(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpGraphicsPath.AddEllipse(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpGraphicsPath.AddPie(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddPie(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddPie(BYVAL rcf AS GpRectF PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddPie(BYVAL rc AS GpRect PTR, BYVAL startAngle AS SINGLE, BYVAL sweepAngle AS SINGLE) AS GpStatus
F:CGpGraphicsPath.AddPolygon(BYVAL pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddPolygon(BYVAL pts AS GpPoint PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.AddPath(BYVAL pAddingPath AS CGpGraphicsPath PTR, BYVAL bConnect AS BOOL) AS GpStatus
F:CGpGraphicsPath.AddString(BYVAL pString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFamily AS CGpFontFamily PTR, BYVAL nStyle AS INT_, BYVAL emSize AS SINGLE, BYVAL layoutRect AS GpRectF PTR, BYVAL pFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpGraphicsPath.AddString(BYVAL pString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFamily AS CGpFontFamily PTR, BYVAL nStyle AS INT_, BYVAL emSize AS SINGLE, BYVAL layoutRect AS GpRect PTR, BYVAL pFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpGraphicsPath.AddString(BYVAL pString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFamily AS CGpFontFamily PTR, BYVAL nStyle AS INT_, BYVAL emSize AS SINGLE, BYVAL origin AS GpPointF PTR, BYVAL pFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpGraphicsPath.AddString(BYVAL pString AS WSTRING PTR, BYVAL length AS INT_, BYVAL pFamily AS CGpFontFamily PTR, BYVAL nStyle AS INT_, BYVAL emSize AS SINGLE, BYVAL origin AS GpPoint PTR, BYVAL pFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpGraphicsPath.TransForm(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpGraphicsPath.GetBounds(BYVAL bounds AS GpRectF PTR, BYVAL pMatrix AS CGpMatrix PTR, BYVAL pPen AS CGpPen PTR) AS GpStatus
F:CGpGraphicsPath.GetBounds(BYVAL bounds AS GpRect PTR, BYVAL pMatrix AS CGpMatrix PTR, BYVAL pPen AS CGpPen PTR) AS GpStatus
F:CGpGraphicsPath.Flatten(BYVAL pMatrix AS CGpMatrix PTR = NULL, BYVAL flatness AS SINGLE = FlatnessDefault) AS GpStatus
F:CGpGraphicsPath.Widen(BYVAL pPen AS CGpPen PTR, BYVAL pMatrix AS CGpMatrix PTR = NULL, BYVAL flatness AS SINGLE = FlatnessDefault) AS GpStatus
F:CGpGraphicsPath.Outline(BYVAL pMatrix AS CGpMatrix PTR = NULL, BYVAL flatness AS SINGLE = FlatnessDefault) AS GpStatus
F:CGpGraphicsPath.Warp(BYVAL destPoints AS GpPointF PTR, BYVAL nCount AS INT_, BYVAL srcRect AS GpRectF PTR, BYVAL pMatrix AS CGpMatrix PTR = NULL, BYVAL nWarpMode AS WarpMode = WarpModePerspective, BYVAL Flatness AS SINGLE = FlatnessDefault) AS GpStatus
F:CGpGraphicsPath.GetPointCount() AS INT_
F:CGpGraphicsPath.GetPathTypes(BYVAL types AS BYTE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.GetPathPoints(BYREF pts AS GpPointF PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpGraphicsPath.IsVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsVisible(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsVisible(BYVAL pt AS GpPointF PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsVisible(BYVAL pt AS GpPoint PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsOutlineVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL pPen AS CGpPen PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsOutlineVisible(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL pPen AS CGpPen PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsOutlineVisible(BYVAL pt AS GpPointF PTR, BYVAL pPen AS CGpPen PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPath.IsOutlineVisible(BYVAL pt AS GpPoint PTR, BYVAL pPen AS CGpPen PTR, BYVAL pGraphics AS CGpGraphics PTR = NULL) AS BOOLEAN
F:CGpGraphicsPathIterator.NextSubpath(BYVAL startIndex AS INT_ PTR, BYVAL endIndex AS INT_ PTR, BYVAL isClosed AS BOOL PTR) AS INT_
F:CGpGraphicsPathIterator.NextSubpathPath(BYVAL pPath AS CGpGraphicsPath PTR, BYVAL isClosed AS BOOL PTR) AS INT_
F:CGpGraphicsPathIterator.NextPathType(BYVAL pathType AS BYTE PTR, BYVAL startIndex AS INT_ PTR, BYVAL endIndex AS INT_ PTR) AS INT_
F:CGpGraphicsPathIterator.NextMarker(BYVAL startIndex AS INT_ PTR, BYVAL endIndex AS INT_ PTR) AS INT_
F:CGpGraphicsPathIterator.NextMarker(BYVAL pPath AS CGpGraphicsPath PTR) AS INT_
F:CGpGraphicsPathIterator.GetCount() AS INT_
F:CGpGraphicsPathIterator.GetSubpathCount() AS INT_
F:CGpGraphicsPathIterator.HasCurve() AS BOOLEAN
F:CGpGraphicsPathIterator.Enumerate(BYVAL pts AS GpPointF PTR, BYVAL types AS BYTE PTR, BYVAL nCount AS INT_) AS INT_
F:CGpGraphicsPathIterator.CopyData(BYVAL pts AS GpPointF PTR, BYVAL types AS BYTE PTR, BYVAL startIndex AS INT_, BYVAL endIndex AS INT_) AS INT_
F:CGpPen.Clone(BYVAL pPen AS CGpPen PTR) AS GpStatus
F:CGpPen.SetWidth(BYVAL nWidth AS SINGLE) AS GpStatus
F:CGpPen.GetWidth() AS SINGLE
F:CGpPen.SetLineCap(BYVAL startCap AS LineCap, BYVAL endCap AS LineCap, BYVAL nDashCap AS DashCap) AS GpStatus
F:CGpPen.SetStartCap(BYVAL startCap AS LineCap) AS GpStatus
F:CGpPen.SetEndCap(BYVAL endCap AS LineCap) AS GpStatus
F:CGpPen.SetDashCap(BYVAL nDashCap AS DashCap) AS GpStatus
F:CGpPen.GetStartCap() AS LineCap
F:CGpPen.GetEndCap() AS LineCap
F:CGpPen.GetDashCap() AS DashCap
F:CGpPen.SetLineJoin(BYVAL nLineJoin AS LineJoin) AS GpStatus
F:CGpPen.GetLineJoin() AS LineJoin
F:CGpPen.SetCustomStartCap(BYVAL pCustomLineCap AS CGpCustomLineCap PTR) AS GpStatus
F:CGpPen.GetCustomStartCap(BYVAL pCustomLineCap AS CGpCustomLineCap PTR) AS GpStatus
F:CGpPen.SetCustomEndCap(BYVAL pCustomLineCap AS CGpCustomLineCap PTR) AS GpStatus
F:CGpPen.GetCustomEndCap(BYVAL pCustomLineCap AS CGpCustomLineCap PTR) AS GpStatus
F:CGpPen.SetMiterLimit(BYVAL miterLimit AS SINGLE) AS GpStatus
F:CGpPen.GetMiterLimit() AS SINGLE
F:CGpPen.SetAlignment(BYVAL nPenAlignment AS PenAlignment) AS GpStatus
F:CGpPen.GetAlignment() AS PenAlignment
F:CGpPen.SetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpPen.GetTransform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpPen.ResetTransform() AS GpStatus
F:CGpPen.MultiplyTransform(BYVAL pMatrix AS CGpMatrix PTR, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPen.TranslateTransform(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPen.ScaleTransform(BYVAL sx AS SINGLE, BYVAL sy AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPen.RotateTransform(BYVAL angle AS SINGLE, BYVAL order AS MatrixOrder = MatrixOrderPrepend) AS GpStatus
F:CGpPen.GetPenType() AS PenType
F:CGpPen.SetColor(BYVAL colour AS ARGB) AS GpStatus
F:CGpPen.SetBrush(BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpPen.GetColor(BYVAL colour AS ARGB PTR) AS GpStatus
F:CGpPen.GetBrush(BYVAL pBrush AS CGpBrush PTR) AS GpStatus
F:CGpPen.GetDashStyle() AS DashStyle
F:CGpPen.SetDashStyle(BYVAL nDashStyle AS DashStyle) AS GpStatus
F:CGpPen.GetDashOffset() AS SINGLE
F:CGpPen.SetDashOffset(BYVAL dashOffset AS SINGLE) AS GpStatus
F:CGpPen.SetDashPattern(BYVAL dashArray AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPen.GetDashPatternCount() AS INT_
F:CGpPen.GetDashPattern(BYVAL dashArray AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPen.SetCompoundArray(BYVAL compoundArray AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpPen.GetCompoundArrayCount() AS GpStatus
F:CGpPen.GetCompoundArray(BYVAL compoundArray AS SINGLE PTR, BYVAL nCount AS INT_) AS GpStatus
F:CGpRegion.Clone(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.MakeInfinite() AS GpStatus
F:CGpRegion.MakeEmpty() AS GpStatus
F:CGpRegion.Intersect(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpRegion.Intersect(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpRegion.Intersect(BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpRegion.Intersect(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.Union_(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpRegion.Union_(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpRegion.Union_(BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpRegion.Union_(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.Xor_(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpRegion.Xor_(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpRegion.Xor_(BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpRegion.Xor_(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.Exclude(BYVAL rc AS GpRectF PTR) AS GpStatus
F:CGpRegion.Exclude(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpRegion.Exclude(BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpRegion.Exclude(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.Complement(BYVAL rcf AS GpRectF PTR) AS GpStatus
F:CGpRegion.Complement(BYVAL rc AS GpRect PTR) AS GpStatus
F:CGpRegion.Complement(BYVAL pPath AS CGpGraphicsPath PTR) AS GpStatus
F:CGpRegion.Complement(BYVAL pRegion AS CGpRegion PTR) AS GpStatus
F:CGpRegion.Translate(BYVAL dx AS SINGLE, BYVAL dy AS SINGLE) AS GpStatus
F:CGpRegion.Translate(BYVAL dx AS INT_, BYVAL dy AS INT_) AS GpStatus
F:CGpRegion.Transform(BYVAL pMatrix AS CGpMatrix PTR) AS GpStatus
F:CGpRegion.GetBounds(BYVAL rc AS GpRectF PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.GetBounds(BYVAL rc AS GpRect PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.GetHRGN(BYVAL pGraphics AS CGpGraphics PTR) AS HRGN
F:CGpRegion.IsEmpty(BYVAL pGraphics AS CGpGraphics PTR) AS BOOLEAN
F:CGpRegion.IsInfinite(BYVAL pGraphics AS CGpGraphics PTR) AS BOOLEAN
F:CGpRegion.Equals(BYVAL pRegion AS CGpRegion PTR, BYVAL pGraphics AS CGpGraphics PTR) AS BOOLEAN
F:CGpRegion.GetDataSize() AS UINT
F:CGpRegion.GetData(BYVAL buffer AS BYTE PTR, BYVAL bufferSize AS UINT, BYVAL sizeFilled AS UINT PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL pt AS GpPointF PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL pt AS GpPoint PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL rc AS GpRectF PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL rc AS GpRect PTR, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL x AS SINGLE, BYVAL y AS SINGLE, BYVAL nWidth AS SINGLE, BYVAL nHeight AS SINGLE, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.IsVisible(BYVAL x AS INT_, BYVAL y AS INT_, BYVAL nWidth AS INT_, BYVAL nHeight AS INT_, BYVAL pGraphics AS CGpGraphics PTR) AS GpStatus
F:CGpRegion.GetRegionScansCount(BYVAL pMatrix AS CGpMatrix PTR) AS UINT
F:CGpRegion.GetRegionScans(BYVAL pMatrix AS CGpMatrix PTR, BYVAL rects AS GpRectF PTR, BYVAL nCount AS INT_ PTR) AS GpStatus
F:CGpStringFormat.Clone(BYVAL pCloneStringFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpStringFormat.GenericDefault(BYVAL pStringFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpStringFormat.GenericTypographic(BYVAL pStringFormat AS CGpStringFormat PTR) AS GpStatus
F:CGpStringFormat.SetFormatFlags(BYVAL flags AS INT_) AS GpStatus
F:CGpStringFormat.GetFormatFlags() AS INT_
F:CGpStringFormat.SetAlignment(BYVAL nAlign AS StringAlignment) AS GpStatus
F:CGpStringFormat.GetAlignment() AS StringAlignment
F:CGpStringFormat.SetLineAlignment(BYVAL nAlign AS StringAlignment) AS GpStatus
F:CGpStringFormat.GetLineAlignment() AS StringAlignment
F:CGpStringFormat.SetHotkeyPrefix(BYVAL nHotkeyPrefix AS HotkeyPrefix) AS GpStatus
F:CGpStringFormat.GetHotkeyPrefix() AS HotkeyPrefix
F:CGpStringFormat.SetTabStops(BYVAL firstTabOffset AS SINGLE, BYVAL nCount AS INT_, BYVAL tabStops AS SINGLE PTR) AS GpStatus
F:CGpStringFormat.GetTabStopCount() AS INT_
F:CGpStringFormat.GetTabStops(BYVAL nCount AS INT_, BYVAL firstTabOffset AS SINGLE PTR, BYVAL tabStops AS SINGLE PTR) AS GpStatus
F:CGpStringFormat.SetDigitSubstitution(BYVAL language AS LANGID, BYVAL substitute AS StringDigitSubstitute) AS GpStatus
F:CGpStringFormat.GetDigitSubstitutionLanguage() AS LANGID
F:CGpStringFormat.GetDigitSubstitutionMethod() AS StringDigitSubstitute
F:CGpStringFormat.SetTrimming(BYVAL trimming AS StringTrimming) AS GpStatus
F:CGpStringFormat.GetTrimming() AS StringTrimming
F:CGpStringFormat.SetMeasurableCharacterRanges(BYVAL rangeCount AS INT_, BYVAL ranges AS CharacterRange PTR) AS GpStatus
F:CGpStringFormat.GetMeasurableCharacterRangeCount() AS INT_
F:CGraphCtx.CGraphCtxProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CGraphCtx.hWindow() AS HWND
F:CGraphCtx.SetVirtualBufferSize(BYVAL nWidth AS LONG, BYVAL nHeight AS LONG) AS LONG
F:CGraphCtx.GetMemDC() AS HDC
F:CGraphCtx.GethRC() AS HGLRC
F:CGraphCtx.GethBmp() AS HBITMAP
F:CGraphCtx.GetBits() AS ANY PTR
F:CGraphCtx.Clear(BYVAL RGBColor AS COLORREF) AS BOOLEAN
F:CGraphCtx.GetVirtualBufferWidth() AS LONG
F:CGraphCtx.GetVirtualBufferHeight() AS LONG
F:CGraphCtx.LoadImageFromFile(BYREF wszFileName AS WSTRING)
F:CGraphCtx.CreateBitmapFromFile(BYREF wszFileName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE)
F:CGraphCtx.LoadImageFromRes(BYVAL hInst AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE, BYVAL clrBackground AS ARGB = 0)
F:CGraphCtx.DrawBitmap(BYVAL hbmp AS HBITMAP, BYVAL x AS SINGLE = 0, BYVAL y AS SINGLE = 0, BYVAL nRight AS SINGLE = 0, BYVAL nBottom AS SINGLE = 0) AS GpStatus
F:CGraphCtx.DrawBitmap(BYVAL pBitmap AS GpBitmap PTR, BYVAL x AS SINGLE = 0, BYVAL y AS SINGLE = 0, BYVAL nRight AS SINGLE = 0, BYVAL nBottom AS SINGLE = 0) AS GpStatus
F:CGraphCtx.DrawBitmap(BYREF pMemBmp AS CMemBmp, BYVAL x AS SINGLE = 0, BYVAL y AS SINGLE = 0, BYVAL nRight AS SINGLE = 0, BYVAL nBottom AS SINGLE = 0) AS GpStatus
F:CGraphCtx.SaveImage(BYREF wszFileName AS WSTRING, BYREF wszMimeType AS WSTRING = "#########") AS LONG
F:CGraphCtx.SaveImageAsBmp(BYREF wszFileName AS WSTRING) AS LONG
F:CGraphCtx.SaveImageAsJpeg(BYREF wszFileName AS WSTRING) AS LONG
F:CGraphCtx.SaveImageAsPng(BYREF wszFileName AS WSTRING) AS LONG
F:CGraphCtx.SaveImageAsGif(BYREF wszFileName AS WSTRING) AS LONG
F:CGraphCtx.SaveImageAsTiff(BYREF wszFileName AS WSTRING) AS LONG
F:CGraphCtx.PrintImage(BYVAL bStretch AS BOOLEAN = FALSE, BYVAL nStretchMode AS LONG = InterpolationModeHighQualityBicubic) AS BOOLEAN
F:CGraphCtx.SetPixelFormat(BYVAL nBitsPerPel AS LONG) AS BOOLEAN
F:CGraphCtx.CreateContext() AS HGLRC
F:CGraphCtx.DeleteContext() AS BOOLEAN
F:CGraphCtx.MakeCurrent() AS BOOLEAN
F:CGraphCtx.MakeNotCurrent() AS BOOLEAN
F:AfxCGraphCtxPtr(BYVAL hwnd AS HWND) AS CGraphCtx PTR
F:CImageCtx.CImageCtxProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CImageCtx.hWindow() AS HWND
F:CImageCtx.DrawImage(BYVAL hwnd AS HWND, BYVAL hDC AS HDC, BYVAL pImage AS GpImage PTR) AS LONG
F:CImageCtx.LoadImageFromFile(BYREF wszFileName AS WSTRING) AS LONG
F:CImageCtx.LoadBitmapFromResource(BYVAL hInstance AS HINSTANCE, BYREF wszResourceName AS WSTRING) AS LONG
F:CImageCtx.LoadImageFromResource(BYVAL hInstance AS HINSTANCE, BYREF wszResourceName AS WSTRING) AS LONG
F:CImageCtx.SetImageAdjustment(BYVAL ImageAdjustment AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE) AS LONG
F:CImageCtx.GetImageAdjustment() AS LONG
F:CImageCtx.GetImageWidth() AS LONG
F:CImageCtx.GetImageHeight() AS LONG
F:CImageCtx.SetBkColor(BYVAL clr AS LONG, BYVAL fRedraw AS BOOLEAN = FALSE) AS LONG
F:CImageCtx.GetBkColor() AS LONG
F:CImageCtx.SetInterpolationMode(BYVAL InterpolationMode AS LONG)
F:CImageCtx.GetInterpolationMode() AS LONG
F:CImageCtx.GetImagePtr() AS GpImage PTR
F:AfxCImageCtxPtr(BYVAL hCtl AS HWND) AS CImageCtx PTR
F:CIniFile.GetPath() AS CWSTR
F:CIniFile.WriteValue(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYREF wszValue AS WSTRING) AS BOOLEAN
F:CIniFile.WriteValue(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYREF dblValue AS DOUBLE) AS BOOLEAN
F:CIniFile.WriteValue(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYREF intValue AS LONG) AS BOOLEAN
F:CIniFile.GetString(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYREF wszDefaultValue AS WSTRING = "") AS CWSTR
F:CIniFile.GetDouble(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYVAL nDefaultValue AS DOUBLE = 0) AS DOUBLE
F:CIniFile.GetInt(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING, BYVAL nDefaultValue AS LONG = 0) AS LONG
F:CIniFile.DeleteKey(BYREF wszSectionName AS WSTRING, BYREF wszKeyName AS WSTRING) AS BOOLEAN
F:CIniFile.DeleteSection(BYREF wszSectionName AS WSTRING) AS BOOLEAN
F:CIniFile.GetSectionNames() AS CSafeArray
F:CIniFile.GetKeyNames(BYREF wszSectionName AS WSTRING) AS CSafeARray
F:CIniFile.GetSectionValues(BYREF wszSectionName AS WSTRING, BYREF pDic AS CDicObj) AS BOOLEAN
F:CLayout.GetAnchorItem(BYVAL hwndCtl AS HWND) AS LONG
F:CLayout.AnchorControl(BYVAL hwndCtl AS HWND, BYVAL nAnchorMode AS LONG) AS BOOLEAN
F:CLayout.AfxLayoutEnumChildProc(BYVAL hwndChild AS HWND, BYVAL lParam AS LPARAM) AS LONG
F:CMemBmp.GetMemDC() AS HDC
F:CMemBmp.GethBmp() AS HBITMAP
F:CMemBmp.DrawBitmap(BYVAL hbmp AS HBITMAP, BYVAL x AS SINGLE = 0, BYVAL y AS SINGLE = 0, BYVAL nRight AS SINGLE = 0, BYVAL nBottom AS SINGLE = 0) AS GpStatus
F:CMemBmp.DrawBitmap(BYVAL pBitmap AS GpBitmap PTR, BYVAL x AS SINGLE = 0, BYVAL y AS SINGLE = 0, BYVAL nRight AS SINGLE = 0, BYVAL nBottom AS SINGLE = 0) AS GpStatus
F:CMemBmp.GetWidth() AS LONG
F:CMemBmp.GetHeight() AS LONG
F:CMemBmp.GetWidthBytes() AS LONG
F:CMemBmp.GetPlanes() AS LONG
F:CMemBmp.GetBitsPixel() AS LONG
F:CMemBmp.GetPixel(BYVAL x AS LONG, BYVAL y AS LONG) AS COLORREF
F:CMemBmp.SetPixel(BYVAL x AS LONG, BYVAL y AS LONG, BYVAL crColor AS COLORREF) AS COLORREF
F:CMemBmp.SaveBitmap(BYREF wszFileName AS WSTRING, BYREF wszMimeType AS WSTRING = "#########") AS LONG
F:CMemBmp.SaveBitmapAsBmp(BYREF wszFileName AS WSTRING) AS LONG
F:CMemBmp.SaveBitmapAsJpeg(BYREF wszFileName AS WSTRING) AS LONG
F:CMemBmp.SaveBitmapAsPng(BYREF wszFileName AS WSTRING) AS LONG
F:CMemBmp.SaveBitmapAsGif(BYREF wszFileName AS WSTRING) AS LONG
F:CMemBmp.SaveBitmapAsTiff(BYREF wszFileName AS WSTRING) AS LONG
F:CMemBmp.PrintBitmap(BYVAL bStretch AS BOOLEAN = FALSE, BYVAL nStretchMode AS LONG = InterpolationModeHighQualityBicubic) AS BOOLEAN
F:COdbcBase.GetLastResult() AS SQLRETURN
F:COdbcBase.SetResult(BYVAL Result AS SQLRETURN, BYREF wszSrc AS WSTRING = "", BYVAL HandleType AS SQLSMALLINT = 0, BYVAL Handle AS SQLHANDLE = NULL) AS SQLRETURN
F:COdbcBase.Error() AS BOOLEAN
F:COdbcBase.SetErrorProc(BYVAL pProc AS ANY PTR, BYVAL reportWarnings AS BOOLEAN = FALSE)
F:COdbcBase.GetErrorInfo(BYVAL HandleType AS SQLSMALLINT, BYVAL Handle AS SQLHANDLE, BYVAL iErrorCode AS SQLRETURN = 0) AS CWSTR
F:COdbcBase.GetSqlState(BYVAL HandleType AS SQLSMALLINT, BYVAL Handle AS SQLHANDLE) AS CWSTR
F:COdbcBase.ODBCVersion() AS SQLUINTEGER
F:COdbcBase.GetEnvAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLINTEGER, BYVAL StringLength AS SQLINTEGER PTR) AS SQLRETURN
F:COdbcBase.SetEnvAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL StringLength AS SQLINTEGER) AS SQLRETURN
F:COdbcBase.GetCPMatch() AS SQLUINTEGER
F:COdbcBase.SetCPMatch(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcBase.GetOutputNTS() AS SQLUINTEGER
F:COdbcBase.SetOutputNTS(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcBase.GetDataSources(BYVAL Direction AS SQLUSMALLINT, BYREF cwsServerName AS CWSTR, BYREF cwsDescription AS CWSTR) AS SQLRETURN
F:COdbcBase.GetDrivers(BYVAL Direction AS SQLUSMALLINT, BYREF cwsDriverDesc AS CWSTR, BYREF cwsDriverAttributes AS CWSTR) AS SQLRETURN
F:COdbc.Handle() AS SQLHANDLE
F:COdbc.EnvHandle() AS SQLHANDLE
F:COdbc.GetDiagField(BYVAL RecNumber AS SQLSMALLINT, BYVAL DiagIdentifier AS SQLSMALLINT, BYVAL DiagInfoPtr AS SQLPOINTER, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLengthPtr AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbc.GetDiagRec(BYVAL RecNumber AS SQLSMALLINT, BYVAL Sqlstate AS WSTRING PTR, BYVAL NativeError AS SQLINTEGER PTR, BYVAL MessageText AS WSTRING PTR, BYVAL BufferLength AS SQLSMALLINT, BYVAL TextLength AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbc.GetErrorInfo(BYVAL iErrorCode AS SQLRETURN = 0) AS CWSTR
F:COdbc.GetSqlState() AS CWSTR
F:COdbc.NativeSql(BYREF wszInText AS WSTRING) AS CWSTR
F:COdbc.Functions(BYVAL FunctionId AS SQLUSMALLINT) AS BOOLEAN
F:COdbc.Supports(BYVAL FunctionId AS SQLUSMALLINT) AS BOOLEAN
F:COdbc.CommitTran() AS SQLRETURN
F:COdbc.RollbackTran() AS SQLRETURN
F:COdbc.GetConnectAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLINTEGER, BYVAL StringLength AS SQLINTEGER PTR) AS SQLRETURN
F:COdbc.SetConnectAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL StringLength AS SQLINTEGER) AS SQLRETURN
F:COdbc.GetConnectAttr(BYREF wszAttribute AS WSTRING) AS SQLUINTEGER
F:COdbc.GetConnectAttrStr(BYREF wszAttribute AS WSTRING) AS CWSTR
F:COdbc.SetConnectAttr(BYREF wszAttribute AS WSTRING, BYVAL dwAttribute AS SQLUINTEGER) AS SQLRETURN
F:COdbc.SetConnectAttr(BYREF wszAttribute AS WSTRING, BYREF wszAttrValue AS WSTRING) AS SQLRETURN
F:COdbc.GetInfo(BYVAL InfoType AS SQLUSMALLINT, BYVAL InfoValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLength AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbc.GetInfoStr(BYREF wszInfoType AS WSTRING) AS CWSTR
F:COdbc.GetInfo(BYREF wszInfoType AS WSTRING) AS SQLINTEGER
F:COdbcStmt.Handle() AS SQLHANDLE
F:COdbcStmt.DbcHandle() AS SQLHANDLE
F:COdbcStmt.GetDiagField(BYVAL RecNumber AS SQLSMALLINT, BYVAL DiagIdentifier AS SQLSMALLINT, BYVAL DiagInfoPtr AS SQLPOINTER, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLengthPtr AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.GetDiagRec(BYVAL RecNumber AS SQLSMALLINT, BYVAL Sqlstate AS WSTRING PTR, BYVAL NativeError AS SQLINTEGER PTR, BYVAL MessageText AS WSTRING PTR, BYVAL BufferLength AS SQLSMALLINT, BYVAL TextLength AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.GetErrorInfo(BYVAL iErrorCode AS SQLRETURN = 0) AS CWSTR
F:COdbcStmt.GetSqlState() AS CWSTR
F:COdbcStmt.ExecDirect(BYREF wszSqlStr AS WSTRING) AS SQLRETURN
F:COdbcStmt.RecordCount(BYREF wszSqlStr AS WSTRING) AS LONG
F:COdbcStmt.Cancel() AS SQLRETURN
F:COdbcStmt.NumResultCols() AS SQLSMALLINT
F:COdbcStmt.MoreResults() AS SQLRETURN
F:COdbcStmt.RowCount() AS SQLLEN
F:COdbcStmt.Fetch() AS BOOLEAN
F:COdbcStmt.GetData(BYVAL ColumnNumber AS SQLUSMALLINT, BYVAL TargetType AS SQLSMALLINT, BYVAL TargetValue AS SQLPOINTER, BYVAL BufferLength AS SQLLEN, BYVAL StrLen_or_Ind AS SQLLEN PTR) AS SQLRETURN
F:COdbcStmt.GetData(BYREF ColumnName AS WSTRING, BYVAL TargetType AS SQLSMALLINT, BYVAL TargetValue AS SQLPOINTER, BYVAL BufferLength AS SQLLEN, BYVAL StrLen_or_Ind AS SQLLEN PTR) AS SQLRETURN
F:COdbcStmt.GetData(BYVAL ColumnNumber AS SQLUSMALLINT, BYVAL nMaxChars AS LONG = 256 * 2) AS CWSTR
F:COdbcStmt.GetData(BYREF ColumnName AS WSTRING, BYVAL nMaxChars AS LONG = 256 * 2) AS CWSTR
F:COdbcStmt.GetLongVarcharData(BYVAL ColumnNumber AS SQLSMALLINT) AS CWSTR
F:COdbcStmt.GetLongVarcharData(BYREF ColumnName AS WSTRING) AS CWSTR
F:COdbcStmt.PutData(BYVAL pData AS SQLPOINTER, BYVAL StrLen_or_Ind AS SQLLEN) AS SQLRETURN
F:COdbcStmt.ParamData(BYVAL ValuePtrPtr AS SQLPOINTER PTR) AS SQLRETURN
F:COdbcStmt.ResetParams() AS SQLRETURN
F:COdbcStmt.Prepare(BYREF StatementText AS WSTRING) AS SQLRETURN
F:COdbcStmt.Execute() AS SQLRETURN
F:COdbcStmt.DescribeCol(BYVAL ColumnNumber AS SQLUSMALLINT, BYVAL pwszColumnName AS WSTRING PTR, BYVAL BufferLength AS SQLSMALLINT, BYVAL NameLengthPtr AS SQLSMALLINT PTR, BYVAL DataTypePtr AS SQLSMALLINT PTR, BYVAL ColumnSizePtr AS SQLULEN PTR, BYVAL DecimalDigitsPtr AS SQLSMALLINT PTR, BYVAL Nullable AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.NumParams() AS SQLSMALLINT
F:COdbcStmt.DescribeParam(BYVAL ParameterNumber AS SQLUSMALLINT, BYVAL DataTypePtr AS SQLSMALLINT PTR, BYVAL ParameterSizePtr AS SQLULEN PTR, BYVAL DecimalDigitsPtr AS SQLSMALLINT PTR, BYVAL NullablePtr AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.ColIsNull(BYVAL ColumnNumber AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetType AS SQLSMALLINT, BYVAL TargetValue AS SQLPOINTER, BYVAL BufferLength AS SQLLEN, BYVAL StrLen_or_Ind AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS BYTE PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS UBYTE PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS SHORT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS USHORT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS LONG PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS ULONG PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS SINGLE PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS DOUBLE PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS LONGINT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS ULONGINT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS ZSTRING PTR, BYVAL BufferLenght AS SQLLEN, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS WSTRING PTR, BYVAL BufferLenght AS SQLLEN, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS DATE_STRUCT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS TIME_STRUCT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS TIMESTAMP_STRUCT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindCol(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS ANY PTR, BYVAL BufferLenght AS SQLLEN, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindColToBit(BYVAL ColNumber AS SQLUSMALLINT, BYVAL TargetValue AS SHORT PTR, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindColToNumeric(BYVAL ColNumber AS SQLUSMALLINT, BYREF TargetValue AS ZSTRING, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.BindColToDecimal(BYVAL ColNumber AS SQLUSMALLINT, BYREF TargetValue AS ZSTRING, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.UnbindCol(BYVAL nCol AS SQLUSMALLINT) AS SQLRETURN
F:COdbcStmt.UnbindColumns() AS SQLRETURN
F:COdbcStmt.BindParameter(BYVAL ParameterNumber AS SQLUSMALLINT, BYVAL InputOutputType AS SQLSMALLINT, BYVAL ValueType AS SQLSMALLINT, BYVAL ParameterType AS SQLSMALLINT, BYVAL ColumnSize AS SQLULEN, BYVAL DecimalDigits AS SQLSMALLINT, BYVAL ParameterValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLLEN, BYVAL StrLen_or_IndPtr AS ANY PTR) AS SQLRETURN
F:COdbcStmt.CloseCursor() AS SQLRETURN
F:COdbcStmt.GetCursorName() AS CWSTR
F:COdbcStmt.SetCursorName(BYREF wszCursorName AS WSTRING) AS SQLRETURN
F:COdbcStmt.FetchScroll(BYVAL FetchOrientation AS SQLSMALLINT, BYVAL FetchOffset AS SQLLEN) AS SQLRETURN
F:COdbcStmt.ExtendedFetch(BYVAL FetchOrientation AS SQLUSMALLINT, BYVAL FetchOffset AS SQLLEN, BYVAL RowCountPtr AS ANY PTR, BYVAL RowStatusArray AS SQLUSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.MoveFirst() AS SQLRETURN
F:COdbcStmt.MoveLast() AS SQLRETURN
F:COdbcStmt.MoveNext() AS SQLRETURN
F:COdbcStmt.MovePrevious() AS SQLRETURN
F:COdbcStmt.Move(BYVAL FetchOffset AS SQLLEN) AS SQLRETURN
F:COdbcStmt.SetAbsolutePosition(BYVAL FetchOffset AS SQLLEN) AS SQLRETURN
F:COdbcStmt.SetRelativePosition(BYVAL FetchOffset AS SQLLEN) AS SQLRETURN
F:COdbcStmt.SetPos(BYVAL wRow AS SQLSETPOSIROW, BYVAL fOption AS SQLUSMALLINT, BYVAL fLock AS SQLUSMALLINT) AS SQLRETURN
F:COdbcStmt.SetPosition(BYVAL wRow AS SQLSETPOSIROW) AS SQLRETURN
F:COdbcStmt.UpdateRecord(BYVAL wRow AS SQLSETPOSIROW = 1) AS SQLRETURN
F:COdbcStmt.RefreshRecord(BYVAL wRow AS SQLSETPOSIROW = 1, BYVAL fLock AS SQLUSMALLINT = SQL_LOCK_NO_CHANGE) AS SQLRETURN
F:COdbcStmt.LockRecord(BYVAL wRow AS SQLSETPOSIROW = 1) AS SQLRETURN
F:COdbcStmt.UnlockRecord(BYVAL wRow AS SQLSETPOSIROW = 1) AS SQLRETURN
F:COdbcStmt.DeleteRecord(BYVAL wRow AS SQLSETPOSIROW = 1) AS SQLRETURN
F:COdbcStmt.BulkOperations(BYVAL Operation AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.AddRecord() AS SQLRETURN
F:COdbcStmt.UpdateByBookmark() AS SQLRETURN
F:COdbcStmt.DeleteByBookmark() AS SQLRETURN
F:COdbcStmt.FetchByBookmark() AS SQLRETURN
F:COdbcStmt.ColAttribute(BYVAL ColumnNumber AS SQLUSMALLINT, BYVAL FieldIdentifier AS SQLUSMALLINT, BYVAL CharacterAttribute AS SQLPOINTER, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLength AS SQLSMALLINT PTR, BYVAL NumericAttribute AS ANY PTR) AS SQLRETURN
F:COdbcStmt.ColAutoUniqueValue(BYVAL ColNum AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.ColBaseColumnName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColBaseTableName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColCaseSensitive(BYVAL ColNum AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.ColCatalogName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColConciseType(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColCount() AS SQLINTEGER
F:COdbcStmt.ColDisplaySize(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColFixedPrecScale(BYVAL ColNum AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.ColLabel(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColLength(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColLiteralPrefix(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColLiteralSuffix(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColLocalTypeName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColNullable(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColNumPrecRadix(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColOctetLength(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColPrecision(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColScale(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColSchemaName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColSearchable(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColTableName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColType(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColTypeName(BYVAL ColNum AS SQLUSMALLINT) AS CWSTR
F:COdbcStmt.ColUnnamed(BYVAL ColNum AS SQLUSMALLINT) AS SQLINTEGER
F:COdbcStmt.ColUnsigned(BYVAL ColNum AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.ColUpdatable(BYVAL ColNum AS SQLUSMALLINT) AS BOOLEAN
F:COdbcStmt.GetStmtAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLINTEGER, BYVAL StringLength AS SQLINTEGER PTR) AS SQLRETURN
F:COdbcStmt.SetStmtAttr(BYVAL Attribute AS SQLINTEGER, BYVAL ValuePtr AS SQLPOINTER, BYVAL StringLength AS SQLINTEGER) AS SQLRETURN
F:COdbcStmt.GetCursorConcurrency() AS SQLUINTEGER
F:COdbcStmt.SetCursorConcurrency(BYVAL LockType AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.SetOptimisticConcurrency() AS SQLRETURN
F:COdbcStmt.SetLockConcurrency() AS SQLRETURN
F:COdbcStmt.SetReadOnlyConcurrency() AS SQLRETURN
F:COdbcStmt.SetRowVerConcurrency() AS SQLRETURN
F:COdbcStmt.GetCursorType() AS SQLUINTEGER
F:COdbcStmt.SetCursorType(BYVAL CursorType AS DWORD) AS SQLRETURN
F:COdbcStmt.SetForwardOnlyCursor() AS SQLRETURN
F:COdbcStmt.SetKeysetDrivenCursor() AS SQLRETURN
F:COdbcStmt.SetStaticCursor() AS SQLRETURN
F:COdbcStmt.SetDynamicCursor() AS SQLRETURN
F:COdbcStmt.SetMultiuserKeysetCursor(BYVAL pwszCursorName AS WSTRING PTR = NULL) AS SQLRETURN
F:COdbcStmt.GetCursorKeysetSize() AS SQLUINTEGER
F:COdbcStmt.SetCursorKeysetSize(BYVAL KeysetSize AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetCursorScrollability() AS SQLUINTEGER
F:COdbcStmt.SetCursorScrollability(BYVAL CursorScrollability AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetCursorSensitivity() AS SQLUINTEGER
F:COdbcStmt.SetCursorSensitivity(BYVAL CursorSensitivity AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtAppParamDesc() AS SQLUINTEGER
F:COdbcStmt.SetStmtAppParamDesc(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtAppRowDesc() AS SQLUINTEGER
F:COdbcStmt.SetStmtAppRowDesc(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtAsyncEnable() AS SQLUINTEGER
F:COdbcStmt.SetStmtAsyncEnable(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtFetchBookmarkPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtFetchBookmarkPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetImpParamDesc() AS SQLUINTEGER
F:COdbcStmt.GetImpParamDescRec(BYVAL RecNumber AS SQLSMALLINT, BYVAL pwszName AS WSTRING PTR, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLength AS SQLSMALLINT PTR, BYVAL TypePtr AS SQLSMALLINT PTR, BYVAL SubTypePtr AS SQLSMALLINT PTR, BYVAL LengthPtr AS SQLLEN PTR, BYVAL PrecisionPtr AS SQLSMALLINT PTR, BYVAL ScalePtr AS SQLSMALLINT PTR, BYVAL NullablePtr AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.GetImpParamDescField(BYVAL RecNumber AS SQLSMALLINT, BYVAL FieldIdentifier AS SQLSMALLINT, BYVAL ValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLINTEGER, BYVAL StringLength AS SQLINTEGER PTR) AS SQLRETURN
F:COdbcStmt.GetImpParamDescFieldName(BYVAL RecNumber AS SQLSMALLINT) AS CWSTR
F:COdbcStmt.GetImpParamDescFieldType(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpParamDescFieldOctetLength(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpParamDescFieldPrecision(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpParamDescFieldScale(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpParamDescFieldNullable(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpRowDesc() AS SQLUINTEGER
F:COdbcStmt.GetImpRowDescRec(BYVAL RecNumber AS SQLSMALLINT, BYVAL pwszName AS WSTRING PTR, BYVAL BufferLength AS SQLSMALLINT, BYVAL StringLength AS SQLSMALLINT PTR, BYVAL TypePtr AS SQLSMALLINT PTR, BYVAL SubTypePtr AS SQLSMALLINT PTR, BYVAL LengthPtr AS SQLLEN PTR, BYVAL PrecisionPtr AS SQLSMALLINT PTR, BYVAL ScalePtr AS SQLSMALLINT PTR, BYVAL NullablePtr AS SQLSMALLINT PTR) AS SQLRETURN
F:COdbcStmt.GetImpRowDescField(BYVAL RecNumber AS SQLSMALLINT, BYVAL FieldIdentifier AS SQLSMALLINT, BYVAL ValuePtr AS SQLPOINTER, BYVAL BufferLength AS SQLINTEGER, BYVAL StringLength AS SQLINTEGER PTR) AS SQLRETURN
F:COdbcStmt.GetImpRowDescFieldName(BYVAL RecNumber AS SQLSMALLINT) AS CWSTR
F:COdbcStmt.GetImpRowDescFieldType(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpRowDescFieldOctetLength(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpRowDescFieldPrecision(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpRowDescFieldScale(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetImpRowDescFieldNullable(BYVAL RecNumber AS SQLSMALLINT) AS SQLSMALLINT
F:COdbcStmt.GetStmtMaxLength() AS SQLUINTEGER
F:COdbcStmt.SetStmtMaxLength(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtMaxRows() AS SQLUINTEGER
F:COdbcStmt.SetStmtMaxRows(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtNoScan() AS SQLUINTEGER
F:COdbcStmt.SetStmtNoScan(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtParamBindOffsetPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamBindOffsetPtr(BYVAL dwAttr AS DWORD) AS SQLRETURN
F:COdbcStmt.GetStmtParamBindType() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamBindType(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtParamOperationPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamOperationPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtParamsProcessedPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamsProcessedPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtParamsetSize() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamsetSize(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtQueryTimeout() AS SQLUINTEGER
F:COdbcStmt.SetStmtQueryTimeout(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRetrieveData() AS SQLUINTEGER
F:COdbcStmt.SetStmtRetrieveData(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtParamStatusPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtParamStatusPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowArraySize() AS SQLUINTEGER
F:COdbcStmt.SetStmtRowArraySize(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowBindOffsetPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtRowBindOffsetPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowBindType() AS SQLUINTEGER
F:COdbcStmt.SetStmtRowBindType(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowNumber() AS SQLUINTEGER
F:COdbcStmt.GetStmtRowOperationPtr() AS SQLUINTEGER
F:COdbcStmt.SettmtRowOperationPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowStatusPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtRowStatusPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtRowsFetchedPtr() AS SQLUINTEGER
F:COdbcStmt.SetStmtRowsFetchedPtr(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtSimulateCursor() AS SQLUINTEGER
F:COdbcStmt.SetStmtSimulateCursor(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStmtUseBookmarks() AS SQLUINTEGER
F:COdbcStmt.SetStmtUseBookmarks(BYVAL dwAttr AS SQLUINTEGER) AS SQLRETURN
F:COdbcStmt.GetStatistics(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT, BYVAL fUnique AS SQLUSMALLINT, BYVAL fCardinality AS SQLUSMALLINT) AS SQLRETURN
F:COdbcStmt.GetColumns(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT, BYREF wszColumnName AS WSTRING, BYVAL ColumnNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetTypeInfo(BYVAL DataType AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetTables(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT, BYREF wszTableType AS WSTRING, BYVAL TableTypeLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetTablePrivileges(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetPrimaryKeys(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemanameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetProcedures(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszProcName AS WSTRING, BYVAL ProcNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetSpecialColumns(BYVAL identifierType AS SQLUSMALLINT, BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLUSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLUSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLUSMALLINT, BYVAL fScope AS SQLUSMALLINT,_
F:COdbcStmt.GetColumnPrivileges(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszTableName AS WSTRING, BYVAL TableNameLength AS SQLSMALLINT, BYREF wszColumnName AS WSTRING, BYVAL ColumnNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetForeignKeys(BYREF wszPkCatalogName AS WSTRING, BYVAL pkCatalogNameLength AS SQLSMALLINT, BYREF wszPkSchemaName AS WSTRING, BYVAL pkSchemaNameLength AS SQLSMALLINT, BYREF wszPkTableName AS WSTRING, BYVAL pkTableNameLength AS SQLSMALLINT, BYREF wszFkCatalogName AS WSTRING, BYVAL FkCatalogNameLength AS SQLSMALLINT, BYREF wszFkSchemaName AS WSTRING, BYVAL FkSchemaNameLength AS SQLSMALLINT, BYREF wszFkTableName AS WSTRING, BYVAL fkTableNameLength AS SQLSMALLINT) AS SQLRETURN
F:COdbcStmt.GetProcedureColumns(BYREF wszCatalogName AS WSTRING, BYVAL CatalogNameLength AS SQLSMALLINT, BYREF wszSchemaName AS WSTRING, BYVAL SchemaNameLength AS SQLSMALLINT, BYREF wszProcName AS WSTRING, BYVAL ProcNameLength AS SQLSMALLINT, BYREF wszColumnName AS WSTRING, BYVAL ColumnNameLength AS SQLSMALLINT) AS SQLRETURN
F:COleDateTimeSpan.GetStatus() AS BOOLEAN
F:COleDateTimeSpan.SetStatus(BYVAL nStatus AS BOOLEAN)
F:COleDateTimeSpan.SetDateTimeSpan(BYVAL lDays AS LONG, BYVAL nHours AS LONG, BYVAL nMins AS LONG, BYVAL nSecs AS LONG)
F:COleDateTimeSpan.GetTotalDays() AS LONGINT
F:COleDateTimeSpan.GetTotalHours() AS LONGINT
F:COleDateTimeSpan.GetTotalMinutes() AS LONGINT
F:COleDateTimeSpan.GetTotalSeconds() AS LONGINT
F:COleDateTimeSpan.GetDays() AS LONG
F:COleDateTimeSpan.GetHours() AS LONG
F:COleDateTimeSpan.GetMinutes() AS LONG
F:COleDateTimeSpan.GetSeconds() AS LONG
F:COleDateTime.GetStatus() AS BOOLEAN
F:COleDateTime.SetStatus(BYVAL nStatus AS BOOLEAN)
F:COleDateTime.SetDateTime(BYVAL nYear AS WORD, BYVAL nMonth AS WORD, BYVAL nDay AS WORD, BYVAL nHour AS WORD, BYVAL nMin AS WORD, BYVAL nSec AS WORD) AS LONG
F:COleDateTime.SetDate(BYVAL nYear AS WORD, BYVAL nMonth AS WORD, BYVAL nDay AS WORD) AS LONG
F:COleDateTime.SetTime(BYVAL nHour AS WORD, BYVAL nMin AS WORD, BYVAL nSec AS WORD) AS LONG
F:COleDateTime.GetCurrentTime() AS COleDateTime
F:COleDateTime.GetLocalTime() AS COleDateTime
F:COleDateTime.GetSystemTime() AS COleDateTime
F:COleDateTime.GetAsSystemTime(BYREF sysTime AS SYSTEMTIME) AS BOOLEAN
F:COleDateTime.GetYear() AS WORD
F:COleDateTime.GetMonth() AS WORD
F:COleDateTime.GetDay() AS WORD
F:COleDateTime.GetHour() AS WORD
F:COleDateTime.GetMinute() AS WORD
F:COleDateTime.GetSecond() AS WORD
F:COleDateTime.GetDayOfWeek() AS WORD
F:COleDateTime.GetAsUDATE(BYREF ud AS UDATE) AS BOOLEAN
F:COleDateTime.GetDayOfYear() AS WORD
F:COleDateTime.GetAsDBTIMESTAMP(BYREF dbts AS DBTIMESTAMP) AS BOOLEAN
F:ColeDateTime.DoubleFromDate(BYVAL dt AS DATE_) AS DOUBLE
F:COleDateTime.DateFromDouble(BYVAL f AS DOUBLE) AS DATE_
F:COleDateTime.Format(BYVAL dwFlags AS DWORD = 0, BYVAL lcid AS LCID = LANG_USER_DEFAULT) AS CWSTR
F:COleDateTime.Format(BYREF wszFmt AS WSTRING) AS CWSTR
F:CPgBar3D.CPgBar3DProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CPgBar3D.hWindow() AS HWND
F:CPgBar3D.GetMaxSteps() AS LONG
F:CPgBar3D.SetMaxSteps(BYVAL nMaxSteps AS LONG)
F:CPgBar3D.GetStep() AS LONG
F:CPgBar3D.SetStep(BYVAL nStepValue AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetTextOn() AS LONG
F:CPgBar3D.SetTextOn(BYVAL nMode AS LONG)
F:CPgBar3D.GetTextPos() AS LONG
F:CPgBar3D.SetTextPos(BYVAL nPos AS LONG)
F:CPgBar3D.GetBarColor() AS LONG
F:CPgBar3D.SetBarColor(BYVAL nColor AS LONG)
F:CPgBar3D.GetBarTextColor() AS LONG
F:CPgBar3D.SetBarTextColor(BYVAL nColor AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetBarDirection() AS LONG
F:CPgBar3D.SetBarDirection(BYVAL nDirection AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetBackColor() AS LONG
F:CPgBar3D.SetBackColor(BYVAL nColor AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetTextBackColor() AS LONG
F:CPgBar3D.SetTextBackColor(BYVAL nColor AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetGradientDirection() AS LONG
F:CPgBar3D.SetGradientDirection(BYVAL nDirection AS LONG)
F:CPgBar3D.GetTextAngle() AS LONG
F:CPgBar3D.SetTextAngle(BYVAL nAngle AS LONG, BYVAL fRebuild AS LONG = FALSE)
F:CPgBar3D.BuildBar(BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.SetBarText(BYREF wszText AS WSTRING, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.SetBackText(BYREF wszText AS WSTRING, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.SetFont(BYVAL hFont AS HFONT, BYVAL fRedraw AS LONG = FALSE)
F:CPgBar3D.GetFont() AS HFONT
F:AfxClearPropVariantArray(BYVAL rgPropVar AS PROPVARIANT PTR, BYVAL cVars AS UINT)
F:AfxStgSerializePropVariant(BYVAL ppropvar AS PROPVARIANT PTR, BYVAL ppProp AS SERIALIZEDPROPERTYVALUE PTR, BYVAL pcb AS ULONG PTR) AS HRESULT
F:AfxStgDeserializePropVariant(BYVAL pProp AS SERIALIZEDPROPERTYVALUE PTR, BYVAL cbMax AS ULONG PTR, BYVAL ppropvar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantChangeType(BYVAL ppropvarDest AS PROPVARIANT PTR, BYVAL propvarSrc AS PROPVARIANT PTR, BYVAL wFlags AS USHORT, BYVAL vt AS VARTYPE) AS HRESULT
F:AfxPropVariantFromBuffer(BYVAL pv AS VOID PTR, BYVAL cb AS UINT, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantToBuffer(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pv AS LPVOID, BYVAL cb AS ULONG) AS HRESULT
F:AfxPropVariantFromResource(BYVAL hinst AS HINSTANCE, BYVAL id AS UINT, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromGUIDAsString(BYVAL guid AS IID PTR, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromClsid(BYVAL rclsid AS CLSID PTR, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromFileTime(BYVAL pft AS FILETIME PTR, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromStrRet(BYVAL pstrret AS STRRET PTR, BYVAL pidl AS PCUITEMID_CHILD, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromBooleanVector(BYVAL prgf AS WINBOOL PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromInt16Vector(BYVAL prgf AS SHORT PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromUInt16Vector(BYVAL prgf AS USHORT PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromInt32Vector(BYVAL prgn AS LONG PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromUInt32Vector(BYVAL prgn AS ULONG PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromInt64Vector(BYVAL prgn AS LONGINT PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromUInt64Vector(BYVAL prgn AS ULONGINT PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromDoubleVector(BYVAL prgn AS DOUBLE PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromFileTimeVector(BYVAL prgft AS FILETIME PTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromStringVector(BYVAL prgsz AS PCWSTR, BYVAL cElems AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromStringAsVector(BYVAL pwsz AS WSTRING PTR, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantFromPropVariantVectorElem(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantGetElementCount(BYVAL pPropVarIn AS PROPVARIANT PTR) AS ULONG
F:AfxPropVariantGetBooleanElem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pfVal AS WINBOOL PTR) AS HRESULT
F:AfxPropVariantGetInt16Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pfVal AS SHORT PTR) AS HRESULT
F:AfxPropVariantGetUInt16Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS USHORT PTR) AS HRESULT
F:AfxPropVariantGetInt32Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS LONG PTR) AS HRESULT
F:AfxPropVariantGetUInt32Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS ULONG PTR) AS HRESULT
F:AfxPropVariantGetInt64Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS LONGINT PTR) AS HRESULT
F:AfxPropVariantGetUInt64Elem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS ULONGINT PTR) AS HRESULT
F:AfxPropVariantGetDoubleElem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pnVal AS DOUBLE PTR) AS HRESULT
F:AfxPropVariantGetStringElem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL ppszVal AS PWSTR PTR) AS HRESULT
F:AfxPropVariantGetFileTimeElem(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL iElem AS ULONG, BYVAL pftVal AS FILETIME PTR) AS HRESULT
F:AfxPropVariantToBoolean(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pfRet AS WINBOOL PTR) AS HRESULT
F:AfxPropVariantToInt16(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL piRet AS SHORT PTR) AS HRESULT
F:AfxPropVariantToUInt16(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL puiRet AS USHORT PTR) AS HRESULT
F:AfxPropVariantToInt32(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL plRet AS LONG PTR) AS HRESULT
F:AfxPropVariantToUInt32(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pulRet AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt64(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pllRet AS LONGLONG PTR) AS HRESULT
F:AfxPropVariantToUInt64(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pullRet AS ULONGLONG PTR) AS HRESULT
F:AfxPropVariantToDouble(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pdblRet AS DOUBLE PTR) AS HRESULT
F:AfxPropVariantToString(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL psz AS ZSTRING PTR, BYVAL cch AS UINT) AS HRESULT
F:AfxPropVariantToBSTR(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pbstrOut AS BSTR PTR) AS HRESULT
F:AfxPropVariantToGUID(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pguid AS GUID PTR) AS HRESULT
F:AfxPropVariantToFileTime(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL stfOut AS AFX_PSTIME_FLAGS, BYVAL pftOut AS FILETIME PTR) AS HRESULT
F:AfxPropVariantToStrRet(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pstrret AS STRRET PTR) AS HRESULT
F:AfxPropVariantToBooleanVector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgf AS WINBOOL PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToBooleanVectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgf AS WINBOOL PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt16Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS SHORT PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt16VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS SHORT PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt16Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS USHORT PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt16VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS USHORT PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt32Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS LONG PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt32VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS LONG PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt32Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS ULONG PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt32VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS ULONG PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt64Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS LONGINT PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToInt64VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS LONGINT PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt64Vector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS ULONGINT PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToUInt64VectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS ULONGINT PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToDoubleVector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgn AS DOUBLE PTR, BYVAL crgn AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToDoubleVectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgn AS DOUBLE PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToStringVector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgsz AS PWSTR, BYVAL crgsz AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToStringVectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgsz AS PWSTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToFileTimeVector(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL prgft AS FILETIME PTR, BYVAL crgft AS ULONG, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantToFileTimeVectorAlloc(BYVAL pPropVar AS PROPVARIANT PTR, BYVAL pprgft AS FILETIME PTR PTR, BYVAL pcElem AS ULONG PTR) AS HRESULT
F:AfxPropVariantArrayFromPropVariant(BYVAL propvarSingle AS PROPVARIANT PTR, BYVAL ppropvarVector AS PROPVARIANT PTR) AS HRESULT
F:AfxPropVariantToBooleanWithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL fDefault AS WINBOOL) AS WINBOOL
F:AfxPropVariantToInt16WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL iDefault AS SHORT) AS SHORT
F:AfxPropVariantToUInt16WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL uiDefault AS USHORT) AS USHORT
F:AfxPropVariantToInt32WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL lDefault AS LONG) AS LONG
F:AfxPropVariantToUInt32WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL ulDefault AS ULONG) AS ULONG
F:AfxPropVariantToInt64WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL llDefault AS LONGLONG) AS LONGLONG
F:AfxPropVariantToUInt64WithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL llDefault AS LONGLONG) AS LONGLONG
F:AfxPropVariantToDoubleWithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL dblDefault AS DOUBLE) AS DOUBLE
F:AfxPropVariantToStringWithDefault(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL pszDefault AS LPCWSTR) AS PCWSTR
F:AfxPropVariantToStringAlloc(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL ppwszBuf AS WSTRING PTR PTR) AS HRESULT
F:AfxPropVarToStr(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL bClear AS BOOLEAN = FALSE) AS CWSTR
F:CPropVar.vptr() AS PROPVARIANT PTR
F:CPropVar.sptr() AS PROPVARIANT PTR
F:CPropVar.ToStr() AS CWSTR
F:CPropVar.ToWStr() AS CWSTR
F:CPropVar.wstr() AS CWSTR
F:CPropVar.ToBStr() AS CBSTR
F:CPropVar.bstr() AS CBSTR
F:CPropVar.ToUtf8() AS STRING
F:CPropVar.ToBuffer(BYVAL pv AS ANY PTR, BYVAL cb AS UINT) AS HRESULT
F:CPropVar.ToBuffer() AS STRING
F:CPropVar.ToUnknown() AS ANY PTR
F:CPropVar.ToDispatch() AS ANY PTR
F:CPropVar.ToVariant() AS VARIANT
F:CPropVar.DecToDouble() AS DOUBLE
F:CPropVar.DecToCy() AS CY
F:CPropVar.ToVbDate() AS DATE_
F:CPropVar.ToSystemTime() AS SYSTEMTIME
F:CPropVar.ToGuid() AS GUID
F:CPropVar.ToClsid() AS CLSID
F:CPropVar.ToGuidStr() AS CWSTR
F:CPropVar.ToGuidWStr() AS CWSTR
F:CPropVar.ToGuidBStr() AS CBSTR
F:CPropVar.ToFileTime(BYVAL stfOut AS AFX_PSTIME_FLAGS) AS FILETIME
F:CPropVar.ToStrRet() AS STRRET
F:CPropVar.ToBooleanArray(BYVAL prgf AS WINBOOL PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToBooleanArrayAlloc(BYVAL pprgf AS WINBOOL PTR PTR) AS ULONG
F:CPropVar.ToShortArray(BYVAL prgn AS SHORT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToShortArrayAlloc(BYVAL pprgn AS SHORT PTR PTR) AS ULONG
F:CPropVar.ToUShortArray(BYVAL prgn AS USHORT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToUShortArrayAlloc(BYVAL pprgn AS USHORT PTR PTR) AS ULONG
F:CPropVar.ToLongArray(BYVAL prgn AS LONG PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToLongArrayAlloc(BYVAL pprgn AS LONG PTR PTR) AS ULONG
F:CPropVar.ToULongArray(BYVAL prgn AS ULONG PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToULongArrayAlloc(BYVAL pprgn AS ULONG PTR PTR) AS ULONG
F:CPropVar.ToLongIntArray(BYVAL prgn AS LONGINT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToLongIntArrayAlloc(BYVAL pprgn AS LONGINT PTR PTR) AS ULONG
F:CPropVar.ToULongIntArray(BYVAL prgn AS ULONGINT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToULongIntArrayAlloc(BYVAL pprgn AS ULONGINT PTR PTR) AS ULONG
F:CPropVar.ToDoubleArray(BYVAL prgn AS DOUBLE PTR, BYVAL crgn AS ULONG) AS ULONG
F:CPropVar.ToDoubleArrayAlloc(BYVAL pprgn AS DOUBLE PTR PTR) AS ULONG
F:CPropVar.ToStringArray(BYVAL prgsz AS PWSTR, BYVAL crgsz AS ULONG) AS ULONG
F:CPropVar.ToStringArrayAlloc(BYVAL pprgsz AS PWSTR PTR) AS ULONG
F:CPropVar.ToFileTimeArray(BYVAL prgft AS FILETIME PTR, BYVAL crgft AS ULONG) AS HRESULT
F:CPropVar.ToFileTimeArrayAlloc(BYVAL prgft AS FILETIME PTR PTR) AS ULONG
F:CPropVar.Put(BYREF cpv AS CPropVar) AS HRESULT
F:CPropVar.Put(BYREF pv AS PROPVARIANT) AS HRESULT
F:CPropVar.Put(BYREF wszStr AS WSTRING)
F:CPropVar.Put(BYVAL pPropVar AS PROPVARIANT PTR) As HRESULT
F:CPropVar.Put(BYREF cws AS CWSTR)
F:CPropVar.Put(BYREF cbs AS CBSTR)
F:CPropVar.Put(BYVAL pdisp AS IDispatch PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CPropVar.Put(BYVAL punk AS IUnknown PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CPropVar.Put(BYVAL _value AS LONGINT, BYVAL _vType AS WORD)
F:CPropVar.Put(BYVAL _value AS LONGINT, BYREF strType AS STRING)
F:CPropVar.Put(BYVAL _value AS DOUBLE, BYVAL _vType AS WORD = VT_R8)
F:CPropVar.Put(BYVAL _value AS DOUBLE, BYREF strType AS STRING)
F:CPropVar.PutRef(BYVAL _pvar AS ANY PTR, BYVAL _vType AS WORD) AS HRESULT
F:CPropVar.PutRef(BYVAL _pvar AS ANY PTR, BYREF strType AS STRING) AS HRESULT
F:CPropVar.PutBool(BYVAL _value AS BOOL)
F:CPropVar.PutBoolean(BYVAL _value AS BOOLEAN)
F:CPropVar.PutByte(BYVAL _value AS BYTE)
F:CPropVar.PutUByte(BYVAL _value AS UBYTE)
F:CPropVar.PutShort(BYVAL _value AS SHORT)
F:CPropVar.PutUShort(BYVAL _value AS USHORT)
F:CPropVar.PutInt(BYVAL _value AS INT_)
F:CPropVar.PutUInt(BYVAL _value AS UINT)
F:CPropVar.PutLong(BYVAL _value AS LONG)
F:CPropVar.PutULong(BYVAL _value AS ULONG)
F:CPropVar.PutLongInt(BYVAL _value AS LONGINT)
F:CPropVar.PutULongInt(BYVAL _value AS ULONGINT)
F:CPropVar.PutSingle(BYVAL _value AS SINGLE)
F:CPropVar.PutFloat(BYVAL _value AS SINGLE)
F:CPropVar.PutDouble(BYVAL _value AS DOUBLE)
F:CPropVar.PutBuffer(BYVAL pv AS ANY PTR, BYVAL cb AS UINT) AS HRESULT
F:CPropVar.PutUtf8(BYREF strUtf8 AS STRING) AS HRESULT
F:CPropVar.PutSafeArray(BYVAL parray AS SAFEARRAY PTR, BYVAL fAttach AS BOOLEAN = FALSE) AS HRESULT
F:CPropVar.PutResource(BYVAL hinst AS HINSTANCE, BYVAL id AS UINT) AS HRESULT
F:CPropVar.PutDateString(BYVAL pwszDate AS WSTRING PTR, BYVAL lcid AS LCID = 0, BYVAL dwFlags AS ULONG = 0) AS HRESULT
F:CPropVar.PutVbDate(BYVAL vbDate AS DATE_) AS HRESULT
F:CPropVar.PutSystemTime(BYVAL st AS SYSTEMTIME PTR) AS BOOLEAN
F:CPropVar.PutGuidAsString(BYVAL guid AS GUID PTR) AS HRESULT
F:CPropVar.PutGuidAsBuffer(BYVAL guid AS GUID PTR) AS HRESULT
F:CPropVar.PutClsid(BYVAL rclsid AS CLSID PTR) AS HRESULT
F:CPropVar.PutFileTime(BYVAL pft AS FILETIME PTR) AS HRESULT
F:CPropVar.PutFileTimeArray(BYVAL prgft AS FILETIME PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutStrRet(BYVAL pstrret AS STRRET PTR, BYVAL pidl AS PCUITEMID_CHILD) AS HRESULT
F:CPropVar.PutDec(BYREF dec AS DECIMAL) AS HRESULT
F:CPropVar.PutDecFromStr(BYVAL pwszIn AS WSTRING PTR, BYVAL lcid AS LCID = 0, BYVAL dwFlags AS ULONG = 0) AS HRESULT
F:CPropVar.PutDecFromDouble(BYVAL dbIn AS DOUBLE) AS HRESULT
F:CPropVar.PutDecFromCy(BYVAL cyIn AS CY) AS HRESULT
F:CPropVar.PutBooleanArray(BYVAL prgf AS WINBOOL PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutShortArray(BYVAL prgf AS SHORT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutUShortArray(BYVAL prgf AS USHORT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutLongArray(BYVAL prgn AS LONG PTR, BYVAL cElems AS ULONG) AS CPropVar
F:CPropVar.PutULongArray(BYVAL prgn AS ULONG PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutLongIntArray(BYVAL prgn AS LONGINT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutULongIntArray(BYVAL prgn AS ULONGINT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutDoubleArray(BYVAL prgn AS DOUBLE PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutStringArray(BYVAL prgsz AS PCWSTR, BYVAL cElems AS ULONG) AS HRESULT
F:CPropVar.PutStringAsArray(BYREF wsz AS WSTRING) AS HRESULT
F:CPropVar.PutPropVariant(BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:CPropVar.PutPropVariantArrayElem(BYVAL pPropVarIn AS PROPVARIANT PTR, BYVAL iElem AS ULONG) AS CPropVar
F:CPropVar.PropVariantArrayFromPropVariant(BYVAL propvarSingle AS PROPVARIANT PTR) AS HRESULT
F:CPropVar.GetDim() AS ULONG
F:CPropVar.GetLBound(BYVAL nDim AS UINT = 1) AS LONG
F:CPropVar.GetUBound(BYVAL nDim AS UINT = 1) AS LONG
F:CPropVar.GetElementCount() AS ULONG
F:CPropVar.GetBooleanElem(BYVAL iElem AS ULONG) AS BOOLEAN
F:CPropVar.GetShortElem(BYVAL iElem AS ULONG) AS SHORT
F:CPropVar.GetUShortElem(BYVAL iElem AS ULONG) AS USHORT
F:CPropVar.GetLongElem(BYVAL iElem AS ULONG) AS LONG
F:CPropVar.GetULongElem(BYVAL iElem AS ULONG) AS ULONG
F:CPropVar.GetLongIntElem(BYVAL iElem AS ULONG) AS LONGINT
F:CPropVar.GetULongIntElem(BYVAL iElem AS ULONG) AS ULONGINT
F:CPropVar.GetDoubleElem(BYVAL iElem AS ULONG) AS DOUBLE
F:CPropVar.GetStringElem(BYVAL iElem AS ULONG) AS CWSTR
F:CPropVar.GetFileTimeElem(BYVAL iElem AS ULONG) AS FILETIME
F:CPropVar.GetPropVariantElem(BYVAL iElem AS ULONG) AS CPropVar
F:CPropVar.FormatNumber(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS CWSTR
F:CPropVar.Attach(BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:CPropVar.Attach(BYREF pv AS PROPVARIANT) AS HRESULT
F:CPropVar.Detach(BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:CPropVar.Detach(BYREF pv AS PROPVARIANT) AS HRESULT
F:CPropVar.vType() AS VARTYPE
F:CPropVar.ChangeType(BYVAL vtNew AS VARTYPE) AS HRESULT
F:CPropVar.ValLong() AS LONG
F:CPropVar.ValInt() AS LONG
F:CPropVar.ValULong() AS ULONG
F:CPropVar.ValUInt() AS ULONG
F:CPropVar.ValLongInt() AS LONGINT
F:CPropVar.ValULongInt() AS ULONGINT
F:CPropVar.ValDouble() AS DOUBLE
F:CPropVar.Value() AS DOUBLE
F:AfxGetPropVarType(BYVAL pPropVar AS PROPVARIANT PTR) AS VARTYPE
F:AfxIsPropVarTypeFloat(BYVAL vt AS VARTYPE) AS BOOLEAN
F:AfxIsPropVariantArray(BYVAL pPropVar AS PROPVARIANT PTR) AS BOOLEAN
F:AfxIsPropVariantVector(BYVAL pPropVar AS PROPVARIANT PTR) AS BOOLEAN
F:AfxIsPropVariantString(BYVAL pPropVar AS PROPVARIANT PTR) AS BOOLEAN
F:AfxIsPropVarTypeSignedInteger(BYVAL vt AS VARTYPE) AS BOOLEAN
F:AfxIsPropVarTypeUnsignedInteger(BYVAL vt AS VARTYPE) AS BOOLEAN
F:AfxIsPropVarTypeInteger(BYVAL vt AS VARTYPE) AS BOOLEAN
F:AfxIsPropVarTypeNumber(BYVAL vt AS VARTYPE) AS BOOLEAN
F:AfxCPropVarToStr(BYREF cpv AS CPROPVAR) AS CWSTR
F:AfxCPropVarOptPrm() AS CPROPVAR
F:AfxCPropVariantToBuffer(BYREF cvIn AS CPropVar, BYVAL pv AS LPVOID, BYVAL cb AS ULONG) AS ULONG
F:AfxPropVariantCompareEx(BYVAL propvar1 AS PROPVARIANT PTR, BYVAL propvar2 AS PROPVARIANT PTR, BYVAL unit AS PROPVAR_COMPARE_UNIT, BYVAL flags AS PROPVAR_COMPARE_FLAGS) AS HRESULT
F:AfxPropVariantCompare(BYVAL propvar1 AS PROPVARIANT PTR, BYVAL propvar2 AS PROPVARIANT PTR) AS HRESULT
F:CRegExp.GetLastResult() AS HRESULT
F:CRegExp.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CRegExp.Execute(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CRegExp
F:CRegExp.Execute(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CRegExp
F:CRegExp.MatchesCount() AS LONG
F:CRegExp.MatchValue(BYVAL index AS LONG) AS CBSTR
F:CRegExp.MatchPos(BYVAL index AS LONG) AS LONG
F:CRegExp.MatchLen(BYVAL index AS LONG) AS LONG
F:CRegExp.SubMatchesCount(BYVAL index AS LONG) AS LONG
F:CRegExp.SubMatchValue(BYVAL MatchIndex AS LONG, BYVAL SubMatchIndex AS LONG) AS CVAR
F:CRegExp.Test(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS BOOLEAN
F:CRegExp.Test(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS BOOLEAN
F:CRegExp.Find(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE) AS LONG
F:CRegExp.Find(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE) AS LONG
F:CRegExp.Find(BYVAL nStart AS LONG, BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE) AS LONG
F:CRegExp.Find(BYVAL nStart AS LONG, BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE) AS LONG
F:CRegExp.FindEx(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = TRUE) AS CBSTR
F:CRegExp.FindEx(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = TRUE) AS CBSTR
F:CRegExp.Replace(BYREF cbsSourceString AS CBSTR, BYREF cvReplaceString AS CVAR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Replace(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYREF cvReplaceString AS CVAR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Remove(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Remove(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = TRUE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Extract(BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Extract(BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Extract(BYVAL nStart AS LONG, BYREF cbsSourceString AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CRegExp.Extract(BYVAL nStart AS LONG, BYREF cbsSourceString AS CBSTR, BYREF cbsPattern AS CBSTR, BYVAL bIgnoreCase AS BOOLEAN = FALSE, BYVAL bGlobal AS BOOLEAN = FALSE, BYVAL bMultiline AS BOOLEAN = FALSE) AS CBSTR
F:CSafeArray.GetPtr() AS SAFEARRAY PTR
F:CSafeArray.Create(BYVAL vt AS VARTYPE, BYVAL cDims AS UINT, BYVAL prgsabound AS SAFEARRAYBOUND PTR) AS HRESULT
F:CSafeArray.Create(BYVAL vt AS VARTYPE, BYVAL cElements AS ULONG, BYVAL lLBound AS LONG) AS HRESULT
F:CSafeArray.Create(BYVAL vt AS VARTYPE, BYVAL cElements1 AS ULONG, BYVAL lLBound1 AS LONG, BYVAL cElements2 AS ULONG, BYVAL lLBound2 AS LONG) AS HRESULT
F:CSafeArray.CreateEx(BYVAL vt AS VARTYPE, BYVAL cDims AS UINT, BYVAL prgsabound AS SAFEARRAYBOUND PTR, BYVAL pvExtra AS PVOID) AS HRESULT
F:CSafeArray.CreateEx(BYVAL vt AS VARTYPE, BYVAL cElements AS ULONG, BYVAL lLBound AS LONG, BYVAL pvExtra AS ANY PTR) AS HRESULT
F:CSafeArray.CreateEx(BYVAL vt AS VARTYPE, BYVAL cElements1 AS ULONG, BYVAL lLBound1 AS LONG, BYVAL cElements2 AS ULONG, BYVAL lLBound2 AS LONG, BYVAL pvExtra AS ANY PTR) AS HRESULT
F:CSafeArray.CreateVector(BYVAL vt AS VARTYPE, BYVAL cElements AS ULONG, BYVAL lLBound AS LONG) AS HRESULT
F:CSafeArray.CreateVectorEx(BYVAL vt AS VARTYPE, BYVAL cElements AS ULONG, BYVAL lLBound AS LONG, BYVAL pvExtra AS ANY PTR) AS HRESULT
F:CSafeArray.NumDims() AS UINT
F:CSafeArray.LBound(BYVAL nDim AS UINT = 1) AS LONG
F:CSafeArray.UBound(BYVAL nDim AS UINT = 1) AS LONG
F:CSafeArray.Count(BYVAL nDim AS UINT = 1) AS UINT
F:CSafeArray.ElemSize() AS UINT
F:CSafeArray.IsResizable() AS BOOLEAN
F:CSafeArray.GetType() AS VARTYPE
F:CSafeArray.LocksCount() AS UINT
F:CSafeArray.Flags() AS USHORT
F:CSafeArray.Features() AS USHORT
F:CSafeArray.AccessData() AS ANY PTR
F:CSafeArray.UnaccessData() AS HRESULT
F:CSafeArray.Redim(BYVAL pnewsabounds AS SAFEARRAYBOUND PTR) AS HRESULT
F:CSafeArray.Redim(BYVAL cElements AS ULONG, BYVAL lLBound AS LONG) AS HRESULT
F:CSafeArray.Redim(BYVAL cElements1 AS ULONG, BYVAL lLBound1 AS LONG, BYVAL cElements2 AS ULONG, BYVAL lLBound2 AS LONG) AS HRESULT
F:CSafeArray.Copy() AS SAFEARRAY PTR
F:CSafeArray.CopyData(BYVAL psaTarget AS SAFEARRAY PTR) AS HRESULT
F:CSafeArray.CopyFrom(BYVAL psaSrc AS SAFEARRAY PTR) AS HRESULT
F:CSafeArray.PtrOfIndex(BYVAL prgIndices AS LONG PTR) AS ANY PTR
F:CSafeArray.PtrOfIndex(BYVAL idx AS LONG) AS ANY PTR
F:CSafeArray.PtrOfIndex(BYVAL cElem AS LONG, BYVAL cDim AS LONG) AS ANY PTR
F:CSafeArray.Destroy() AS HRESULT
F:CSafeArray.DestroyData() AS HRESULT
F:CSafeArray.Clear() AS HRESULT
F:CSafeArray.Erase() AS HRESULT
F:CSafeArray.Reset() AS HRESULT
F:CSafeArray.CopyFromVariant(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CSafeArray.MoveFromVariant(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CSafeArray.CopyToVariant(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CSafeArray.MoveToVariant(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CSafeArray.Attach(BYVAL psaSrc AS SAFEARRAY PTR) AS HRESULT
F:CSafeArray.Detach() AS SAFEARRAY PTR
F:CSafeArray.GetIID() AS GUID
F:CSafeArray.SetIID(BYVAL pguid AS GUID PTR) AS HRESULT
F:CSafeArray.GetRecordInfo() AS IRecordInfo PTR
F:CSafeArray.SetRecordInfo(BYVAL prinfo AS IRecordInfo PTR) AS HRESULT
F:CSafeArray.GetElement(BYVAL prgIndices AS LONG PTR, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Get(BYVAL prgIndices AS LONG PTR, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.GetElement(BYVAL idx AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Get(BYVAL idx AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.GetElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Get(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.GetElement(BYVAL prgIndices AS LONG PTR, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Get(BYVAL prgIndices AS LONG PTR, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.GetStr(BYVAL prgIndices AS LONG PTR) AS CBSTR
F:CSafeArray.GetElement(BYVAL idx AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Get(BYVAL idx AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.GetStr(BYVAL idx AS LONG) AS CBSTR
F:CSafeArray.GetElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Get(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.GetStr(BYVAL cElem AS LONG, BYVAL cDim AS LONG) AS CBSTR
F:CSafeArray.GetElement(BYVAL prgIndices AS LONG PTR, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Get(BYVAL prgIndices AS LONG PTR, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.GetVar(BYVAL prgIndices AS LONG PTR) AS CVAR
F:CSafeArray.GetElement(BYVAL idx AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Get(BYVAL idx AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.GetVar(BYVAL idx AS LONG) AS CVAR
F:CSafeArray.GetElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Get(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.GetVar(BYVAL cElem AS LONG, BYVAL cDim AS LONG) AS CVAR
F:CSafeArray.PutElement(BYVAL prgIndices AS LONG PTR, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Put(BYVAL prgIndices AS LONG PTR, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL idx AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Put(BYVAL idx AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Put(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL prgIndices AS LONG PTR, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutStr(BYVAL prgIndices AS LONG PTR, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL idx AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutStr(BYVAL idx AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutStr(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.PutElement(BYVAL prgIndices AS LONG PTR, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.PutVar(BYVAL prgIndices AS LONG PTR, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.PutElement(BYVAL idx AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.PutVar(BYVAL idx AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.PutElement(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.PutVar(BYVAL cElem AS LONG, BYVAL cDim AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.AppendElement(BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Append(BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.AppendElement(BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Append(BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.AppendStr(BYVAL pwszData AS WSTRING PTR) AS HRESULT
F:CSafeArray.AppendElement(BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Append(BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.AppendElement(BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.Append(BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.InsertElement(BYVAL nPos AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.InsertElement(BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Insert(BYVAL nPos AS LONG, BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.Insert(BYVAL pData AS ANY PTR) AS HRESULT
F:CSafeArray.InsertElement(BYVAL nPos AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.InsertElement(BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Insert(BYVAL nPos AS LONG, BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.Insert(BYREF cbsData AS CBSTR) AS HRESULT
F:CSafeArray.InsertStr(BYVAL nPos AS LONG, BYVAL pwszData AS WSTRING PTR) AS HRESULT
F:CSafeArray.InsertStr(BYVAL pwszData AS WSTRING PTR) AS HRESULT
F:CSafeArray.InsertElement(BYVAL nPos AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.InsertElement(BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Insert(BYVAL nPos AS LONG, BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.Insert(BYREF cvData AS CVAR) AS HRESULT
F:CSafeArray.InsertElement(BYVAL nPos AS LONG, BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.InsertElement(BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.Insert(BYVAL nPos AS LONG, BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.Insert(BYVAL vData AS VARIANT) AS HRESULT
F:CSafeArray.DeleteElement(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.Remove(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.DeleteStringElement(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.RemoveStr(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.DeleteVariantElement(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.RemoveVar(BYVAL nPos AS LONG) AS HRESULT
F:CSafeArray.FindElement(BYREF wszFind AS WSTRING, BYVAL bNoCase AS BOOLEAN = FALSE) AS LONG
F:CSafeArray.Find(BYREF wszFind AS WSTRING, BYVAL bNoCase AS BOOLEAN = FALSE) AS LONG
F:AfxCSafeArrayCompare CDECL(BYVAL a AS AFX_BSTR PTR, BYVAL b AS AFX_BSTR PTR) AS LONG
F:AfxCSafeArrayReverseCompare CDECL(BYVAL a AS AFX_BSTR PTR, BYVAL b AS AFX_BSTR PTR) AS LONG
F:CSafeArray.Sort(BYVAL bAscend AS BOOLEAN = TRUE) AS HRESULT
F:AfxStrSplit(BYREF wszStr AS WSTRING, BYREF wszDelimiters AS WSTRING) AS CSafeArray
F:AfxStrJoin(BYREF csa AS CSafeArray, BYREF wszDelimiter AS WSTRING) AS CWSTR
F:AfxXmlBase64Encode(BYREF strData AS STRING) AS STRING
F:AfxXmlBase64Decode(BYREF strData AS STRING) AS STRING
F:AfxFileReadAllLinesA(BYREF wszFileName AS WSTRING, BYREF szDelimiter AS CONST ZSTRING = CHR(13, 10)) AS CSafeArray
F:AfxFileReadAllLinesW(BYREF wszFileName AS WSTRING, BYREF wszDelimiter AS CONST WSTRING = CHR(13, 10)) AS CSafeArray
F:CShortcut.GetLastResult() AS HRESULT
F:CShortcut.Save() AS HRESULT
F:CURLShortcut.GetLastResult() AS HRESULT
F:CURLShortcut.Save() AS HRESULT
F:CSQLite.RefCount(BYVAL bIncrement AS BOOLEAN, BYREF wszDllPath AS WSTRING = "###########") AS LONG
F:CSQLite.GetLastResult() AS HRESULT
F:CSQLite.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CSQLite.Version() AS STRING
F:CSQLite.VersionNumber() AS LONG
F:CSQLite.SourceID() AS STRING
F:CSQLite.Complete(BYREF wszSql AS CONST WSTRING) AS LONG
F:CSQLite.ThreadSafe() AS BOOLEAN
F:CSQLite.CompileOptionUsed(BYREF szOptName AS ZSTRING) AS BOOLEAN
F:CSQLite.GetCompileOption(BYVAL nOption AS LONG) AS STRING
F:CSQLite.Malloc(BYVAL nBytes AS LONG) AS ANY PTR
F:CSQLite.Malloc64(BYVAL nBytes AS sqlite3_uint64) AS ANY PTR
F:CSQLite.Realloc(BYVAL pMem AS ANY PTR, BYVAL nBytes AS LONG) AS ANY PTR
F:CSQLite.Realloc64(BYVAL pMem AS ANY PTR, BYVAL nBytes AS sqlite3_uint64) AS ANY PTR
F:CSQLite.Free(BYVAL pMem AS ANY PTR)
F:CSQLite.MemorySize(BYVAL pMem AS ANY PTR) AS sqlite3_uint64
F:CSQLite.MemoryUsed() AS sqlite3_uint64
F:CSQLite.MemoryHighwater(BYVAL resetFlag AS BOOLEAN) AS sqlite3_uint64
F:CSQLite.Randomness(BYVAL nBytes AS LONG, BYVAL pbuffer AS ANY PTR)
F:CSQLite.EnableSharedCache(BYVAL bSharing AS BOOLEAN) AS LONG
F:CSQLite.ReleaseMemory(BYVAL nBytes AS LONG) AS LONG
F:CSQLite.Sleep(BYVAL ms AS LONG) AS LONG
F:CSQLite.SoftHeapLimit64(BYVAL nBytes AS LONG) AS LONG
F:CSQLite.Status(BYVAL op AS LONG, BYREF pCurrent AS LONG, BYREF pHighwater AS LONG, BYVAL resetFlag AS BOOLEAN = FALSE) AS LONG
F:CSQLite.Status64(BYVAL op AS LONG, BYREF pCurrent AS sqlite3_int64, BYREF pHighwater AS sqlite3_int64, BYVAL resetFlag AS BOOLEAN = FALSE) AS LONG
F:CSQLite.ErrStr(BYVAL nErrorCode AS LONG) AS STRING
F:CSQLite.StrGlob(BYREF szGlob AS ZSTRING, BYREF szStr AS ZSTRING) AS LONG
F:CSQLiteDb.OpenDb(BYREF wszFileName AS CONST WSTRING) AS LONG
F:CSQLiteDb.CloseDb() AS LONG
F:CSQLiteDb.ErrCode() AS LONG
F:CSQLiteDb.ExtendedErrCode() AS LONG
F:CSQLiteDb.ExtendedResultCodes(BYVAL onoff AS BOOLEAN) AS LONG
F:CSQLiteDb.ErrMsg() AS STRING
F:CSQLiteDb.Changes() AS LONG
F:CSQLiteDb.TotalChanges() AS LONG
F:CSQLiteDb.LastInsertRowId() AS sqlite3_int64
F:CSQLiteDb.Limit(BYVAL id AS LONG, BYVAL newVal AS LONG) AS LONG
F:CSQLiteDb.ReleaseMemory() AS LONG
F:CSQLiteDb.Prepare(BYREF wszSql AS WSTRING) AS sqlite3_stmt PTR
F:CSQLiteDb.Exec(BYREF wszSql AS WSTRING) AS LONG
F:CSQLiteDb.Status(BYVAL op AS LONG, BYREF pCurrent AS LONG, BYREF pHighwater AS LONG, BYVAL resetFlag AS BOOLEAN = FALSE) AS LONG
F:CSQLiteDb.ProgressHandler(BYVAL nOps AS LONG, BYVAL pCallback AS ANY PTR, BYVAL pArg AS ANY PTR)
F:CSQLiteDb.UnlockNotify(BYVAL pNotifyCallback AS ANY PTR, BYVAL pNotifyArg AS ANY PTR) AS LONG
F:CSQLiteDb.OpenBlob(BYREF szDbName AS ZSTRING, BYREF szTableName AS ZSTRING, BYREF szColumnName AS ZSTRING, BYVAL iRow AS sqlite3_int64, BYVAL flags AS LONG = 0) AS sqlite3_blob PTR
F:CSQLiteStmt.Finalize() AS LONG
F:CSQLiteStmt.Reset() AS LONG
F:CSQLiteStmt.GetRow() AS LONG
F:CSQLiteStmt.Step_() AS LONG
F:CSQLiteStmt.ColumnCount() AS LONG
F:CSQLiteStmt.ColumnName(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.GetColumNames() AS CDicObj PTR
F:CSQLiteStmt.ColumnText(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.ColumnText(BYREF wszColName AS WSTRING) AS CWSTR
F:CSQLiteStmt.DataCount() AS LONG
F:CSQLiteStmt.DbHandle() AS sqlite3 PTR
F:CSQLiteStmt.Sql() AS STRING
F:CSQLiteStmt.Busy() AS BOOLEAN
F:CSQLiteStmt.ReadOnly() AS BOOLEAN
F:CSQLiteStmt.BindBlob(BYVAL idx AS LONG, BYVAL pValue AS ANY PTR, BYVAL numBytes AS LONG, BYVAL pDestructor AS ANY PTR = NULL) AS LONG
F:CSQLiteStmt.BindBlob64(BYVAL idx AS LONG, BYVAL pValue AS ANY PTR, BYVAL numBytes AS sqlite3_uint64, BYVAL pDestructor AS ANY PTR = NULL) AS LONG
F:CSQLiteStmt.BindDouble(BYVAL idx AS LONG, BYVAL dblValue AS DOUBLE) AS LONG
F:CSQLiteStmt.BindLong(BYVAL idx AS LONG, BYVAL longValue AS LONG) AS LONG
F:CSQLiteStmt.BindLongInt(BYVAL idx AS LONG, BYVAL longintValue AS sqlite3_int64) AS LONG
F:CSQLiteStmt.BindNull(BYVAL idx AS LONG) AS LONG
F:CSQLiteStmt.BindText(BYVAL idx AS LONG, BYREF wszValue AS WSTRING, BYVAL pDestructor AS ANY PTR = NULL) AS LONG
F:CSQLiteStmt.BindZeroBlob(BYVAL idx AS LONG, BYVAL numBytes AS LONG) AS LONG
F:CSQLiteStmt.BindZeroBlob64(BYVAL idx AS LONG, BYVAL numBytes AS sqlite3_uint64) AS LONG
F:CSQLiteStmt.BindParameterCount() AS LONG
F:CSQLiteStmt.BindParameterName(BYVAL idx AS LONG) AS STRING
F:CSQLiteStmt.BindParameterIndex(BYREF szName AS ZSTRING) AS LONG
F:CSQLiteStmt.ClearBindings() AS LONG
F:CSQLiteStmt.ColumnDatabaseName(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.ColumnDatabaseName(BYREF wszColName AS WSTRING) AS CWSTR
F:CSQLiteStmt.ColumnTableName(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.ColumnTableName(BYREF wszColName AS WSTRING) AS CWSTR
F:CSQLiteStmt.ColumnOriginName(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.ColumnOriginName(BYREF wszColName AS WSTRING) AS CWSTR
F:CSQLiteStmt.ColumnDeclaredType(BYVAL nCol AS LONG) AS CWSTR
F:CSQLiteStmt.ColumnDeclaredType(BYREF wszColName AS WSTRING) AS CWSTR
F:CSQLiteStmt.ColumnBlob(BYVAL nCol AS LONG) AS ANY PTR
F:CSQLiteStmt.ColumnBlob(BYREF wszColName AS WSTRING) AS ANY PTR
F:CSQLiteStmt.ColumnBytes(BYVAL nCol AS LONG) AS LONG
F:CSQLiteStmt.ColumnBytes(BYREF wszColName AS WSTRING) AS LONG
F:CSQLiteStmt.ColumnDouble(BYVAL nCol AS LONG) AS DOUBLE
F:CSQLiteStmt.ColumnDouble(BYREF wszColName AS WSTRING) AS DOUBLE
F:CSQLiteStmt.ColumnLong(BYVAL nCol AS LONG) AS LONG
F:CSQLiteStmt.ColumnLong(BYREF wszColName AS WSTRING) AS LONG
F:CSQLiteStmt.ColumnLongInt(BYVAL nCol AS LONG) AS LONGINT
F:CSQLiteStmt.ColumnLongInt(BYREF wszColName AS WSTRING) AS LONGINT
F:CSQLiteStmt.ColumnType(BYVAL nCol AS LONG) AS LONG
F:CSQLiteStmt.ColumnType(BYREF wszColName AS WSTRING) AS LONG
F:CSQLiteStmt.IsColumnNull(BYVAL nCol AS LONG) AS BOOLEAN
F:CSQLiteStmt.IsColumnNull(BYREF wszColName AS WSTRING) AS BOOLEAN
F:CSQLiteBlob.Close() AS LONG
F:CSQLiteBlob.Reopen(BYVAL rowId AS sqlite3_int64) AS LONG
F:CSQLiteBlob.Bytes() AS LONG
F:CSQLiteBlob.Read(BYVAL pBuffer AS ANY PTR, BYVAL numBytes AS LONG, BYVAL iOffset AS LONG = 0) AS LONG
F:CSQLiteBlob.Write(BYVAL pBuffer AS ANY PTR, BYVAL numBytes AS LONG, BYVAL iOffset AS LONG = 0) AS LONG
F:CStack.Push(BYREF cvData AS CVAR) AS HRESULT
F:CStack.Pop() AS CVAR
F:CStack.Count() AS UINT
F:CStack.Clear() AS HRESULT
F:CQueue.Enqueue(BYREF cvData AS CVAR) AS HRESULT
F:CQueue.Dequeue() AS CVAR
F:CQueue.Count() AS UINT
F:CQueue.Clear() AS HRESULT
F:CTextStream.GetLastResult() AS HRESULT
F:CTextStream.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CTextStream.GetErrorInfo() AS STRING
F:CTextStream.Create(BYREF cbsFileName AS CBSTR, BYVAL bOverwrite AS BOOLEAN = TRUE, BYVAL bUnicode AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.Open(BYREF cbsFileName AS CBSTR, BYVAL IOMode AS LONG = 1, BYVAL bCreate AS BOOLEAN = FALSE, BYVAL bUnicode AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenUnicode(BYREF cbsFileName AS CBSTR, BYVAL IOMode AS LONG = 1, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForInputA(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForOutputA(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForAppendA(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForInputW(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForOutputW(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.OpenForAppendW(BYREF cbsFileName AS CBSTR, BYVAL bCreate AS BOOLEAN = FALSE) AS HRESULT
F:CTextStream.Close() AS HRESULT
F:CTextStream.EOS() AS BOOLEAN
F:CTextStream.EOL() AS BOOLEAN
F:CTextStream.Read(BYVAL numChars AS LONG) AS CBSTR
F:CTextStream.ReadLine() AS CBSTR
F:CTextStream.ReadAll() AS CBSTR
F:CTextStream.Write(BYREF cbsText AS CBSTR) AS HRESULT
F:CTextStream.WriteLine(BYREF cbsText AS CBSTR) AS HRESULT
F:CTextStream.WriteBlankLines(BYVAL numLines AS LONG) AS HRESULT
F:CTextStream.Skip(BYVAL numChars AS LONG) AS HRESULT
F:CTextStream.SkipLine() AS HRESULT
F:CTimeSpan.SetTimeSpan(BYVAL lltime AS LONGLONG)
F:CTimeSpan.SetTimeSpan(BYVAL lDays AS LONG, BYVAL nHours AS LONG, BYVAL nMins AS LONG, BYVAL nSecs AS LONG)
F:CTimeSpan.GetTimeSpan() AS LONGLONG
F:CTimeSpan.GetTotalHours() AS LONGLONG
F:CTimeSpan.GetTotalMinutes() AS LONGLONG
F:CTimeSpan.GetTotalSeconds() AS LONGLONG
F:CTimeSpan.GetDays() AS LONG
F:CTimeSpan.GetHours() AS LONG
F:CTimeSpan.GetMinutes() AS LONG
F:CTimeSpan.GetSeconds() AS LONG
F:CTime64.SetDateTime(BYVAL nYear AS WORD, BYVAL nMonth AS WORD, BYVAL nDay AS WORD, BYVAL nHour AS WORD = 0, BYVAL nMin AS WORD = 0, BYVAL nSec AS WORD = 0) AS BOOLEAN
F:CTime64.GetCurrentTime() AS CTime64
F:CTime64.GetTime() AS LONGLONG
F:CTime64.GetYear() AS LONG
F:CTime64.GetMonth() AS LONG
F:CTime64.GetDay() AS LONG
F:CTime64.GetHour() AS LONG
F:CTime64.GetMinute() AS LONG
F:CTime64.GetSecond() AS LONG
F:CTime64.GetDayOfWeek() AS LONG
F:CTime64.GetGmtTime() AS tm
F:CTime64.GetLocalTime() AS tm
F:CTime64.GetAsSystemTime() AS SYSTEMTIME
F:CTime64.GetAsFileTime() AS FILETIME
F:CTime64.Format(BYREF wszFmt AS WSTRING) AS CWSTR
F:CTime64.FormatGmt(BYREF wszFmt AS WSTRING) AS CWSTR
F:AfxIsUtf16(BYVAL pv aS ANY PTR) AS BOOLEAN
F:CUTF16.wstr() BYREF AS WSTRING
F:CUTF16.vptr() AS WSTRING PTR
F:CUTF16.sptr() AS WSTRING PTR
F:CUTF16.wchar() AS WSTRING PTR
F:CUTF16.cbstr() AS CBSTR_
F:CUTF16.bstr() AS AFX_BSTR
F:CUTF16.ResizeBuffer(BYVAL nChars AS UINT) AS WSTRING PTR
F:CUTF16.AppendBuffer(BYVAL memAddr AS ANY PTR, BYVAL nChars AS UINT) AS BOOLEAN
F:CUTF16.DelChars(BYVAL nIndex AS UINT, BYVAL nCount AS UINT) AS BOOLEAN
F:CUTF16.InsertBuffer(BYVAL memAddr AS ANY PTR, BYVAL nIndex AS UINT, BYVAL nChars AS UINT) AS BOOLEAN
F:CUTF16.Insert(BYREF ansiStr AS STRING, BYVAL nIndex AS UINT, BYVAL nCodePage AS UINT = 0) AS BOOLEAN
F:CUTF16.Insert(BYVAL pwszStr AS WSTRING PTR, BYVAL nIndex AS UINT) AS BOOLEAN
F:CUTF16.Insert(BYREF cws AS CUTF16, BYVAL nIndex AS UINT) AS BOOLEAN
F:CUTF16.Insert(BYREF cws AS CWSTR, BYVAL nIndex AS UINT) AS BOOLEAN
F:CUTF16.Insert(BYREF cbs AS CBSTR_, BYVAL nIndex AS LONG) AS BOOLEAN
F:CUTF16.Add(BYVAL pwszStr AS WSTRING PTR) AS BOOLEAN
F:CUTF16.Add(BYREF ansiStr AS STRING, BYVAL nCodePage AS UINT = 0) AS BOOLEAN
F:CUTF16.Add(BYREF cws AS CUTF16) AS BOOLEAN
F:CUTF16.Add(BYREF cws AS CWSTR) AS BOOLEAN
F:CUTF16.Add(BYREF cbs AS CBSTR_) AS BOOLEAN
F:CUTF16.LeftChars(BYVAL nChars AS LONG) AS CUTF16
F:CUTF16.RightChars(BYVAL nChars AS LONG) AS CUTF16
F:CUTF16.MidChars(BYVAL nStart AS LONG, BYVAL nChars AS LONG = 0) AS CUTF16
F:CUTF16.ValLong() AS LONG
F:CUTF16.ValInt() AS LONG
F:CUTF16.ValULong() AS ULONG
F:CUTF16.ValUInt() AS ULONG
F:CUTF16.ValLongInt() AS LONGINT
F:CUTF16.ValULongInt() AS ULONGINT
F:CUTF16.ValDouble() AS DOUBLE
F:CUTF16.Value() AS DOUBLE
F:CVar.vptr() AS VARIANT PTR
F:CVar.sptr() AS VARIANT PTR
F:CVar.ToStr() AS CWSTR
F:CVar.ToWStr() AS CWSTR
F:CVar.wstr() AS CWSTR
F:CVar.ToBStr() AS CBSTR
F:CVar.bstr() AS CBSTR
F:CVar.ToUtf8() AS STRING
F:CVar.ToBuffer(BYVAL pv AS ANY PTR, BYVAL cb AS UINT) AS HRESULT
F:CVar.ToBuffer() AS STRING
F:CVar.ToUnknown() AS ANY PTR
F:CVar.ToDispatch() AS ANY PTR
F:CVar.DecToDouble() AS DOUBLE
F:CVar.DecToCy() AS CY
F:CVar.ToVbDate() AS DATE_
F:CVar.ToSystemTime() AS SYSTEMTIME
F:CVar.ToGuid() AS GUID
F:CVar.ToGuidStr() AS CWSTR
F:CVar.ToGuidWStr() AS CWSTR
F:CVar.ToGuidBStr() AS CBSTR
F:CVar.ToDosDateTime(BYVAL pwDate AS USHORT PTR, BYVAL pwTime AS USHORT PTR) AS HRESULT
F:CVar.ToFileTime(BYVAL stfOut AS AFX_PSTIME_FLAGS) AS FILETIME
F:CVar.ToStrRet() AS STRRET
F:CVar.ToBooleanArray(BYVAL prgf AS WINBOOL PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToBooleanArrayAlloc(BYVAL pprgf AS WINBOOL PTR PTR) AS ULONG
F:CVar.ToShortArray(BYVAL prgn AS SHORT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToShortArrayAlloc(BYVAL pprgn AS SHORT PTR PTR) AS ULONG
F:CVar.ToUShortArray(BYVAL prgn AS USHORT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToUShortArrayAlloc(BYVAL pprgn AS USHORT PTR PTR) AS ULONG
F:CVar.ToLongArray(BYVAL prgn AS LONG PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToLongArrayAlloc(BYVAL pprgn AS LONG PTR PTR) AS ULONG
F:CVar.ToULongArray(BYVAL prgn AS ULONG PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToULongArrayAlloc(BYVAL pprgn AS ULONG PTR PTR) AS ULONG
F:CVar.ToLongIntArray(BYVAL prgn AS LONGINT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToLongIntArrayAlloc(BYVAL pprgn AS LONGINT PTR PTR) AS ULONG
F:CVar.ToULongIntArray(BYVAL prgn AS ULONGINT PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToULongIntArrayAlloc(BYVAL pprgn AS ULONGINT PTR PTR) AS ULONG
F:CVar.ToDoubleArray(BYVAL prgn AS DOUBLE PTR, BYVAL crgn AS ULONG) AS ULONG
F:CVar.ToDoubleArrayAlloc(BYVAL pprgn AS DOUBLE PTR PTR) AS ULONG
F:CVar.ToStringArray(BYVAL prgsz AS PWSTR, BYVAL crgsz AS ULONG) AS ULONG
F:CVar.ToStringArrayAlloc(BYVAL pprgsz AS PWSTR PTR) AS ULONG
F:CVar.Put(BYREF cv AS CVAR) AS HRESULT
F:CVar.Put(BYREF v AS VARIANT) AS HRESULT
F:CVar.Put(BYREF wszStr AS WSTRING)
F:CVar.Put(BYVAL pvar AS VARIANT PTR) As HRESULT
F:CVar.Put(BYREF cws AS CWSTR)
F:CVar.Put(BYREF cbs AS CBSTR)
F:CVar.Put(BYVAL pdisp AS IDispatch PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CVar.Put(BYVAL punk AS IUnknown PTR, BYVAL fAddRef AS BOOLEAN = FALSE) AS HRESULT
F:CVar.Put(BYVAL _value AS LONGINT, BYVAL _vType AS WORD)
F:CVar.Put(BYVAL _value AS LONGINT, BYREF strType AS STRING)
F:CVar.Put(BYVAL _value AS DOUBLE, BYVAL _vType AS WORD = VT_R8)
F:CVar.Put(BYVAL _value AS DOUBLE, BYREF strType AS STRING)
F:CVar.PutRef(BYVAL _pvar AS ANY PTR, BYVAL _vType AS WORD) AS HRESULT
F:CVar.PutRef(BYVAL _pvar AS ANY PTR, BYREF strType AS STRING) AS HRESULT
F:CVar.PutBool(BYVAL _value AS BOOL)
F:CVar.PutBoolean(BYVAL _value AS BOOLEAN)
F:CVar.PutByte(BYVAL _value AS BYTE)
F:CVar.PutUByte(BYVAL _value AS UBYTE)
F:CVar.PutShort(BYVAL _value AS SHORT)
F:CVar.PutUShort(BYVAL _value AS USHORT)
F:CVar.PutInt(BYVAL _value AS INT_)
F:CVar.PutUInt(BYVAL _value AS UINT)
F:CVar.PutLong(BYVAL _value AS LONG)
F:CVar.PutULong(BYVAL _value AS ULONG)
F:CVar.PutLongInt(BYVAL _value AS LONGINT)
F:CVar.PutULongInt(BYVAL _value AS ULONGINT)
F:CVar.PutSingle(BYVAL _value AS SINGLE)
F:CVar.PutFloat(BYVAL _value AS SINGLE)
F:CVar.PutDouble(BYVAL _value AS DOUBLE)
F:CVar.PutBuffer(BYVAL pv AS ANY PTR, BYVAL cb AS UINT) AS HRESULT
F:CVar.PutUtf8(BYREF strUtf8 AS STRING) AS HRESULT
F:CVar.PutSafeArray(BYVAL parray AS SAFEARRAY PTR, BYVAL fAttach AS BOOLEAN = FALSE) AS HRESULT
F:CVar.PutResource(BYVAL hinst AS HINSTANCE, BYVAL id AS UINT) AS HRESULT
F:CVar.PutRecord(BYVAL pIRecordInfo AS IRecordInfo PTR, BYVAL pRec AS ANY PTR) AS HRESULT
F:CVar.PutDateString(BYVAL pwszDate AS WSTRING PTR, BYVAL lcid AS LCID = 0, BYVAL dwFlags AS ULONG = 0) AS HRESULT
F:CVar.PutVbDate(BYVAL vbDate AS DATE_) AS HRESULT
F:CVar.PutSystemTime(BYVAL st AS SYSTEMTIME PTR) AS BOOLEAN
F:CVar.PutGuid(BYVAL guid AS IID PTR) AS HRESULT
F:CVar.PutFileTime(BYVAL pft AS FILETIME PTR) AS HRESULT
F:CVar.PutFileTimeArray(BYVAL prgft AS FILETIME PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutStrRet(BYVAL pstrret AS STRRET PTR, BYVAL pidl AS PCUITEMID_CHILD) AS HRESULT
F:CVar.PutDec(BYVAL dec AS DECIMAL) AS HRESULT
F:CVar.PutDecFromStr(BYVAL pwszIn AS WSTRING PTR, BYVAL lcid AS LCID = 0, BYVAL dwFlags AS ULONG = 0) AS HRESULT
F:CVar.PutDecFromDouble(BYVAL dbIn AS DOUBLE) AS HRESULT
F:CVar.PutDecFromCy(BYVAL cyIn AS CY) AS HRESULT
F:CVar.PutBooleanArray(BYVAL prgf AS WINBOOL PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutShortArray(BYVAL prgf AS SHORT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutUShortArray(BYVAL prgf AS USHORT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutLongArray(BYVAL prgn AS LONG PTR, BYVAL cElems AS ULONG) AS CVAR
F:CVar.PutULongArray(BYVAL prgn AS ULONG PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutLongIntArray(BYVAL prgn AS LONGINT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutULongIntArray(BYVAL prgn AS ULONGINT PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutDoubleArray(BYVAL prgn AS DOUBLE PTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutStringArray(BYVAL prgsz AS PCWSTR, BYVAL cElems AS ULONG) AS HRESULT
F:CVar.PutPropVariant(BYVAL pPropVar AS PROPVARIANT PTR) AS HRESULT
F:CVar.PutVariantArrayElem(BYVAL pvarIn AS VARIANT PTR, BYVAL iElem AS ULONG) AS CVAR
F:CVar.GetDim() AS ULONG
F:CVar.GetLBound(BYVAL nDim AS UINT = 1) AS LONG
F:CVar.GetUBound(BYVAL nDim AS UINT = 1) AS LONG
F:CVar.GetElementCount() AS ULONG
F:CVar.GetVariantElem(BYVAL iElem AS ULONG) AS CVAR
F:CVar.GetBooleanElem(BYVAL iElem AS ULONG) AS BOOLEAN
F:CVar.GetShortElem(BYVAL iElem AS ULONG) AS SHORT
F:CVar.GetUShortElem(BYVAL iElem AS ULONG) AS USHORT
F:CVar.GetLongElem(BYVAL iElem AS ULONG) AS LONG
F:CVar.GetULongElem(BYVAL iElem AS ULONG) AS ULONG
F:CVar.GetLongIntElem(BYVAL iElem AS ULONG) AS LONGINT
F:CVar.GetULongIntElem(BYVAL iElem AS ULONG) AS ULONGINT
F:CVar.GetDoubleElem(BYVAL iElem AS ULONG) AS DOUBLE
F:CVar.GetStringElem(BYVAL iElem AS ULONG) AS CWSTR
F:CVar.FormatNumber(BYVAL iNumDig AS LONG = -1, BYVAL iIncLead AS LONG = -2, BYVAL iUseParens AS LONG = -2, BYVAL iGroup AS LONG = -2, BYVAL dwFlags AS DWORD = 0) AS CWSTR
F:CVar.Attach(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CVar.Attach(BYREF v AS VARIANT) AS HRESULT
F:CVar.Detach(BYVAL pvar AS VARIANT PTR) AS HRESULT
F:CVar.Detach(BYREF v AS VARIANT) AS HRESULT
F:CVar.vType() AS VARTYPE
F:CVar.ChangeType(BYVAL vtNew AS VARTYPE, BYVAL wFlags AS USHORT = 0) AS HRESULT
F:CVar.ChangeTypeEx(BYVAL vtNew AS VARTYPE, BYVAL lcid AS LCID = 0, BYVAL wFlags AS USHORT = 0) AS HRESULT
F:CVar.Round(BYREF cv AS CVAR, BYVAL cDecimals AS LONG) AS CVAR
F:CVar.Round(BYVAL cDecimals AS LONG) AS CVAR
F:CVar.ValLong() AS LONG
F:CVar.ValInt() AS LONG
F:CVar.ValULong() AS ULONG
F:CVar.ValUInt() AS ULONG
F:CVar.ValLongInt() AS LONGINT
F:CVar.ValULongInt() AS ULONGINT
F:CVar.ValDouble() AS DOUBLE
F:CVar.Value() AS DOUBLE
F:AfxCVarToStr(BYREF cv AS CVAR) AS CWSTR
F:AfxCVarOptPrm() AS CVAR
F:AfxCVariantToBuffer(BYREF cvIn AS CVAR, BYVAL pv AS LPVOID, BYVAL cb AS ULONG) AS ULONG
F:CScrollWindow.SetClientRect(BYVAL pRect AS RECT PTR)
F:CScrollWindow.SetScrollingUnits(BYVAL nHorzUnits AS LONG, BYVAL nVertUnits AS LONG)
F:CScrollWindow.OnVScroll(BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM)
F:CScrollWindow.OnHScroll(BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM)
F:CScrollWindow.OnSize(BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM)
F:CWindow_RegisterClass(BYREF wszClassName AS CONST WSTRING, BYVAL hInstance AS HINSTANCE, BYVAL lpfnWndProc AS WNDPROC) AS ATOM
F:CWindow.DoEvents(BYVAL nCmdShow AS LONG = 0) AS LONG
F:CWindow_WindowProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CWindow.Create(BYVAL hParent AS HWND = NULL, BYREF wszTitle AS WSTRING = "", BYVAL lpfnWndProc AS WNDPROC = NULL, BYVAL x AS LONG = CW_USEDEFAULT, BYVAL y AS LONG = CW_USEDEFAULT, BYVAL nWidth AS LONG = CW_USEDEFAULT, BYVAL nHeight AS LONG = CW_USEDEFAULT, BYVAL dwStyle AS UINT = WS_OVERLAPPEDWINDOW OR WS_CLIPCHILDREN OR WS_CLIPSIBLINGS, BYVAL dwExStyle AS UINT = WS_EX_CONTROLPARENT OR WS_EX_WINDOWEDGE) AS HWND
F:CWindow.CreateOverlapped(BYVAL hParent AS HWND = NULL, BYREF wszTitle AS WSTRING = "", BYVAL lpfnWndProc AS WNDPROC = NULL, BYVAL x AS LONG = CW_USEDEFAULT, BYVAL y AS LONG = CW_USEDEFAULT, BYVAL nWidth AS LONG = CW_USEDEFAULT, BYVAL nHeight AS LONG = CW_USEDEFAULT, BYVAL dwExStyle AS UINT = WS_EX_CONTROLPARENT OR WS_EX_WINDOWEDGE) AS HWND
F:CWindow.SetClientSize(BYVAL nWidth AS LONG, BYVAL nHeight AS LONG)
F:CWindow.Center(BYVAL hwnd AS HWND = NULL, BYVAL hwndParent AS HWND = NULL)
F:CWindow.ScaleX(BYVAL cx AS SINGLE) AS SINGLE
F:CWindow.ScaleY(BYVAL cy AS SINGLE) AS SINGLE
F:CWindow.UnScaleX(BYVAL cx AS SINGLE) AS SINGLE
F:CWindow.UnScaleY(BYVAL cy AS SINGLE) AS SINGLE
F:CWindow.GetWindowRect() AS RECT
F:CWindow.GetClientRect() AS RECT
F:CWindow.GetControlWindowRect(BYVAL hwnd AS HWND, BYVAL lpRect AS LPRECT)
F:CWindow.GetControlWindowRect(BYVAL hwnd AS HWND) AS RECT
F:CWindow.GetControlClientRect(BYVAL hwnd AS HWND) AS RECT
F:CWindow.GetWorkArea() AS RECT
F:CWindow.ControlHandle(BYVAL cID AS LONG) AS HWND
F:CWindow.SetWindowPos(BYVAL hwnd AS HWND, BYVAL hwndInsertAfter AS HWND, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL cx AS LONG, BYVAL cy AS LONG, BYVAL uFlags AS UINT) AS BOOLEAN
F:CWindow.MoveWindow(BYVAL hwnd AS HWND, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL bRepaint AS BOOLEAN) AS BOOLEAN
F:CWindow.CreateFont( BYREF wszFaceName AS WSTRING, BYVAL lPointSize AS LONG, BYVAL lWeight AS LONG = 0, BYVAL bItalic AS UBYTE = FALSE, BYVAL bUnderline AS UBYTE = FALSE, BYVAL bStrikeOut AS UBYTE = FALSE, BYVAL bCharSet AS UBYTE = DEFAULT_CHARSET ) AS HFONT
F:CWindow.SetFont( BYREF wszFaceName AS WSTRING, BYVAL lPointSize AS LONG, BYVAL lWeight AS LONG = 0, BYVAL bItalic AS UBYTE = FALSE, BYVAL bUnderline AS UBYTE = FALSE, BYVAL bStrikeOut AS UBYTE = FALSE, BYVAL bCharSet AS UBYTE = DEFAULT_CHARSET ) AS BOOLEAN
F:CWindow.AddControl( BYREF wszClassName AS WSTRING, BYVAL hParent AS HWND = NULL, BYVAL cID AS LONG_PTR = 0, BYREF wszTitle AS WSTRING = "", BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYVAL nWidth AS LONG = 0, BYVAL nHeight AS LONG = 0, BYVAL dwStyle AS LONG = -1, BYVAL dwExStyle AS LONG = -1, BYVAL lpParam AS LONG_PTR = 0, BYVAL pWndProc AS WNDPROC = NULL, BYVAL uIdSubclass AS UINT_PTR = &HFFFFFFFF, BYVAL dwRefData as DWORD_PTR = NULL ) AS HWND
F:CWindow.AddAccelerator(BYVAL fvirt AS UBYTE, BYREF wszKey AS WSTRING, BYVAL cmd AS WORD)
F:CWindow.CreateAcceleratorTable() AS HACCEL
F:CWindow_RegisterMDIClass(BYREF wsClassName AS WSTRING, BYVAL hInstance AS HINSTANCE, BYVAL lpfnWndProc AS WNDPROC) AS WORD
F:CWindow.CreateMDIWindow( BYVAL cID AS LONG_PTR, BYVAL x AS LONG, BYVAL y AS LONG, BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL dwStyle AS DWORD, BYVAL dwExStyle AS DWORD, BYVAL hSubMenu AS HANDLE, BYVAL lpfnWndProc AS WNDPROC ) AS HWND
F:CWindowMDIProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CWindow_CloseEnumProc( BYVAL hwnd AS HWND, BYVAL lParam AS LPARAM ) AS LONG
F:CTabPage.InsertPage(BYVAL hTab AS HWND, BYVAL nPage AS LONG, BYREF wszTitle AS WSTRING = "", BYVAL nImage AS LONG = -1, BYVAL lpfnWndProc AS WNDPROC = NULL, BYVAL dwStyle AS DWORD = WS_CLIPSIBLINGS OR WS_CLIPCHILDREN, BYVAL dwExStyle AS DWORD = 0) AS HWND
F:AfxResizeTabPages(BYVAL hTab AS HWND) AS BOOLEAN
F:AfxDestroyTabPage(BYVAL hTab AS HWND, BYVAL idx AS LONG) AS BOOLEAN
F:AfxDestroyAllTabPages(BYVAL hTab AS HWND) AS BOOLEAN
F:AfxCWindowPtr(BYVAL hwnd AS HWND) AS CWindow PTR
F:AfxCWindowOwnerPtr(BYVAL hwnd AS HWND) AS CWindow PTR
F:AfxCTabPagePtr(BYVAL hTab AS HWND, BYVAL idx AS LONG) AS CTabPage PTR
F:AfxScrollTabPagePtr(BYVAL hTab AS HWND, BYVAL idx AS LONG) AS CScrollWindow PTR
F:AfxScrollWindowPtr(BYVAL hwnd AS HWND) AS CScrollWindow PTR
F:AfxInputBox(BYVAL hParent AS HWND = NULL, BYVAL x AS LONG = 0, BYVAL y AS LONG = 0, BYREF cwsCaption AS CWSTR = "", BYREF cwsPrompt AS CWSTR = "", BYREF cwsText AS CWSTR = "", BYVAL nLen AS LONG = 260, BYVAL bPassword AS BOOLEAN = FALSE) AS CWSTR
F:AfxInputBoxWindowProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:AfxWinHttpCheckPlatform() AS BOOLEAN
F:CWinHttpRequest.GetLastResult() AS HRESULT
F:CWinHttpRequest.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CWinHttpRequest.Open(BYREF cbsMethod AS CBSTR, BYREF cbsUrl AS CBSTR, BYVAL bAsync AS BOOLEAN = FALSE) AS HRESULT
F:CWinHttpRequest.Send(BYREF cvBody AS CVAR = "") AS HRESULT
F:CWinHttpRequest.WaitForResponse(BYVAL nTimeout AS LONG = 0) AS BOOLEAN
F:CWinHttpRequest.GetResponseHeader(BYREF cbsHeader AS CBSTR) AS CBSTR
F:CWinHttpRequest.GetAllResponseHeaders() AS CBSTR
F:CWinHttpRequest.GetResponseBody() AS STRING
F:CWinHttpRequest.GetResponseStream() AS STRING
F:CWinHttpRequest.GetResponseText() AS CBSTR
F:CWinHttpRequest.SetProxy(BYVAL ProxySetting AS HTTPREQUEST_PROXY_SETTING, BYREF cvProxyServer AS CVAR = "", BYVAL cvBypassList AS CVAR = "") AS HRESULT
F:CWinHttpRequest.SetCredentials(BYREF cbsUserName AS CBSTR, BYREF cbsPassword AS CBSTR, BYVAL Flags AS HTTPREQUEST_SETCREDENTIALS_FLAGS) AS HRESULT
F:CWinHttpRequest.SetRequestHeader(BYREF cbsHeader AS CBSTR, BYREF cbsValue AS CBSTR) AS HRESULT
F:CWinHttpRequest.GetStatus() AS LONG
F:CWinHttpRequest.GetStatusText() AS CBSTR
F:CWinHttpRequest.Abort() AS HRESULT
F:CWinHttpRequest.SetTimeouts(BYVAL ResolveTimeout AS LONG, BYVAL ConnectTimeout AS LONG, BYVAL SendTimeout AS LONG, BYVAL ReceiveTimeout AS LONG) AS HRESULT
F:CWinHttpRequest.SetClientCertificate(BYREF cbsClientCertificate AS CBSTR) AS HRESULT
F:CWinHttpRequest.SetAutoLogonPolicy(BYVAL AutoLogonPolicy AS WinHttpRequestAutoLogonPolicy) AS HRESULT
F:CWinHttpRequest.GetOption(BYVAL nOption AS WinHttpRequestOption) AS CVAR
F:CWinHttpRequest.SetOption(BYVAL nOption AS WinHttpRequestOption, BYREF cvValue AS CVAR) AS HRESULT
F:AfxWmiGetErrorCodeText(BYVAL hRes AS HRESULT) AS CBSTR
F:AfxWmiGetFacilityCodeText(BYVAL hRes AS LONG) AS CBSTR
F:AfxWmiTimeToFileTime(BYVAL pwszDateTime AS WSTRING PTR, BYVAL bIsLocal AS BOOLEAN = TRUE) AS FILETIME
F:AfxWmiTimeToDateStr(BYVAL pwszDateTime AS WSTRING PTR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:AfxWmiTimeToTimeStr(BYVAL pwszDateTime AS WSTRING PTR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:CWmiServices.GetLastResult() AS HRESULT
F:CWmiServices.SetResult(BYVAL Result AS HRESULT) AS HRESULT
F:CWmiServices.GetErrorCodeText() AS CBSTR
F:CWmiServices.GetFacilityCodeText() AS CBSTR
F:CWmiServices.ServicesPtr() AS IDispatch PTR
F:CWmiServices.ServicesObj() AS IDispatch PTR
F:CWmiServices.ObjectSetPtr() AS IDispatch PTR
F:CWmiServices.PropertySetPtr() AS IDispatch PTR
F:CWmiServices.WmiTimeToFileTime(BYREF cbsDateTime AS CBSTR, BYVAL bIsLocal AS BOOLEAN = TRUE) AS FILETIME
F:CWmiServices.WmiDateToStr(BYREF cbsDateTime AS CBSTR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:CWmiServices.WmiDateToStr(BYREF cvDateTime AS CVAR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:CWmiServices.WmiTimeToStr(BYREF cbsDateTime AS CBSTR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:CWmiServices.WmiTimeToStr(BYREF cvDateTime AS CVAR, BYREF wszMask AS WSTRING, BYVAL bIsLocal AS BOOLEAN = TRUE, BYVAL lcid AS LCID = LOCALE_USER_DEFAULT) AS CBSTR
F:CWmiServices.ObjectsCount() AS LONG
F:CWmiServices.NewEnum() AS BOOLEAN
F:CWmiServices.ResetEnum() AS BOOLEAN
F:CWmiServices.NextObject() AS CVAR
F:CWmiServices.GetNamedProperties(BYVAL idx AS LONG = 0) AS HRESULT
F:CWmiServices.ExecQuery(BYREF cbsQuery AS CBSTR, BYVAL iFlags AS LONG = wbemFlagReturnWhenComplete) AS HRESULT
F:CWmiServices.InstancesOf(BYREF cbsClass AS CBSTR, BYVAL iFlags AS LONG = wbemFlagReturnImmediately) AS HRESULT
F:CWmiServices.Get(BYREF cbsObjectPath AS CBSTR, BYVAL iFlags AS LONG = 0, BYVAL objWbemNamedValueSet AS Afx_IDispatch PTR = NULL) AS HRESULT
F:CWmiServices.PropsCount() AS LONG
F:AfxIsBstr(BYVAL pv aS ANY PTR) AS BOOLEAN
F:CWstr.vptr() AS WSTRING PTR
F:CWstr.sptr() AS WSTRING PTR
F:CWstr.wstr() BYREF AS CONST WSTRING
F:CWstr.ResizeBuffer(BYVAL nValue AS UINT, BYVAL bClear AS BOOLEAN = FALSE)
F:CWstr.AppendBuffer(BYVAL addrMemory AS ANY PTR, BYVAL nNumBytes AS UINT) AS BOOLEAN
F:CWstr.Add(BYREF cws AS CWSTR)
F:CWstr.Add(BYREF cbs AS CBSTR_)
F:CWstr.Add(BYVAL pwszStr AS WSTRING PTR)
F:CWstr.Add(BYREF ansiStr AS STRING, BYVAL nCodePage AS UINT = 0)
F:CWstr.Resize(BYVAL nSize AS UINT, BYREF ch AS WSTRING = "")
F:CWstr.DelChars(BYVAL nIndex AS UINT, BYVAL nCount AS UINT) AS BOOLEAN
F:CWstr.InsertBuffer(BYVAL addrMemory AS ANY PTR, BYVAL nIndex AS UINT, BYVAL nNumBytes AS UINT) AS BOOLEAN
F:CWstr.Insert(BYREF cws AS CWSTR, BYVAL nIndex AS UINT) AS BOOLEAN
F:CWstr.Insert(BYREF cbs AS CBSTR_, BYVAL nIndex AS LONG) AS BOOLEAN
F:CWstr.Insert(BYVAL pwszStr AS WSTRING PTR, BYVAL nIndex AS UINT) AS BOOLEAN
F:CWstr.Insert(BYREF ansiStr AS STRING, BYVAL nIndex AS UINT, BYVAL nCodePage AS UINT = 0) AS BOOLEAN
F:CWStr.LeftChars(BYVAL nChars AS LONG) AS CWSTR
F:CWStr.RightChars(BYVAL nChars AS LONG) AS CWSTR
F:CWStr.MidChars(BYVAL nStart AS LONG, BYVAL nChars AS LONG = 0) AS CWSTR
F:CWStr.ValLong() AS LONG
F:CWStr.ValInt() AS LONG
F:CWStr.ValULong() AS ULONG
F:CWStr.ValUInt() AS ULONG
F:CWStr.ValLongInt() AS LONGINT
F:CWStr.ValULongInt() AS ULONGINT
F:CWStr.ValDouble() AS DOUBLE
F:CWStr.Value() AS DOUBLE
F:CWStr.cbstr() AS CBStr_
F:CWStr.bstr() AS AFX_BSTR
F:CWStr.wchar() AS WSTRING PTR
F:CBStr.bptr() AS AFX_BSTR
F:CBStr.vptr() AS AFX_BSTR PTR
F:CBStr.sptr() AS WSTRING PTR
F:CBStr.wstr() BYREF AS CONST WSTRING
F:CBStr.wchar() AS WSTRING PTR
F:CBStr.Append(BYREF wszStr AS CONST WSTRING)
F:CBstr.Attach(BYVAL pbstrSrc AS AFX_BSTR)
F:CBstr.Detach() AS AFX_BSTR
F:CBStr.Copy() AS AFX_BSTR
F:CBStr.LeftChars(BYVAL nChars AS LONG) AS CBSTR
F:CBStr.RightChars(BYVAL nChars AS LONG) AS CBSTR
F:CBStr.MidChars(BYVAL nStart AS LONG, BYVAL nChars AS LONG = 0) AS CBSTR
F:CBStr.ValLong() AS LONG
F:CBStr.ValInt() AS LONG
F:CBStr.ValULong() AS ULONG
F:CBStr.ValUInt() AS ULONG
F:CBStr.ValLongInt() AS LONGINT
F:CBStr.ValULongInt() AS ULONGINT
F:CBStr.ValDouble() AS DOUBLE
F:CBStr.Value() AS DOUBLE
F:AfxCWstrArrayCompare CDECL(BYVAL a AS CWSTR PTR, BYVAL b AS CWSTR PTR) AS LONG
F:AfxCWStrArrayReverseCompare CDECL(BYVAL a AS CWSTR PTR, BYVAL b AS CWSTR PTR) AS LONG
F:AfxCWstrSort(BYREF rgwstr AS ANY PTR, BYVAL numElm AS LONG, BYVAL bAscend AS BOOLEAN = TRUE)
F:AfxCWstrArraySort(rgwstr() AS CWSTR, BYVAL bAscend AS BOOLEAN = TRUE)
F:AfxCWstrArrayAppend(rgwstr() AS CWSTR, BYREF cws AS CWSTR) AS BOOLEAN
F:AfxCWstrArrayInsert(rgwstr() AS CWSTR, BYVAL nPos AS LONG, BYREF cws AS CWSTR) AS BOOLEAN
F:AfxCWstrArrayRemove(rgwstr() AS CWSTR, BYVAL nPos AS LONG) AS BOOLEAN
F:AfxCWstrArrayRemoveFirst(rgwstr() AS CWSTR) AS BOOLEAN
F:AfxCWstrArrayRemoveLast(rgwstr() AS CWSTR) AS BOOLEAN
F:CXpButton.CXPButtonProc(BYVAL hwnd AS HWND, BYVAL uMsg AS UINT, BYVAL wParam AS WPARAM, BYVAL lParam AS LPARAM) AS LRESULT
F:CXpButton.hWindow() AS HWND
F:CXpButton.SetFont(BYVAL hFont AS HFONT, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetFont() AS HFONT
F:CXpButton.SetTextFormat(BYVAL dwTextFlags AS DWORD, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetTextFormat() AS DWORD
F:CXpButton.SetCursor(BYVAL hCursor AS HCURSOR)
F:CXpButton.GetCursor() AS HCURSOR
F:CXpButton.SetToggle(BYVAL fToggle AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetToggle() AS LONG
F:CXpButton.SetToggleState(BYVAL fState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetToggleState() AS LONG
F:CXpButton.SetImageSize(BYVAL nWidth AS LONG, BYVAL nHeight AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetImageWidth(BYVAL nWidth AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetImageWidth() AS LONG
F:CXpButton.SetImageHeight(BYVAL nHeight AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetImageHeight() AS LONG
F:CXpButton.SetImagePos(BYVAL nPos AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetImagePos() AS LONG
F:CXpButton.SetImageMargin(BYVAL nMargin AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetImageMargin() AS LONG
F:CXpButton.SetTextMargin(BYVAL nMargin AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetTextMargin() AS LONG
F:CXpButton.GetButtonState() AS LONG
F:CXpButton.GetImageType() AS LONG
F:CXpButton.IsThemed() AS LONG
F:CXpButton.GetImage(BYVAL ImageState AS LONG) AS HANDLE
F:CXpButton.UxDrawPushButton(BYVAL hDC AS HDC)
F:CXpButton.SetImage(BYVAL hImage AS HANDLE, BYVAL nImageType AS LONG, BYVAL nImageState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetIcon(BYVAL hIcon AS HICON, BYVAL ImageState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetBitmap(BYVAL hBitmap AS HBITMAP, BYVAL ImageState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetIconFromFile(BYVAL pwszPath AS WSTRING PTR, BYVAL ImageState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetBitmapFromFile(BYVAL pwszPath AS WSTRING PTR, BYVAL ImageState AS LONG, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.SetImageFromFile(BYREF wszPath AS WSTRING, BYVAL ImageState AS LONG = XPBI_NORMAL, BYVAL fRedraw AS LONG = FALSE, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE)
F:CXpButton.SetImageFromRes(BYVAL hInstance AS HINSTANCE, BYREF wszImageName AS WSTRING, BYVAL ImageState AS LONG = XPBI_NORMAL, BYVAL fRedraw AS LONG = FALSE, BYVAL dimPercent AS LONG = 0, BYVAL bGrayScale AS LONG = FALSE)
F:CXpButton.SetButtonBkColor(BYVAL bkColor AS COLORREF, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetButtonBkColor() AS COLORREF
F:CXpButton.SetTextForeColor(BYVAL textColor AS COLORREF, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetTextForeColor() AS COLORREF
F:CXpButton.SetTextBkColor(BYVAL textColor AS COLORREF, BYVAL fRedraw AS LONG = FALSE)
F:CXpButton.GetTextBkColor() AS COLORREF
F:CXpButton.SetTextForeColorDown(BYVAL textColor AS COLORREF)
F:CXpButton.GetTextForeColorDown() AS COLORREF
F:CXpButton.SetTextBkColorDown(BYVAL textColor AS COLORREF)
F:CXpButton.GetTextBkColorDown() AS COLORREF
